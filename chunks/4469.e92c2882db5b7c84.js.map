{"version":3,"file":"static/chunks/4469.e92c2882db5b7c84.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@noble/hashes/_md.js","webpack://_N_E/./node_modules/@noble/hashes/hmac.js","webpack://_N_E/./node_modules/@noble/hashes/legacy.js","webpack://_N_E/./node_modules/@noble/hashes/ripemd160.js","webpack://_N_E/./node_modules/@noble/hashes/sha2.js","webpack://_N_E/./node_modules/@noble/hashes/sha256.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA512_IV = exports.SHA384_IV = exports.SHA224_IV = exports.SHA256_IV = exports.HashMD = void 0;\nexports.setBigUint64 = setBigUint64;\nexports.Chi = Chi;\nexports.Maj = Maj;\n/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nconst utils_ts_1 = require(\"./utils.js\");\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/** Choice: a ? b : c */\nfunction Chi(a, b, c) {\n    return (a & b) ^ (~a & c);\n}\n/** Majority function, true if any two inputs is true. */\nfunction Maj(a, b, c) {\n    return (a & b) ^ (a & c) ^ (b & c);\n}\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nclass HashMD extends utils_ts_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_ts_1.createView)(this.buffer);\n    }\n    update(data) {\n        (0, utils_ts_1.aexists)(this);\n        data = (0, utils_ts_1.toBytes)(data);\n        (0, utils_ts_1.abytes)(data);\n        const { view, buffer, blockLen } = this;\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_ts_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        (0, utils_ts_1.aexists)(this);\n        (0, utils_ts_1.aoutput)(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        (0, utils_ts_1.clean)(this.buffer.subarray(pos));\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_ts_1.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.destroyed = destroyed;\n        to.finished = finished;\n        to.length = length;\n        to.pos = pos;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.HashMD = HashMD;\n/**\n * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.\n * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.\n */\n/** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */\nexports.SHA256_IV = Uint32Array.from([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,\n]);\n/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */\nexports.SHA224_IV = Uint32Array.from([\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4,\n]);\n/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */\nexports.SHA384_IV = Uint32Array.from([\n    0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,\n]);\n/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */\nexports.SHA512_IV = Uint32Array.from([\n    0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,\n]);\n//# sourceMappingURL=_md.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmac = exports.HMAC = void 0;\n/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nconst utils_ts_1 = require(\"./utils.js\");\nclass HMAC extends utils_ts_1.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        (0, utils_ts_1.ahash)(hash);\n        const key = (0, utils_ts_1.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        (0, utils_ts_1.clean)(pad);\n    }\n    update(buf) {\n        (0, utils_ts_1.aexists)(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        (0, utils_ts_1.aexists)(this);\n        (0, utils_ts_1.abytes)(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\nexports.HMAC = HMAC;\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ripemd160 = exports.RIPEMD160 = exports.md5 = exports.MD5 = exports.sha1 = exports.SHA1 = void 0;\n/**\n\nSHA1 (RFC 3174), MD5 (RFC 1321) and RIPEMD160 (RFC 2286) legacy, weak hash functions.\nDon't use them in a new protocol. What \"weak\" means:\n\n- Collisions can be made with 2^18 effort in MD5, 2^60 in SHA1, 2^80 in RIPEMD160.\n- No practical pre-image attacks (only theoretical, 2^123.4)\n- HMAC seems kinda ok: https://datatracker.ietf.org/doc/html/rfc6151\n * @module\n */\nconst _md_ts_1 = require(\"./_md.js\");\nconst utils_ts_1 = require(\"./utils.js\");\n/** Initial SHA1 state */\nconst SHA1_IV = /* @__PURE__ */ Uint32Array.from([\n    0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0,\n]);\n// Reusable temporary buffer\nconst SHA1_W = /* @__PURE__ */ new Uint32Array(80);\n/** SHA1 legacy hash class. */\nclass SHA1 extends _md_ts_1.HashMD {\n    constructor() {\n        super(64, 20, 8, false);\n        this.A = SHA1_IV[0] | 0;\n        this.B = SHA1_IV[1] | 0;\n        this.C = SHA1_IV[2] | 0;\n        this.D = SHA1_IV[3] | 0;\n        this.E = SHA1_IV[4] | 0;\n    }\n    get() {\n        const { A, B, C, D, E } = this;\n        return [A, B, C, D, E];\n    }\n    set(A, B, C, D, E) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA1_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 80; i++)\n            SHA1_W[i] = (0, utils_ts_1.rotl)(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);\n        // Compression function main loop, 80 rounds\n        let { A, B, C, D, E } = this;\n        for (let i = 0; i < 80; i++) {\n            let F, K;\n            if (i < 20) {\n                F = (0, _md_ts_1.Chi)(B, C, D);\n                K = 0x5a827999;\n            }\n            else if (i < 40) {\n                F = B ^ C ^ D;\n                K = 0x6ed9eba1;\n            }\n            else if (i < 60) {\n                F = (0, _md_ts_1.Maj)(B, C, D);\n                K = 0x8f1bbcdc;\n            }\n            else {\n                F = B ^ C ^ D;\n                K = 0xca62c1d6;\n            }\n            const T = ((0, utils_ts_1.rotl)(A, 5) + F + E + K + SHA1_W[i]) | 0;\n            E = D;\n            D = C;\n            C = (0, utils_ts_1.rotl)(B, 30);\n            B = A;\n            A = T;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        this.set(A, B, C, D, E);\n    }\n    roundClean() {\n        (0, utils_ts_1.clean)(SHA1_W);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0);\n        (0, utils_ts_1.clean)(this.buffer);\n    }\n}\nexports.SHA1 = SHA1;\n/** SHA1 (RFC 3174) legacy hash function. It was cryptographically broken. */\nexports.sha1 = (0, utils_ts_1.createHasher)(() => new SHA1());\n/** Per-round constants */\nconst p32 = /* @__PURE__ */ Math.pow(2, 32);\nconst K = /* @__PURE__ */ Array.from({ length: 64 }, (_, i) => Math.floor(p32 * Math.abs(Math.sin(i + 1))));\n/** md5 initial state: same as sha1, but 4 u32 instead of 5. */\nconst MD5_IV = /* @__PURE__ */ SHA1_IV.slice(0, 4);\n// Reusable temporary buffer\nconst MD5_W = /* @__PURE__ */ new Uint32Array(16);\n/** MD5 legacy hash class. */\nclass MD5 extends _md_ts_1.HashMD {\n    constructor() {\n        super(64, 16, 8, true);\n        this.A = MD5_IV[0] | 0;\n        this.B = MD5_IV[1] | 0;\n        this.C = MD5_IV[2] | 0;\n        this.D = MD5_IV[3] | 0;\n    }\n    get() {\n        const { A, B, C, D } = this;\n        return [A, B, C, D];\n    }\n    set(A, B, C, D) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            MD5_W[i] = view.getUint32(offset, true);\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D } = this;\n        for (let i = 0; i < 64; i++) {\n            let F, g, s;\n            if (i < 16) {\n                F = (0, _md_ts_1.Chi)(B, C, D);\n                g = i;\n                s = [7, 12, 17, 22];\n            }\n            else if (i < 32) {\n                F = (0, _md_ts_1.Chi)(D, B, C);\n                g = (5 * i + 1) % 16;\n                s = [5, 9, 14, 20];\n            }\n            else if (i < 48) {\n                F = B ^ C ^ D;\n                g = (3 * i + 5) % 16;\n                s = [4, 11, 16, 23];\n            }\n            else {\n                F = C ^ (B | ~D);\n                g = (7 * i) % 16;\n                s = [6, 10, 15, 21];\n            }\n            F = F + A + K[i] + MD5_W[g];\n            A = D;\n            D = C;\n            C = B;\n            B = B + (0, utils_ts_1.rotl)(F, s[i % 4]);\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        this.set(A, B, C, D);\n    }\n    roundClean() {\n        (0, utils_ts_1.clean)(MD5_W);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0);\n        (0, utils_ts_1.clean)(this.buffer);\n    }\n}\nexports.MD5 = MD5;\n/**\n * MD5 (RFC 1321) legacy hash function. It was cryptographically broken.\n * MD5 architecture is similar to SHA1, with some differences:\n * - Reduced output length: 16 bytes (128 bit) instead of 20\n * - 64 rounds, instead of 80\n * - Little-endian: could be faster, but will require more code\n * - Non-linear index selection: huge speed-up for unroll\n * - Per round constants: more memory accesses, additional speed-up for unroll\n */\nexports.md5 = (0, utils_ts_1.createHasher)(() => new MD5());\n// RIPEMD-160\nconst Rho160 = /* @__PURE__ */ Uint8Array.from([\n    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n]);\nconst Id160 = /* @__PURE__ */ (() => Uint8Array.from(new Array(16).fill(0).map((_, i) => i)))();\nconst Pi160 = /* @__PURE__ */ (() => Id160.map((i) => (9 * i + 5) % 16))();\nconst idxLR = /* @__PURE__ */ (() => {\n    const L = [Id160];\n    const R = [Pi160];\n    const res = [L, R];\n    for (let i = 0; i < 4; i++)\n        for (let j of res)\n            j.push(j[i].map((k) => Rho160[k]));\n    return res;\n})();\nconst idxL = /* @__PURE__ */ (() => idxLR[0])();\nconst idxR = /* @__PURE__ */ (() => idxLR[1])();\n// const [idxL, idxR] = idxLR;\nconst shifts160 = /* @__PURE__ */ [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => Uint8Array.from(i));\nconst shiftsL160 = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts160[i][j]));\nconst shiftsR160 = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts160[i][j]));\nconst Kl160 = /* @__PURE__ */ Uint32Array.from([\n    0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\n]);\nconst Kr160 = /* @__PURE__ */ Uint32Array.from([\n    0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\n]);\n// It's called f() in spec.\nfunction ripemd_f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    if (group === 1)\n        return (x & y) | (~x & z);\n    if (group === 2)\n        return (x | ~y) ^ z;\n    if (group === 3)\n        return (x & z) | (y & ~z);\n    return x ^ (y | ~z);\n}\n// Reusable temporary buffer\nconst BUF_160 = /* @__PURE__ */ new Uint32Array(16);\nclass RIPEMD160 extends _md_ts_1.HashMD {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            BUF_160[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl160[group], hbr = Kr160[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL160[group], sr = shiftsR160[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = ((0, utils_ts_1.rotl)(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = (0, utils_ts_1.rotl)(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = ((0, utils_ts_1.rotl)(ar + ripemd_f(rGroup, br, cr, dr) + BUF_160[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = (0, utils_ts_1.rotl)(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        (0, utils_ts_1.clean)(BUF_160);\n    }\n    destroy() {\n        this.destroyed = true;\n        (0, utils_ts_1.clean)(this.buffer);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\nexports.RIPEMD160 = RIPEMD160;\n/**\n * RIPEMD-160 - a legacy hash function from 1990s.\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\n */\nexports.ripemd160 = (0, utils_ts_1.createHasher)(() => new RIPEMD160());\n//# sourceMappingURL=legacy.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ripemd160 = exports.RIPEMD160 = void 0;\n/**\n * RIPEMD-160 legacy hash function.\n * https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n * https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\n * @module\n * @deprecated\n */\nconst legacy_ts_1 = require(\"./legacy.js\");\n/** @deprecated Use import from `noble/hashes/legacy` module */\nexports.RIPEMD160 = legacy_ts_1.RIPEMD160;\n/** @deprecated Use import from `noble/hashes/legacy` module */\nexports.ripemd160 = legacy_ts_1.ripemd160;\n//# sourceMappingURL=ripemd160.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha512_224 = exports.sha512_256 = exports.sha384 = exports.sha512 = exports.sha224 = exports.sha256 = exports.SHA512_256 = exports.SHA512_224 = exports.SHA384 = exports.SHA512 = exports.SHA224 = exports.SHA256 = void 0;\n/**\n * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.\n * SHA256 is the fastest hash implementable in JS, even faster than Blake3.\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nconst _md_ts_1 = require(\"./_md.js\");\nconst u64 = require(\"./_u64.js\");\nconst utils_ts_1 = require(\"./utils.js\");\n/**\n * Round constants:\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\n */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n/** Reusable temporary buffer. \"W\" comes straight from spec. */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends _md_ts_1.HashMD {\n    constructor(outputLen = 32) {\n        super(64, outputLen, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = _md_ts_1.SHA256_IV[0] | 0;\n        this.B = _md_ts_1.SHA256_IV[1] | 0;\n        this.C = _md_ts_1.SHA256_IV[2] | 0;\n        this.D = _md_ts_1.SHA256_IV[3] | 0;\n        this.E = _md_ts_1.SHA256_IV[4] | 0;\n        this.F = _md_ts_1.SHA256_IV[5] | 0;\n        this.G = _md_ts_1.SHA256_IV[6] | 0;\n        this.H = _md_ts_1.SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_ts_1.rotr)(W15, 7) ^ (0, utils_ts_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_ts_1.rotr)(W2, 17) ^ (0, utils_ts_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_ts_1.rotr)(E, 6) ^ (0, utils_ts_1.rotr)(E, 11) ^ (0, utils_ts_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + (0, _md_ts_1.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_ts_1.rotr)(A, 2) ^ (0, utils_ts_1.rotr)(A, 13) ^ (0, utils_ts_1.rotr)(A, 22);\n            const T2 = (sigma0 + (0, _md_ts_1.Maj)(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        (0, utils_ts_1.clean)(SHA256_W);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        (0, utils_ts_1.clean)(this.buffer);\n    }\n}\nexports.SHA256 = SHA256;\nclass SHA224 extends SHA256 {\n    constructor() {\n        super(28);\n        this.A = _md_ts_1.SHA224_IV[0] | 0;\n        this.B = _md_ts_1.SHA224_IV[1] | 0;\n        this.C = _md_ts_1.SHA224_IV[2] | 0;\n        this.D = _md_ts_1.SHA224_IV[3] | 0;\n        this.E = _md_ts_1.SHA224_IV[4] | 0;\n        this.F = _md_ts_1.SHA224_IV[5] | 0;\n        this.G = _md_ts_1.SHA224_IV[6] | 0;\n        this.H = _md_ts_1.SHA224_IV[7] | 0;\n    }\n}\nexports.SHA224 = SHA224;\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\n// Round contants\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\n// prettier-ignore\nconst K512 = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\nconst SHA512_Kh = /* @__PURE__ */ (() => K512[0])();\nconst SHA512_Kl = /* @__PURE__ */ (() => K512[1])();\n// Reusable temporary buffers\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nclass SHA512 extends _md_ts_1.HashMD {\n    constructor(outputLen = 64) {\n        super(128, outputLen, 16, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = _md_ts_1.SHA512_IV[0] | 0;\n        this.Al = _md_ts_1.SHA512_IV[1] | 0;\n        this.Bh = _md_ts_1.SHA512_IV[2] | 0;\n        this.Bl = _md_ts_1.SHA512_IV[3] | 0;\n        this.Ch = _md_ts_1.SHA512_IV[4] | 0;\n        this.Cl = _md_ts_1.SHA512_IV[5] | 0;\n        this.Dh = _md_ts_1.SHA512_IV[6] | 0;\n        this.Dl = _md_ts_1.SHA512_IV[7] | 0;\n        this.Eh = _md_ts_1.SHA512_IV[8] | 0;\n        this.El = _md_ts_1.SHA512_IV[9] | 0;\n        this.Fh = _md_ts_1.SHA512_IV[10] | 0;\n        this.Fl = _md_ts_1.SHA512_IV[11] | 0;\n        this.Gh = _md_ts_1.SHA512_IV[12] | 0;\n        this.Gl = _md_ts_1.SHA512_IV[13] | 0;\n        this.Hh = _md_ts_1.SHA512_IV[14] | 0;\n        this.Hl = _md_ts_1.SHA512_IV[15] | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        (0, utils_ts_1.clean)(SHA512_W_H, SHA512_W_L);\n    }\n    destroy() {\n        (0, utils_ts_1.clean)(this.buffer);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexports.SHA512 = SHA512;\nclass SHA384 extends SHA512 {\n    constructor() {\n        super(48);\n        this.Ah = _md_ts_1.SHA384_IV[0] | 0;\n        this.Al = _md_ts_1.SHA384_IV[1] | 0;\n        this.Bh = _md_ts_1.SHA384_IV[2] | 0;\n        this.Bl = _md_ts_1.SHA384_IV[3] | 0;\n        this.Ch = _md_ts_1.SHA384_IV[4] | 0;\n        this.Cl = _md_ts_1.SHA384_IV[5] | 0;\n        this.Dh = _md_ts_1.SHA384_IV[6] | 0;\n        this.Dl = _md_ts_1.SHA384_IV[7] | 0;\n        this.Eh = _md_ts_1.SHA384_IV[8] | 0;\n        this.El = _md_ts_1.SHA384_IV[9] | 0;\n        this.Fh = _md_ts_1.SHA384_IV[10] | 0;\n        this.Fl = _md_ts_1.SHA384_IV[11] | 0;\n        this.Gh = _md_ts_1.SHA384_IV[12] | 0;\n        this.Gl = _md_ts_1.SHA384_IV[13] | 0;\n        this.Hh = _md_ts_1.SHA384_IV[14] | 0;\n        this.Hl = _md_ts_1.SHA384_IV[15] | 0;\n    }\n}\nexports.SHA384 = SHA384;\n/**\n * Truncated SHA512/256 and SHA512/224.\n * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as \"intermediary\" IV of SHA512/t.\n * Then t hashes string to produce result IV.\n * See `test/misc/sha2-gen-iv.js`.\n */\n/** SHA512/224 IV */\nconst T224_IV = /* @__PURE__ */ Uint32Array.from([\n    0x8c3d37c8, 0x19544da2, 0x73e19966, 0x89dcd4d6, 0x1dfab7ae, 0x32ff9c82, 0x679dd514, 0x582f9fcf,\n    0x0f6d2b69, 0x7bd44da8, 0x77e36f73, 0x04c48942, 0x3f9d85a8, 0x6a1d36c8, 0x1112e6ad, 0x91d692a1,\n]);\n/** SHA512/256 IV */\nconst T256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x22312194, 0xfc2bf72c, 0x9f555fa3, 0xc84c64c2, 0x2393b86b, 0x6f53b151, 0x96387719, 0x5940eabd,\n    0x96283ee2, 0xa88effe3, 0xbe5e1e25, 0x53863992, 0x2b0199fc, 0x2c85b8aa, 0x0eb72ddc, 0x81c52ca2,\n]);\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super(28);\n        this.Ah = T224_IV[0] | 0;\n        this.Al = T224_IV[1] | 0;\n        this.Bh = T224_IV[2] | 0;\n        this.Bl = T224_IV[3] | 0;\n        this.Ch = T224_IV[4] | 0;\n        this.Cl = T224_IV[5] | 0;\n        this.Dh = T224_IV[6] | 0;\n        this.Dl = T224_IV[7] | 0;\n        this.Eh = T224_IV[8] | 0;\n        this.El = T224_IV[9] | 0;\n        this.Fh = T224_IV[10] | 0;\n        this.Fl = T224_IV[11] | 0;\n        this.Gh = T224_IV[12] | 0;\n        this.Gl = T224_IV[13] | 0;\n        this.Hh = T224_IV[14] | 0;\n        this.Hl = T224_IV[15] | 0;\n    }\n}\nexports.SHA512_224 = SHA512_224;\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super(32);\n        this.Ah = T256_IV[0] | 0;\n        this.Al = T256_IV[1] | 0;\n        this.Bh = T256_IV[2] | 0;\n        this.Bl = T256_IV[3] | 0;\n        this.Ch = T256_IV[4] | 0;\n        this.Cl = T256_IV[5] | 0;\n        this.Dh = T256_IV[6] | 0;\n        this.Dl = T256_IV[7] | 0;\n        this.Eh = T256_IV[8] | 0;\n        this.El = T256_IV[9] | 0;\n        this.Fh = T256_IV[10] | 0;\n        this.Fl = T256_IV[11] | 0;\n        this.Gh = T256_IV[12] | 0;\n        this.Gl = T256_IV[13] | 0;\n        this.Hh = T256_IV[14] | 0;\n        this.Hl = T256_IV[15] | 0;\n    }\n}\nexports.SHA512_256 = SHA512_256;\n/**\n * SHA2-256 hash function from RFC 4634.\n *\n * It is the fastest JS hash, even faster than Blake3.\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n */\nexports.sha256 = (0, utils_ts_1.createHasher)(() => new SHA256());\n/** SHA2-224 hash function from RFC 4634 */\nexports.sha224 = (0, utils_ts_1.createHasher)(() => new SHA224());\n/** SHA2-512 hash function from RFC 4634. */\nexports.sha512 = (0, utils_ts_1.createHasher)(() => new SHA512());\n/** SHA2-384 hash function from RFC 4634. */\nexports.sha384 = (0, utils_ts_1.createHasher)(() => new SHA384());\n/**\n * SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexports.sha512_256 = (0, utils_ts_1.createHasher)(() => new SHA512_256());\n/**\n * SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexports.sha512_224 = (0, utils_ts_1.createHasher)(() => new SHA512_224());\n//# sourceMappingURL=sha2.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha224 = exports.SHA224 = exports.sha256 = exports.SHA256 = void 0;\n/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n * @deprecated\n */\nconst sha2_ts_1 = require(\"./sha2.js\");\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexports.SHA256 = sha2_ts_1.SHA256;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexports.sha256 = sha2_ts_1.sha256;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexports.SHA224 = sha2_ts_1.SHA224;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexports.sha224 = sha2_ts_1.sha224;\n//# sourceMappingURL=sha256.js.map"],"names":["Object","defineProperty","exports","value","SHA512_IV","SHA384_IV","SHA224_IV","SHA256_IV","HashMD","setBigUint64","Chi","a","b","c","Maj","utils_ts_1","view","byteOffset","isLE","_32n","BigInt","_u32_max","wh","Number","wl","h","l","setUint32","Hash","constructor","blockLen","outputLen","padOffset","super","this","finished","length","pos","destroyed","buffer","Uint8Array","createView","update","data","aexists","toBytes","abytes","len","take","Math","min","set","subarray","process","dataView","roundClean","digestInto","out","aoutput","clean","i","oview","Error","outLen","state","get","digest","res","slice","destroy","_cloneInto","to","clone","Uint32Array","from","hmac","HMAC","hash","_key","ahash","key","iHash","create","pad","oHash","buf","getPrototypeOf","message","ripemd160","RIPEMD160","md5","MD5","sha1","SHA1","_md_ts_1","SHA1_IV","SHA1_W","A","B","C","D","E","offset","getUint32","rotl","F","K","T","createHasher","p32","pow","Array","_","floor","abs","sin","MD5_IV","MD5_W","g","s","Rho160","Id160","fill","map","Pi160","idxLR","j","push","k","idxL","idxR","shifts160","shiftsL160","idx","shiftsR160","Kl160","Kr160","ripemd_f","group","x","y","z","BUF_160","h0","h1","h2","h3","h4","al","ar","bl","br","cl","cr","dl","dr","el","er","rGroup","hbl","hbr","rl","rr","sl","sr","tl","tr","legacy_ts_1","sha512_224","sha512_256","sha384","sha512","sha224","sha256","SHA512_256","SHA512_224","SHA384","SHA512","SHA224","SHA256","u64","SHA256_K","SHA256_W","G","H","W15","W2","s0","rotr","s1","T1","T2","K512","split","n","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","Ah","Al","Bh","Bl","Ch","Cl","Dh","Dl","Eh","El","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","rotrSH","shrSH","s0l","rotrSL","shrSL","W2h","W2l","s1h","rotrBH","s1l","rotrBL","SUMl","add4L","SUMh","add4H","sigma1h","sigma1l","CHIh","CHIl","T1ll","add5L","T1h","add5H","T1l","sigma0h","sigma0l","MAJh","MAJl","add","All","add3L","add3H","T224_IV","T256_IV","sha2_ts_1"],"sourceRoot":""}