{"version":3,"file":"static/chunks/7777.9be0f8edacb8addd.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@safe-global/safe-apps-provider/dist/index.js","webpack://_N_E/./node_modules/@safe-global/safe-apps-provider/dist/provider.js","webpack://_N_E/./node_modules/@safe-global/safe-apps-provider/dist/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SafeAppProvider = void 0;\nvar provider_1 = require(\"./provider\");\nObject.defineProperty(exports, \"SafeAppProvider\", { enumerable: true, get: function () { return provider_1.SafeAppProvider; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SafeAppProvider = void 0;\nconst safe_apps_sdk_1 = require(\"@safe-global/safe-apps-sdk\");\nconst events_1 = require(\"events\");\nconst utils_1 = require(\"./utils\");\n// The API is based on Ethereum JavaScript API Provider Standard. Link: https://eips.ethereum.org/EIPS/eip-1193\nclass SafeAppProvider extends events_1.EventEmitter {\n    constructor(safe, sdk) {\n        super();\n        this.submittedTxs = new Map();\n        this.safe = safe;\n        this.sdk = sdk;\n    }\n    async connect() {\n        this.emit('connect', { chainId: this.chainId });\n        return;\n    }\n    async disconnect() {\n        return;\n    }\n    get chainId() {\n        return this.safe.chainId;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(request) {\n        const { method, params = [] } = request;\n        switch (method) {\n            case 'eth_accounts':\n                return [this.safe.safeAddress];\n            case 'net_version':\n            case 'eth_chainId':\n                return (0, utils_1.numberToHex)(this.chainId);\n            case 'personal_sign': {\n                const [message, address] = params;\n                if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n                    throw new Error('The address or message hash is invalid');\n                }\n                const response = await this.sdk.txs.signMessage(message);\n                const signature = 'signature' in response ? response.signature : undefined;\n                return signature || '0x';\n            }\n            case 'eth_sign': {\n                const [address, messageHash] = params;\n                if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase() || !messageHash.startsWith('0x')) {\n                    throw new Error('The address or message hash is invalid');\n                }\n                const response = await this.sdk.txs.signMessage(messageHash);\n                const signature = 'signature' in response ? response.signature : undefined;\n                return signature || '0x';\n            }\n            case 'eth_signTypedData':\n            case 'eth_signTypedData_v4': {\n                const [address, typedData] = params;\n                const parsedTypedData = typeof typedData === 'string' ? JSON.parse(typedData) : typedData;\n                if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n                    throw new Error('The address is invalid');\n                }\n                const response = await this.sdk.txs.signTypedMessage(parsedTypedData);\n                const signature = 'signature' in response ? response.signature : undefined;\n                return signature || '0x';\n            }\n            case 'eth_sendTransaction':\n                // `value` or `data` can be explicitly set as `undefined` for example in Viem. The spread will overwrite the fallback value.\n                const tx = {\n                    ...params[0],\n                    value: params[0].value || '0',\n                    data: params[0].data || '0x',\n                };\n                // Some ethereum libraries might pass the gas as a hex-encoded string\n                // We need to convert it to a number because the SDK expects a number and our backend only supports\n                // Decimal numbers\n                if (typeof tx.gas === 'string' && tx.gas.startsWith('0x')) {\n                    tx.gas = parseInt(tx.gas, 16);\n                }\n                const resp = await this.sdk.txs.send({\n                    txs: [tx],\n                    params: { safeTxGas: tx.gas },\n                });\n                // Store fake transaction\n                this.submittedTxs.set(resp.safeTxHash, {\n                    from: this.safe.safeAddress,\n                    hash: resp.safeTxHash,\n                    gas: 0,\n                    gasPrice: '0x00',\n                    nonce: 0,\n                    input: tx.data,\n                    value: tx.value,\n                    to: tx.to,\n                    blockHash: null,\n                    blockNumber: null,\n                    transactionIndex: null,\n                });\n                return resp.safeTxHash;\n            case 'eth_blockNumber':\n                const block = await this.sdk.eth.getBlockByNumber(['latest']);\n                return block.number;\n            case 'eth_getBalance':\n                return this.sdk.eth.getBalance([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n            case 'eth_getCode':\n                return this.sdk.eth.getCode([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n            case 'eth_getTransactionCount':\n                return this.sdk.eth.getTransactionCount([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n            case 'eth_getStorageAt':\n                return this.sdk.eth.getStorageAt([(0, utils_1.getLowerCase)(params[0]), params[1], params[2]]);\n            case 'eth_getBlockByNumber':\n                return this.sdk.eth.getBlockByNumber([params[0], params[1]]);\n            case 'eth_getBlockByHash':\n                return this.sdk.eth.getBlockByHash([params[0], params[1]]);\n            case 'eth_getTransactionByHash':\n                let txHash = params[0];\n                try {\n                    const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n                    txHash = resp.txHash || txHash;\n                }\n                catch (e) { }\n                // Use fake transaction if we don't have a real tx hash\n                if (this.submittedTxs.has(txHash)) {\n                    return this.submittedTxs.get(txHash);\n                }\n                return this.sdk.eth.getTransactionByHash([txHash]).then((tx) => {\n                    // We set the tx hash to the one requested, as some provider assert this\n                    if (tx) {\n                        tx.hash = params[0];\n                    }\n                    return tx;\n                });\n            case 'eth_getTransactionReceipt': {\n                let txHash = params[0];\n                try {\n                    const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n                    txHash = resp.txHash || txHash;\n                }\n                catch (e) { }\n                return this.sdk.eth.getTransactionReceipt([txHash]).then((tx) => {\n                    // We set the tx hash to the one requested, as some provider assert this\n                    if (tx) {\n                        tx.transactionHash = params[0];\n                    }\n                    return tx;\n                });\n            }\n            case 'eth_estimateGas': {\n                return this.sdk.eth.getEstimateGas(params[0]);\n            }\n            case 'eth_call': {\n                return this.sdk.eth.call([params[0], params[1]]);\n            }\n            case 'eth_getLogs':\n                return this.sdk.eth.getPastLogs([params[0]]);\n            case 'eth_gasPrice':\n                return this.sdk.eth.getGasPrice();\n            case 'wallet_getPermissions':\n                return this.sdk.wallet.getPermissions();\n            case 'wallet_requestPermissions':\n                return this.sdk.wallet.requestPermissions(params[0]);\n            case 'safe_setSettings':\n                return this.sdk.eth.setSafeSettings([params[0]]);\n            case 'wallet_sendCalls': {\n                const { from, calls, chainId } = params[0];\n                if (chainId !== (0, utils_1.numberToHex)(this.chainId)) {\n                    throw new Error(`Safe is not on chain ${chainId}`);\n                }\n                if (from !== this.safe.safeAddress) {\n                    throw Error('Invalid from address');\n                }\n                const txs = calls.map((call, i) => {\n                    if (!call.to) {\n                        throw new Error(`Invalid call #${i}: missing \"to\" field`);\n                    }\n                    return {\n                        to: call.to,\n                        data: call.data ?? '0x',\n                        value: call.value ?? (0, utils_1.numberToHex)(0),\n                    };\n                });\n                const { safeTxHash } = await this.sdk.txs.send({ txs });\n                const result = {\n                    id: safeTxHash,\n                };\n                return result;\n            }\n            case 'wallet_getCallsStatus': {\n                const safeTxHash = params[0];\n                const CallStatus = {\n                    [safe_apps_sdk_1.TransactionStatus.AWAITING_CONFIRMATIONS]: 100,\n                    [safe_apps_sdk_1.TransactionStatus.AWAITING_EXECUTION]: 100,\n                    [safe_apps_sdk_1.TransactionStatus.SUCCESS]: 200,\n                    [safe_apps_sdk_1.TransactionStatus.CANCELLED]: 400,\n                    [safe_apps_sdk_1.TransactionStatus.FAILED]: 500,\n                };\n                const tx = await this.sdk.txs.getBySafeTxHash(safeTxHash);\n                const result = {\n                    version: '1.0',\n                    id: safeTxHash,\n                    chainId: (0, utils_1.numberToHex)(this.chainId),\n                    status: CallStatus[tx.txStatus],\n                };\n                // Transaction is queued\n                if (!tx.txHash) {\n                    return result;\n                }\n                // If transaction is executing, receipt is null\n                const receipt = await this.sdk.eth.getTransactionReceipt([tx.txHash]);\n                if (!receipt) {\n                    return result;\n                }\n                const calls = tx.txData?.dataDecoded?.method !== 'multiSend'\n                    ? 1\n                    : // Number of batched transactions\n                        tx.txData.dataDecoded.parameters?.[0].valueDecoded?.length ?? 1;\n                // Typed as number; is hex\n                const blockNumber = Number(receipt.blockNumber);\n                const gasUsed = Number(receipt.gasUsed);\n                result.receipts = Array(calls).fill({\n                    logs: receipt.logs,\n                    status: (0, utils_1.numberToHex)(tx.txStatus === safe_apps_sdk_1.TransactionStatus.SUCCESS ? 1 : 0),\n                    blockHash: receipt.blockHash,\n                    blockNumber: (0, utils_1.numberToHex)(blockNumber),\n                    gasUsed: (0, utils_1.numberToHex)(gasUsed),\n                    transactionHash: tx.txHash,\n                });\n                return result;\n            }\n            case 'wallet_showCallsStatus': {\n                // Cannot open transaction details page via SDK\n                throw new Error(`\"${request.method}\" not supported`);\n            }\n            case 'wallet_getCapabilities': {\n                return {\n                    [(0, utils_1.numberToHex)(this.chainId)]: {\n                        atomicBatch: {\n                            supported: true,\n                        },\n                    },\n                };\n            }\n            default:\n                throw Error(`\"${request.method}\" not implemented`);\n        }\n    }\n    // this method is needed for ethers v4\n    // https://github.com/ethers-io/ethers.js/blob/427e16826eb15d52d25c4f01027f8db22b74b76c/src.ts/providers/web3-provider.ts#L41-L55\n    send(request, callback) {\n        if (!request)\n            callback('Undefined request');\n        this.request(request)\n            .then((result) => callback(null, { jsonrpc: '2.0', id: request.id, result }))\n            .catch((error) => callback(error, null));\n    }\n}\nexports.SafeAppProvider = SafeAppProvider;\n//# sourceMappingURL=provider.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.numberToHex = exports.getLowerCase = void 0;\nfunction getLowerCase(value) {\n    if (value) {\n        return value.toLowerCase();\n    }\n    return value;\n}\nexports.getLowerCase = getLowerCase;\nfunction numberToHex(value) {\n    return `0x${value.toString(16)}`;\n}\nexports.numberToHex = numberToHex;\n//# sourceMappingURL=utils.js.map"],"names":["Object","defineProperty","exports","value","SafeAppProvider","provider_1","enumerable","get","safe_apps_sdk_1","events_1","utils_1","EventEmitter","constructor","safe","sdk","super","this","submittedTxs","Map","connect","emit","chainId","disconnect","request","method","params","safeAddress","numberToHex","message","address","toLowerCase","Error","response","txs","signMessage","signature","undefined","messageHash","startsWith","typedData","parsedTypedData","JSON","parse","signTypedMessage","tx","data","gas","parseInt","resp","send","safeTxGas","set","safeTxHash","from","hash","gasPrice","nonce","input","to","blockHash","blockNumber","transactionIndex","eth","getBlockByNumber","number","getBalance","getLowerCase","getCode","getTransactionCount","getStorageAt","getBlockByHash","txHash","getBySafeTxHash","e","has","getTransactionByHash","then","getTransactionReceipt","transactionHash","getEstimateGas","call","getPastLogs","getGasPrice","wallet","getPermissions","requestPermissions","setSafeSettings","calls","map","i","id","CallStatus","TransactionStatus","AWAITING_CONFIRMATIONS","AWAITING_EXECUTION","SUCCESS","CANCELLED","FAILED","result","version","status","txStatus","receipt","txData","dataDecoded","parameters","valueDecoded","length","Number","gasUsed","receipts","Array","fill","logs","atomicBatch","supported","callback","jsonrpc","catch","error","toString"],"sourceRoot":""}