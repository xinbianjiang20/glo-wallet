{"version":3,"file":"static/chunks/89698df2.84e62a0e75523406.js","mappings":"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","sources":["webpack://_N_E/../src/utils/ed25519.ts","webpack://_N_E/../src/utils/to-buffer.ts","webpack://_N_E/../src/utils/borsh-schema.ts","webpack://_N_E/../src/publickey.ts","webpack://_N_E/../src/bpf-loader-deprecated.ts","webpack://_N_E/../src/transaction/constants.ts","webpack://_N_E/../src/transaction/expiry-custom-errors.ts","webpack://_N_E/../src/message/account-keys.ts","webpack://_N_E/../src/layout.ts","webpack://_N_E/../src/utils/shortvec-encoding.ts","webpack://_N_E/../src/utils/assert.ts","webpack://_N_E/../src/message/compiled-keys.ts","webpack://_N_E/../src/utils/guarded-array-utils.ts","webpack://_N_E/../src/message/legacy.ts","webpack://_N_E/../src/message/v0.ts","webpack://_N_E/../src/message/versioned.ts","webpack://_N_E/../src/transaction/legacy.ts","webpack://_N_E/../src/transaction/versioned.ts","webpack://_N_E/../src/timing.ts","webpack://_N_E/../src/sysvar.ts","webpack://_N_E/../src/errors.ts","webpack://_N_E/../src/utils/send-and-confirm-transaction.ts","webpack://_N_E/../src/utils/sleep.ts","webpack://_N_E/../src/instruction.ts","webpack://_N_E/../src/fee-calculator.ts","webpack://_N_E/../src/nonce-account.ts","webpack://_N_E/../src/utils/bigint.ts","webpack://_N_E/../src/programs/system.ts","webpack://_N_E/../src/loader.ts","webpack://_N_E/../src/bpf-loader.ts","webpack://_N_E/../node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","webpack://_N_E/../src/epoch-schedule.ts","webpack://_N_E/../src/__forks__/browser/fetch-impl.ts","webpack://_N_E/../src/rpc-websocket.ts","webpack://_N_E/../src/programs/address-lookup-table/state.ts","webpack://_N_E/../src/account-data.ts","webpack://_N_E/../src/utils/makeWebsocketUrl.ts","webpack://_N_E/../src/connection.ts","webpack://_N_E/../src/keypair.ts","webpack://_N_E/../src/programs/address-lookup-table/index.ts","webpack://_N_E/../src/programs/compute-budget.ts","webpack://_N_E/../src/programs/ed25519.ts","webpack://_N_E/../src/utils/secp256k1.ts","webpack://_N_E/../src/programs/secp256k1.ts","webpack://_N_E/../src/programs/stake.ts","webpack://_N_E/../src/programs/vote.ts","webpack://_N_E/../src/validator-info.ts","webpack://_N_E/../src/vote-account.ts"],"sourcesContent":["import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","const END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nexport function guardedShift<T>(byteArray: T[]): T {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift() as T;\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nexport function guardedSplice<T>(\n  byteArray: T[],\n  ...args:\n    | [start: number, deleteCount?: number]\n    | [start: number, deleteCount: number, ...items: T[]]\n): T[] {\n  const [start] = args;\n  if (\n    args.length === 2 // Implies that `deleteCount` was supplied\n      ? start + (args[1] ?? 0) > byteArray.length\n      : start >= byteArray.length\n  ) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(\n    ...(args as Parameters<typeof Array.prototype.splice>),\n  );\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray),\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(\n      guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n    );\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(\n        byteArray,\n        0,\n        accountKeyIndexesLength,\n      );\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = guardedSplice(\n        byteArray,\n        0,\n        writableIndexesLength,\n      );\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(\n        byteArray,\n        0,\n        readonlyIndexesLength,\n      );\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\n/** @internal */\ntype MessageSignednessErrors = {\n  invalid?: PublicKey[];\n  missing?: PublicKey[];\n};\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures: boolean = true): boolean {\n    const signatureErrors = this._getMessageSignednessErrors(\n      this.serializeMessage(),\n      requireAllSignatures,\n    );\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(\n    message: Uint8Array,\n    requireAllSignatures: boolean,\n  ): MessageSignednessErrors | undefined {\n    const errors: MessageSignednessErrors = {};\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(\n        signData,\n        requireAllSignatures,\n      );\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${\n            sigErrors.invalid.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${\n            sigErrors.missing.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from './connection';\nimport {TransactionSignature} from './transaction';\n\nexport class SendTransactionError extends Error {\n  private signature: TransactionSignature;\n  private transactionMessage: string;\n  private transactionLogs: string[] | Promise<string[]> | undefined;\n\n  constructor({\n    action,\n    signature,\n    transactionMessage,\n    logs,\n  }: {\n    action: 'send' | 'simulate';\n    signature: TransactionSignature;\n    transactionMessage: string;\n    logs?: string[];\n  }) {\n    const maybeLogsOutput = logs\n      ? `Logs: \\n${JSON.stringify(logs.slice(-10), null, 2)}. `\n      : '';\n    const guideText =\n      '\\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.';\n    let message: string;\n    switch (action) {\n      case 'send':\n        message =\n          `Transaction ${signature} resulted in an error. \\n` +\n          `${transactionMessage}. ` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      case 'simulate':\n        message =\n          `Simulation failed. \\nMessage: ${transactionMessage}. \\n` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      default: {\n        message = `Unknown action '${((a: never) => a)(action)}'`;\n      }\n    }\n    super(message);\n\n    this.signature = signature;\n    this.transactionMessage = transactionMessage;\n    this.transactionLogs = logs ? logs : undefined;\n  }\n\n  get transactionError(): {message: string; logs?: string[]} {\n    return {\n      message: this.transactionMessage,\n      logs: Array.isArray(this.transactionLogs)\n        ? this.transactionLogs\n        : undefined,\n    };\n  }\n\n  /* @deprecated Use `await getLogs()` instead */\n  get logs(): string[] | undefined {\n    const cachedLogs = this.transactionLogs;\n    if (\n      cachedLogs != null &&\n      typeof cachedLogs === 'object' &&\n      'then' in cachedLogs\n    ) {\n      return undefined;\n    }\n    return cachedLogs;\n  }\n\n  async getLogs(connection: Connection): Promise<string[]> {\n    if (!Array.isArray(this.transactionLogs)) {\n      this.transactionLogs = new Promise((resolve, reject) => {\n        connection\n          .getTransaction(this.signature)\n          .then(tx => {\n            if (tx && tx.meta && tx.meta.logMessages) {\n              const logs = tx.meta.logMessages;\n              this.transactionLogs = logs;\n              resolve(logs);\n            } else {\n              reject(new Error('Log messages not found'));\n            }\n          })\n          .catch(reject);\n      });\n    }\n    return await this.transactionLogs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\nimport {SendTransactionError} from '../errors';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: 'send',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`,\n      });\n    }\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (!params.basePubkey.equals(params.fromPubkey)) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export const Headers: typeof globalThis.Headers = globalThis.Headers;\nexport const Request: typeof globalThis.Request = globalThis.Request;\nexport const Response: typeof globalThis.Response = globalThis.Response;\nexport default globalThis.fetch;\n","import {\n  CommonClient,\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n  WebSocket as createRpc,\n} from 'rpc-websockets';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends CommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket as ReturnType<typeof createRpc>;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<CommonClient['call']>\n  ): ReturnType<CommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<CommonClient['notify']>\n  ): ReturnType<CommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to agave-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction applyDefaultMemcmpEncodingToFilters(\n  filters: GetProgramAccountsFilter[],\n): GetProgramAccountsFilter[] {\n  return filters.map(filter =>\n    'memcmp' in filter\n      ? {\n          ...filter,\n          memcmp: {\n            ...filter.memcmp,\n            encoding: filter.memcmp.encoding ?? 'base58',\n          },\n        }\n      : filter,\n  );\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of base58-encoded account addresses to return post simulation state for */\n  accounts?: {\n    /** The encoding of the returned account's data */\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n  /** Optional parameter used to include inner instructions in the simulation */\n  innerInstructions?: boolean;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n  innerInstructions?: ParsedInnerInstruction[] | null;\n};\nconst ParsedInstructionStruct = pick({\n  program: string(),\n  programId: PublicKeyFromString,\n  parsed: unknown(),\n});\n\nconst PartiallyDecodedInstructionStruct = pick({\n  programId: PublicKeyFromString,\n  accounts: array(PublicKeyFromString),\n  data: string(),\n});\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n    innerInstructions: optional(\n      nullable(\n        array(\n          pick({\n            index: number(),\n            instructions: array(\n              union([\n                ParsedInstructionStruct,\n                PartiallyDecodedInstructionStruct,\n              ]),\n            ),\n          }),\n        ),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: nullable(ConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n  } & (\n    | {\n        encoding?: 'base58'; // Base-58 is the default when not supplied.\n        /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n        bytes: string;\n      }\n    | {\n        encoding: 'base64';\n        /** data to match, as base-64 encoded string */\n        bytes: string;\n      }\n  );\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\nexport type AccountSubscriptionConfig = Readonly<{\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /**\n   * Encoding format for Account data\n   *   - `base58` is slow.\n   *   - `jsonParsed` encoding attempts to use program-specific state parsers to return more\n   *      human-readable and explicit account state data\n   *   - If `jsonParsed` is requested but a parser cannot be found, the field falls back to `base64`\n   *     encoding, detectable when the `data` field is type `string`.\n   */\n  encoding?: 'base58' | 'base64' | 'base64+zstd' | 'jsonParsed';\n}>;\n\nexport type ProgramAccountSubscriptionConfig = Readonly<{\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /**\n   * Encoding format for Account data\n   *   - `base58` is slow.\n   *   - `jsonParsed` encoding attempts to use program-specific state parsers to return more\n   *      human-readable and explicit account state data\n   *   - If `jsonParsed` is requested but a parser cannot be found, the field falls back to `base64`\n   *     encoding, detectable when the `data` field is type `string`.\n   */\n  encoding?: 'base58' | 'base64' | 'base64+zstd' | 'jsonParsed';\n  /**\n   * Filter results using various filter objects\n   * The resultant account must meet ALL filter criteria to be included in the returned results\n   */\n  filters?: GetProgramAccountsFilter[];\n}>;\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   *\n   * @deprecated Deprecated since RPC v1.18; will be removed in a future version.\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      {\n        ...configWithoutEncoding,\n        ...(configWithoutEncoding.filters\n          ? {\n              filters: applyDefaultMemcmpEncodingToFilters(\n                configWithoutEncoding.filters,\n              ),\n            }\n          : null),\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since RPC v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since RPC v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since RPC v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getSignaturesForAddress} instead.\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      if (\n        configOrSigners &&\n        typeof configOrSigners === 'object' &&\n        'innerInstructions' in configOrSigners\n      ) {\n        config.innerInstructions = configOrSigners.innerInstructions;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    if (\n      configOrSigners &&\n      typeof configOrSigners === 'object' &&\n      'innerInstructions' in configOrSigners\n    ) {\n      config.innerInstructions = configOrSigners.innerInstructions;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError({\n        action: 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      skipPreflight === true\n        ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n        : (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs = undefined;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n\n      throw new SendTransactionError({\n        action: skipPreflight ? 'send' : 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    config?: AccountSubscriptionConfig,\n  ): ClientSubscriptionId;\n  /** @deprecated Instead, pass in an {@link AccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId;\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitmentOrConfig?: Commitment | AccountSubscriptionConfig,\n  ): ClientSubscriptionId {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n      config,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    config?: ProgramAccountSubscriptionConfig,\n  ): ClientSubscriptionId;\n  /** @deprecated Instead, pass in a {@link ProgramAccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId;\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitmentOrConfig?: Commitment | ProgramAccountSubscriptionConfig,\n    maybeFilters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      config\n        ? config\n        : maybeFilters\n          ? {filters: applyDefaultMemcmpEncodingToFilters(maybeFilters)}\n          : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeStateV2::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(\n    params: SplitStakeParams,\n    // Compute the cost of allocating the new stake account in lamports\n    rentExemptReserve: number,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: rentExemptReserve,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(\n    params: SplitStakeWithSeedParams,\n    // If this stake account is new, compute the cost of allocating it in lamports\n    rentExemptReserve?: number,\n  ): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(\n        SystemProgram.transfer({\n          fromPubkey: params.authorizedPubkey,\n          toPubkey: splitStakePubkey,\n          lamports: rentExemptReserve,\n        }),\n      );\n    }\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\nexport type UpdateValidatorIdentityParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  nodePubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'InitializeAccount'\n  | 'Withdraw'\n  | 'UpdateValidatorIdentity';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n  UpdateValidatorIdentity: IInstructionInputData;\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct<\n      VoteInstructionInputData['UpdateValidatorIdentity']\n    >([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = 3762;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insufficient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(\n    params: UpdateValidatorIdentityParams,\n  ): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, nodePubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\nimport {guardedShift, guardedSplice} from './utils/guarded-array-utils';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, validator logo URL */\n  iconUrl?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  iconUrl: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n"],"names":["ed25519","utils","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","isOnCurve","ExtendedPoint","fromHex","sign","message","slice","verify","toBuffer","arr","Buffer","isBuffer","from","buffer","byteOffset","byteLength","Struct","encode","serialize","SOLANA_SCHEMA","this","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","constructor","properties","Object","assign","Map","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","PublicKey","unique","key","equals","_bn","eq","toBase58","bs58","toBytes","toJSON","buf","b","toArrayLike","length","zeroPad","alloc","copy","Symbol","toStringTag","toString","createWithSeed","fromPublicKey","seed","programId","concat","publicKeyBytes","sha256","createProgramAddressSync","seeds","forEach","TypeError","Error","createProgramAddress","findProgramAddressSync","address","nonce","seedsWithNonce","err","findProgramAddress","pubkeyData","value","super","undefined","isPublicKeyData","decoded","BN","_PublicKey","default","kind","fields","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","keySegments","staticAccountKeys","accountKeysFromLookups","push","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","map","instruction","programIdIndex","accountKeyIndexes","keys","meta","pubkey","property","BufferLayout","rustString","rsl","_decode","bind","_encode","rslShim","offset","str","chars","span","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","assert","condition","CompiledKeys","compile","payer","keyMetaMap","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","entries","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","END_OF_BUFFER_ERROR_MESSAGE","guardedShift","byteArray","guardedSplice","args","start","splice","Message","version","accountKeys","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","recentBlockhash","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","indexToProgramIds","has","programIds","values","nonProgramIds","_","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","Layout","transaction","signData","accountCount","i","account","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","reduce","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","maskedPrefix","addressTableLookupsCount","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","nonceInfo","nonceInstruction","signers","add","items","compileMessage","_message","JSON","stringify","_json","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","localeCompare","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","invariant","_compile","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_getMessageSignednessErrors","errors","missing","invalid","config","sigErrors","errorMessage","p","join","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","lastValidBlockHeight","minNonceContextSlot","hasOwnProperty","call","minContextSlot","blockhash","VersionedTransaction","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","defaultSignatures","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SendTransactionError","transactionError","transactionMessage","logs","transactionLogs","cachedLogs","getLogs","Promise","resolve","reject","getTransaction","then","tx","logMessages","catch","action","maybeLogsOutput","guideText","SolanaJSONRPCError","code","customMessage","name","async","sendAndConfirmTransaction","options","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","fromAccountData","nonceAccount","authorizedPubkey","feeCalculator","u64","blob","encodeDecode","bigIntLayout","src","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","freeze","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","createAccount","params","lamports","space","fromPubkey","newAccountPubkey","transfer","BigInt","basePubkey","toPubkey","base","accountPubkey","createAccountWithSeed","createNonceAccount","noncePubkey","initParams","nonceInitialize","authorized","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","newAuthorizedPubkey","allocate","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","context","getSlot","slot","round","MS_PER_SLOT","objToString","objKeys","obj","val","isArrayProp","max","propVal","toStr","isFinite","returnVal","trailingZeros","n","EpochSchedule","getEpoch","getEpochAndSlotIndex","firstNormalSlot","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","floor","slotsPerEpoch","firstNormalEpoch","getFirstSlotInEpoch","pow","getLastSlotInEpoch","leaderScheduleSlotOffset","warmup","fetchImpl","globalThis","fetch","RpcWebSocketClient","CommonClient","readyState","underlyingSocket","notify","generate_request_id","url","rpc","createRpc","autoconnect","max_reconnects","reconnect","reconnect_interval","socket","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","applyDefaultMemcmpEncodingToFilters","filters","memcmp","encoding","createRpcResult","result","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","number","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","validator","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","ParsedInstructionStruct","parsed","PartiallyDecodedInstructionStruct","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","innerInstructions","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","preBalances","postBalances","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","_commitment","rpcEndpoint","getBalanceAndContext","_buildArgs","unsafeRes","_rpcRequest","res","getBalance","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","configWithoutEncoding","baseSchema","withContext","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","aborted","reason","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","abortConfirmation","removeSignatureListener","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","expiryPromise","checkBlockHeight","getBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","timeoutId","timeoutMs","_confirmTransactionInitialTimeout","TIMED_OUT","clearTimeout","getClusterNodes","getVoteAccounts","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentPrioritizationFees","lockedWritableAccounts","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","isBlockhashValid","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","getParsedBlock","getBlockProduction","extra","c","rest","getParsedTransaction","getParsedTransactions","batch","methodName","_rpcBatchRequest","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","getConfirmedSignaturesForAddress2","info","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","_pollingBlockhash","expired","Date","now","_blockhashInfo","lastFetch","latestBlockhash","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","transactionSignatures","simulatedSignatures","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","_disableBlockhashCaching","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","_wsOnOpen","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","setInterval","_rpcWebSocket","_updateSubscriptions","_wsOnError","_wsOnClose","_rpcWebSocketGeneration","Number","MAX_SAFE_INTEGER","_rpcWebSocketIdleTimeout","clearInterval","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","hash","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","_subscriptionStateChangeCallbacksByHash","cb","clientSubscriptionId","callback","_subscriptionHashByClientSubscriptionId","close","log","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","method","unsubscribeMethod","_subscriptionsAutoDisposedByRpc","_handleServerNotification","callbackArgs","_wsOnAccountNotification","notification","_makeSubscription","subscriptionConfig","_nextClientSubscriptionId","fastStableStringify","existingSubscription","_subscriptionDisposeFunctionsByClientSubscriptionId","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","_wsOnProgramAccountNotification","accountId","onProgramAccountChange","maybeFilters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","_wsOnLogsNotification","_wsOnSlotNotification","onSlotChange","removeSlotChangeListener","_wsOnSlotUpdatesNotification","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_wsOnSignatureNotification","_err","onSignatureWithOptions","_wsOnRootNotification","onRootChange","removeRootChangeListener","endpoint","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","httpAgent","client","_rpcWsEndpoint","_rpcClient","requestPromises","requestHash","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","protocol","startsWith","startPort","parseInt","websocketPort","makeWebsocketUrl","customFetch","fetchWithMiddleware","init","modifiedFetchArgs","modifiedInfo","modifiedInit","RpcClient","request","body","agent","headers","too_many_requests_retries","waitTime","statusText","text","ok","createRpcClient","requests","createRpcBatchRequest","Infinity","on","Keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","_keypair","keypair","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","recentSlot","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","secp256k1","isValidPrivateKey","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","ecdsaSign","msgHash","privKey","toCompactRawBytes","recovery","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","_Lockup","STAKE_INSTRUCTION_LAYOUTS","Initialize","lockup","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","initialize","stakePubkey","maybeLockup","staker","withdrawer","delegate","authorize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorizeWithSeed","authorityBase","authoritySeed","authorityOwner","splitInstruction","splitStakePubkey","split","rentExemptReserve","splitWithSeed","merge","sourceStakePubKey","withdraw","deactivate","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteInit","UpdateValidatorIdentity","voteAuthorizeWithSeedArgs","Voter","VoteProgram","initializeAccount","authorizedVoter","authorizedWithdrawer","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","authorizedWithdrawerPubkey","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","updateValidatorIdentity","website","details","iconUrl","keybaseUsername"],"sourceRoot":""}