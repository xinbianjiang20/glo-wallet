{"version":3,"file":"static/chunks/4527-654191aa9076bb82.js","mappings":"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","sources":["webpack://_N_E/./components/Holdings.tsx","webpack://_N_E/./components/Modals/BuyGloModal.tsx","webpack://_N_E/./components/Modals/BuyWithCoinbaseSequenceModal.tsx","webpack://_N_E/./components/Modals/SquidModal.tsx","webpack://_N_E/./components/Modals/StepCard.tsx","webpack://_N_E/./components/BuyBox.tsx","webpack://_N_E/./components/Modals/BoxBuyModal.tsx","webpack://_N_E/./components/Modals/SwapModal.tsx","webpack://_N_E/./components/Modals/SwapGate.tsx","webpack://_N_E/./fetchers.ts","webpack://_N_E/./payments.ts"],"sourcesContent":["import Image from \"next/image\";\nimport Slider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\nimport { useContext, useEffect } from \"react\";\nimport { isFirefox } from \"react-device-detect\";\n\nimport { ModalContext } from \"@/lib/context\";\nimport { getUSFormattedNumber } from \"@/utils\";\n\ntype Props = {\n  glo: number;\n  setGlo: React.Dispatch<React.SetStateAction<number>>;\n  yearlyYield: number;\n};\n\nexport default function Holdings({ glo, setGlo, yearlyYield }: Props) {\n  const { closeModal } = useContext(ModalContext);\n\n  const gloOnInputChange = (e: { target: { value: any } }) => {\n    let newGloQuantity = e.target.value;\n\n    if (newGloQuantity) {\n      newGloQuantity = newGloQuantity.replaceAll(\",\", \"\");\n      newGloQuantity = parseInt(newGloQuantity);\n    }\n    if (!newGloQuantity) {\n      newGloQuantity = 0;\n    }\n    setGlo(newGloQuantity);\n  };\n\n  const gloOnSliderChange = (newGloQuantity: number | number[]) => {\n    if (typeof newGloQuantity == \"number\") {\n      setGlo(newGloQuantity);\n    }\n  };\n\n  const formattedGlo = getUSFormattedNumber(glo);\n  const formattedYearlyYield = getUSFormattedNumber(yearlyYield);\n\n  const getTextWidth: any = (el: HTMLInputElement): number => {\n    // TODO: fix function type signature\n    // Refer: https://stackoverflow.com/a/50360743/1851428\n\n    // uses a cached canvas if available\n    const canvas: HTMLCanvasElement =\n      getTextWidth.canvas ||\n      (getTextWidth.canvas = document.createElement(\"canvas\"));\n    const context: CanvasRenderingContext2D | null = canvas.getContext(\"2d\");\n\n    // get the full font style property\n    // getting them all separately because the shorthand for getPropertyValue is unstable\n    const computedStyles = window.getComputedStyle(el, null);\n    const fontFamily = computedStyles.getPropertyValue(\"font-family\");\n    const fontSize = computedStyles.getPropertyValue(\"font-size\");\n    const fontWeight = computedStyles.getPropertyValue(\"font-weight\");\n    const text = el.value;\n\n    // set the font attr for the canvas text\n    if (context) {\n      context.font = `${fontWeight} ${fontSize} ${fontFamily}`;\n      const textMeasurement = context.measureText(text);\n      return textMeasurement.width;\n    }\n    console.error(\"Unable to calculate input width\");\n    // Fallback value enough for 4 digits\n    return 116;\n  };\n\n  useEffect(() => {\n    const gloInput = document.getElementById(\"gloInput\");\n    if (gloInput) {\n      let width = Math.floor(getTextWidth(gloInput as HTMLInputElement));\n      if (isFirefox) {\n        width += 16; // 1em offset\n      }\n      gloInput.style.width = width + 4 + \"px\";\n    }\n  }, [formattedGlo, getTextWidth]);\n\n  return (\n    <>\n      <div className=\"flex flex-col space-y-2 px-4 pt-4\">\n        <div className=\"flex flex-row justify-between\">\n          <div>Buy</div>\n          <button className=\"right-0\" onClick={() => closeModal()}>\n            <Image alt=\"x\" src=\"/x.svg\" height={16} width={16} />\n          </button>\n        </div>\n        <div className=\"flex flex-row font-semibold justify-between\">\n          <div className=\"flex flex-row text-[2.625rem] items-baseline\">\n            <div>$</div>\n            <input\n              id=\"gloInput\"\n              className=\"impact-input\"\n              value={formattedGlo}\n              type=\"text\"\n              inputMode=\"numeric\"\n              onChange={gloOnInputChange}\n            />\n            <div className=\"text-base ml-1\">Glo Dollars</div>\n          </div>\n          <div\n            className=\"bg-pine-900/[0.1] min-h-fit min-w-fit px-2.5 py-2.5 rounded-full self-center cursor-pointer\"\n            onClick={() => document.getElementById(\"gloInput\")?.focus()}\n          >\n            <Image width={14} height={14} src=\"/edit.svg\" alt=\"edit-icon\" />\n          </div>\n        </div>\n        <div className=\"py-4 px-2\">\n          <Slider\n            min={0}\n            max={20000}\n            step={100}\n            onChange={gloOnSliderChange}\n            defaultValue={1000}\n            value={glo}\n            railStyle={{\n              backgroundColor: \"#EAF2F1\",\n            }}\n            trackStyle={{\n              backgroundColor: \"#133d38\",\n            }}\n            handleStyle={{\n              height: \"28px\",\n              width: \"28px\",\n              backgroundColor: \"white\",\n              borderColor: \"#133d38\",\n              border: \"8px solid\",\n              opacity: 1,\n              marginTop: \"-13px\",\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"flex flex-col bg-cyan-600 mb-1 px-6 py-6 pt-0\">\n        <div className=\"overflow-hidden inline-block\">\n          <div className=\"h-2.5 w-2.5 bg-white -rotate-45 transform origin-top-left translate-x-36\"></div>\n        </div>\n        <div className=\"flex flex-col pt-2 space-y-2\">\n          <div className=\"font-normal text-base\">\n            To generate charitable donations up to\n          </div>\n          <div className=\"flex flex-row space-x-1 font-semibold items-baseline\">\n            <div\n              data-testid=\"basic-income-created\"\n              className=\"text-[2.625rem] leading-[2.625rem] break-all font-neuehaasgrotesk\"\n            >\n              {yearlyYield === 0 ? \"$0\" : `$${formattedYearlyYield}`}\n            </div>\n            <div className=\"text-base\">/ year</div>\n          </div>\n          <div className=\"text-xs text-[11px] pt-2\">\n            Current impact on the lower end of this range because Glo Dollar{\" \"}\n            <a\n              className=\"underline\"\n              href=\"https://www.glodollar.org/articles/from-bootstrap-to-high-impact\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              is bootstrapping\n            </a>\n            . Adoption helps grow impact.\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import { useContext, useState } from \"react\";\n\nimport Holdings from \"@/components/Holdings\";\nimport { ModalContext } from \"@/lib/context\";\nimport { getTotalYield, getUSFormattedNumber } from \"@/utils\";\n\nimport SwapGate from \"./SwapGate\";\n\nexport default function BuyGloModal({\n  totalBalance,\n}: {\n  totalBalance: number;\n  stellarConnected?: boolean;\n}) {\n  const { openModal } = useContext(ModalContext);\n\n  const [glo, setGlo] = useState<number>(\n    totalBalance !== 0 ? totalBalance : 1000\n  );\n\n  let yearlyYield = getTotalYield(glo);\n  // round down to 0 when the yield isn't even $1\n  if (yearlyYield < 1) {\n    yearlyYield = 0;\n  }\n  const formattedGlo = getUSFormattedNumber(glo);\n\n  return (\n    <div className=\"flex flex-col max-w-[343px] text-pine-900\">\n      <Holdings glo={glo} setGlo={setGlo} yearlyYield={yearlyYield} />\n      <button\n        className=\"bg-cyan-600 text-pine-900 h-[52px] py-3.5 mx-6 mt-6 mb-6\"\n        disabled={glo === 0}\n        onClick={() => openModal(<SwapGate buyAmount={Math.floor(glo)} />)}\n      >\n        Buy ${formattedGlo} Glo Dollar\n      </button>\n    </div>\n  );\n}\n","import { optimism } from \"@wagmi/core/chains\";\nimport { parseUnits } from \"ethers\";\nimport Image from \"next/image\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Tooltip } from \"react-tooltip\";\nimport { useAccount, useBalance, useSwitchChain } from \"wagmi\";\n\nimport StepCard from \"@/components/Modals/StepCard\";\nimport { getCoinbaseSessionToken } from \"@/fetchers\";\nimport { chainConfig } from \"@/lib/config\";\nimport { ModalContext } from \"@/lib/context\";\nimport { sliceAddress } from \"@/lib/utils\";\nimport {\n  getCoinbaseOnRampUrl,\n  getUSDCContractAddress,\n  POPUP_PROPS,\n} from \"@/utils\";\n\ninterface Props {\n  buyAmount: number;\n}\n\nexport default function BuyWithCoinbaseSequenceModal({ buyAmount }: Props) {\n  const { address, chain } = useAccount();\n  const { closeModal } = useContext(ModalContext);\n\n  const { data: balance } = useBalance({\n    address,\n    token: getUSDCContractAddress(chain!),\n    query: {\n      gcTime: 2_000,\n    },\n  });\n  const { switchChain } = useSwitchChain();\n  const [isCopiedTooltipOpen, setIsCopiedTooltipOpen] = useState(false);\n  const [isCoinbaseStepDone, setIsCoinbaseStepDone] = useState(false);\n  const [USDC, setUSDC] = useState(\"\");\n\n  const userIsOnOptimism = chain?.id === optimism.id;\n\n  useEffect(() => {\n    if (isCopiedTooltipOpen) {\n      setTimeout(() => setIsCopiedTooltipOpen(false), 2000);\n    }\n  }, [isCopiedTooltipOpen]);\n\n  useEffect(() => {\n    if (balance) {\n      const formatted = Number(balance?.formatted);\n      const val = BigInt(balance?.value);\n      const currBuyAmt =\n        (parseUnits(buyAmount.toString(), 6) * BigInt(99)) / BigInt(100);\n\n      const usdc = Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(formatted || 0);\n      setUSDC(usdc);\n      if (val >= currBuyAmt) setIsCoinbaseStepDone(true);\n    }\n  }, [balance]);\n\n  return (\n    <div className=\"flex flex-col max-w-[343px] text-pine-900 p-2\">\n      <div className=\"flex flex-row justify-between p-3\">\n        <Image\n          src=\"/arrow-right.svg\"\n          width={25}\n          height={25}\n          alt=\"arrow-right\"\n          className=\"flex w-25px max-w-25px h-25px max-h-25px scale-x-[-1] cursor-pointer -translate-x-1\"\n          onClick={() => closeModal()}\n        />\n        <Tooltip id=\"copy-deposit-tooltip\" isOpen={isCopiedTooltipOpen} />\n        <button\n          className=\"copy cursor-pointer border-2 rounded-full border-cyan-200 px-3 py-1\"\n          data-tooltip-id=\"copy-deposit-tooltip\"\n          data-tooltip-content=\"Copied!\"\n          onClick={() => {\n            navigator.clipboard.writeText(address!);\n            setIsCopiedTooltipOpen(true);\n          }}\n        >\n          🔗 {sliceAddress(address!)}\n        </button>\n        <button onClick={() => closeModal()}>\n          <Image alt=\"x\" src=\"/x.svg\" height={16} width={16} />\n        </button>\n      </div>\n      <section className=\"text-center\">\n        <h3 className=\"pt-0\">\n          Buying Glo Dollars through Coinbase and Sequence\n        </h3>\n        <p className=\"text-sm py-6\">\n          You can get Glo Dollars by exchanging another stablecoin called{\" \"}\n          <b>USDC</b> for Glo Dollar using the <b>Sequence</b> app.\n        </p>\n      </section>\n      <section>\n        <StepCard\n          index={1}\n          iconPath=\"/optimism-logo.svg\"\n          title={\"Switch to Optimism network\"}\n          content=\"Please confirm the switch in your wallet\"\n          action={() => {\n            switchChain!({ chainId: optimism.id });\n          }}\n          done={userIsOnOptimism}\n        />\n        <StepCard\n          index={2}\n          iconPath=\"/coinbase-invert.svg\"\n          title={`Buy ${buyAmount} USDC on Coinbase`}\n          content=\"Withdraw to the wallet address shown above\"\n          action={async () => {\n            const sessionToken = await getCoinbaseSessionToken(chain);\n\n            window.open(\n              getCoinbaseOnRampUrl(\n                buyAmount,\n                `${window.location.origin}/purchased-sequence`,\n                sessionToken\n              ),\n              \"_blank\",\n              POPUP_PROPS\n            );\n          }}\n          done={isCoinbaseStepDone}\n          USDC={USDC}\n        />\n        <StepCard\n          index={3}\n          iconPath=\"/sequence.svg\"\n          title={`Swap ${buyAmount} Glo Dollars on Sequence`}\n          content={`Swap ${buyAmount} Glo Dollars for ${buyAmount} USDC`}\n          action={() => {\n            if (chain) {\n              const url = `https://sequence.app/wallet/swap?chainId=${\n                chain.id\n              }&from=${getUSDCContractAddress(chain)}&to=${\n                chainConfig[chain.id]\n              }`;\n              window.open(url, \"_blank\");\n            }\n          }}\n        />\n      </section>\n    </div>\n  );\n}\n","import dynamic from \"next/dynamic\";\nimport Image from \"next/image\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { celo, Chain } from \"viem/chains\";\nimport { useAccount } from \"wagmi\";\n\nimport { getSmartContractAddress } from \"@/lib/config\";\nimport { ModalContext } from \"@/lib/context\";\nimport { getUSDCContractAddress } from \"@/utils\";\ninterface Props {\n  buyAmount: number;\n  gloChain?: Chain;\n  usdcChain?: Chain;\n}\n\nconst SquidWidget = dynamic(\n  async () => {\n    const { SquidWidget: _SquidWidget } = await import(\"@0xsquid/widget\");\n    return _SquidWidget;\n  },\n  { ssr: false }\n);\n\nexport default function SquidModal({ buyAmount, usdcChain, gloChain }: Props) {\n  const { closeModal } = useContext(ModalContext);\n  const { chain } = useAccount();\n\n  const chainId = chain?.id.toString() || celo.id.toString();\n\n  const [isCopiedTooltipOpen, setIsCopiedTooltipOpen] = useState(false);\n\n  useEffect(() => {\n    if (isCopiedTooltipOpen) {\n      setTimeout(() => setIsCopiedTooltipOpen(false), 2000);\n    }\n  }, [isCopiedTooltipOpen]);\n\n  const fromTo = [\n    {\n      chainId: gloChain ? gloChain.id.toString() : chainId,\n      address: getUSDCContractAddress(usdcChain || chain!).toLowerCase(),\n    },\n    {\n      chainId: usdcChain ? usdcChain.id.toString() : chainId,\n      address: getSmartContractAddress(gloChain?.id || chain?.id).toLowerCase(),\n    },\n  ];\n  const [from, to] = buyAmount > 0 ? fromTo : fromTo.reverse();\n\n  return (\n    <div className=\"flex flex-col text-pine-900 p-2\">\n      <div className=\"flex flex-row justify-between p-3\">\n        <Image\n          src=\"/arrow-right.svg\"\n          width={25}\n          height={25}\n          alt=\"arrow-right\"\n          className=\"flex w-25px max-w-25px h-25px max-h-25px scale-x-[-1] cursor-pointer -translate-x-1\"\n          onClick={() => closeModal()}\n        />\n\n        <button onClick={() => closeModal()}>\n          <Image alt=\"x\" src=\"/x.svg\" height={16} width={16} />\n        </button>\n      </div>\n      <section>\n        <SquidWidget\n          config={{\n            integratorId: process.env.NEXT_PUBLIC_SQUID_INTEGRATION_ID!,\n            apiUrl: \"https://apiplus.squidrouter.com\",\n            initialAssets: {\n              from,\n              to,\n            },\n          }}\n        />\n      </section>\n    </div>\n  );\n}\n","import clsx from \"clsx\";\nimport Image from \"next/image\";\n\ninterface Props {\n  index?: number;\n  iconPath: string;\n  title: string;\n  content: string;\n  action?: any;\n  done?: boolean;\n  isSequenceWallet?: boolean;\n  USDC?: string;\n  blackBg?: boolean;\n}\n\nfunction Icon({\n  iconPath,\n  done,\n  index,\n  blackBg,\n}: {\n  iconPath: string;\n  done?: boolean;\n  index?: number;\n  blackBg?: boolean;\n}) {\n  if (index) {\n    return (\n      <div\n        className={clsx(\n          \"relative circle border-2 w-[32px] h-[32px]\",\n          done && \"border-none bg-cyan-600 w-[32px] h-[32px]\"\n        )}\n      >\n        {!done ? (\n          index\n        ) : (\n          <Image alt=\"checkmark\" src=\"check-alpha.svg\" height={12} width={12} />\n        )}\n        <div\n          className={clsx(\n            \"circle w-[20px] h-[20px] absolute top-[-7px] right-[-10px]\",\n            done && \"top-[-5px] right-[-8px]\"\n          )}\n        >\n          <Image\n            className={clsx(blackBg && \"bg-black\")}\n            alt={iconPath}\n            src={iconPath}\n            height={20}\n            width={20}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Image\n      className={clsx(blackBg && \"bg-black\")}\n      alt={iconPath}\n      src={iconPath}\n      height={32}\n      width={32}\n    />\n  );\n}\n\nconst StepCard = ({\n  index,\n  iconPath,\n  title,\n  content,\n  action,\n  done = false,\n  isSequenceWallet,\n  USDC,\n  blackBg = false,\n}: Props) => (\n  <div\n    className={clsx(\n      \"cursor-pointer flex flex-col justify-center border-2 rounded-xl border-pine-100 hover:border-pine-400 mb-2\",\n      done && \"bg-cyan-600/20\"\n    )}\n    onClick={action}\n  >\n    <div className=\"flex flex-col justify-center\">\n      <div className=\"flex items-center p-3\">\n        <Icon iconPath={iconPath} done={done} index={index} blackBg={blackBg} />\n        <div className=\"pl-4\">\n          <h5 className=\"text-sm mb-2\">{title}</h5>\n          <p className=\"copy text-xs\">\n            {content}{\" \"}\n            {index === 3 && isSequenceWallet && (\n              <>\n                <Image\n                  alt=\"qrcode\"\n                  style={{ display: \"inline\" }}\n                  src=\"/miniqr.svg\"\n                  height={16}\n                  width={16}\n                />{\" \"}\n                +&nbsp;\n                <Image\n                  alt=\"copypaste\"\n                  style={{ display: \"inline\" }}\n                  src=\"/copy.svg\"\n                  height={16}\n                  width={16}\n                />\n              </>\n            )}\n          </p>\n        </div>\n      </div>\n      {USDC && (\n        <div className=\"p-3 border-t-2 flex justify-center w-full\">\n          <Image alt=\"usdc\" src=\"usdc.svg\" height={20} width={20} />\n          <span className=\"ml-2 copy text-pine-900 font-bold\">\n            Current USDC balance: {USDC}\n          </span>\n        </div>\n      )}\n    </div>\n  </div>\n);\n\nexport default StepCard;\n","import clsx from \"clsx\";\nimport Image from \"next/image\";\n\nexport const BuyBox = ({\n  name,\n  icon,\n  fees,\n  worksFor,\n  delay,\n  onClick,\n  disabled = false,\n  blackBg = false,\n}: {\n  name: string;\n  icon: string;\n  fees: string;\n  worksFor: string;\n  delay: string;\n  onClick: () => void;\n  disabled?: boolean;\n  blackBg?: boolean;\n}) => (\n  <div\n    id={name}\n    className={clsx(\n      \"flex flex-col p-3 border-2 rounded-xl border-pine-100 hover:border-pine-800 cursor-pointer mb-2\",\n      disabled && \"bg-pine-100 hover:border-pine-100\"\n    )}\n    onClick={!disabled ? onClick : undefined}\n  >\n    <div className=\"flex py-2\">\n      <Image\n        className={clsx(blackBg && \"bg-black\")}\n        alt={name}\n        src={icon}\n        height={28}\n        width={28}\n      />\n\n      <h3 className=\"px-3\">{name}</h3>\n    </div>\n    <div className=\"flex\">\n      <Double className=\"min-w-[18%]\" label=\"Fees\" value={`${fees}%`} />\n      <Double className=\"min-w-[36%]\" label=\"Works for\" value={worksFor} />\n      <Double className=\"min-w-[40%]\" label=\"Delay\" value={delay} />\n    </div>\n  </div>\n);\n\nconst Double = ({\n  label,\n  value,\n  className,\n}: {\n  label: string;\n  value: string;\n  className: string;\n}) => (\n  <div className={clsx(\"mr-5\", className)}>\n    <div className=\"text-pine-700\">{label}</div>\n    <div className=\"text-black font-bold\"> {value}</div>\n  </div>\n);\n","import Image from \"next/image\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Tooltip } from \"react-tooltip\";\nimport { useAccount } from \"wagmi\";\n\nimport BuyGloModal from \"@/components/Modals/BuyGloModal\";\nimport { ModalContext } from \"@/lib/context\";\nimport { sliceAddress } from \"@/lib/utils\";\n\nexport default function BoxBuyModal({\n  buyAmount,\n  children,\n}: {\n  buyAmount: number;\n  children: JSX.Element | JSX.Element[];\n}) {\n  const { address, isConnected } = useAccount();\n\n  const [isCopiedTooltipOpen, setIsCopiedTooltipOpen] = useState(false);\n\n  const { openModal, closeModal } = useContext(ModalContext);\n\n  useEffect(() => {\n    if (isCopiedTooltipOpen) {\n      setTimeout(() => setIsCopiedTooltipOpen(false), 2000);\n    }\n  }, [isCopiedTooltipOpen]);\n\n  return (\n    <div className=\"flex flex-col min-w-[343px] text-pine-900 p-2\">\n      <div className=\"flex flex-row justify-between p-3\">\n        <Image\n          src=\"/arrow-right.svg\"\n          width={25}\n          height={25}\n          alt=\"arrow-right\"\n          className=\"flex w-25px max-w-25px h-25px max-h-25px scale-x-[-1] cursor-pointer -translate-x-1\"\n          onClick={() => openModal(<BuyGloModal totalBalance={buyAmount} />)}\n        />\n        <Tooltip id=\"copy-deposit-tooltip\" isOpen={isCopiedTooltipOpen} />\n        {isConnected && (\n          <button\n            className=\"copy cursor-pointer border-2 rounded-full border-cyan-200 px-3 py-1\"\n            data-tooltip-id=\"copy-deposit-tooltip\"\n            data-tooltip-content=\"Copied!\"\n            onClick={() => {\n              navigator.clipboard.writeText(address!);\n              setIsCopiedTooltipOpen(true);\n            }}\n          >\n            🔗 {sliceAddress(address!)}\n          </button>\n        )}\n        <button onClick={() => closeModal()}>\n          <Image alt=\"x\" src=\"/x.svg\" height={16} width={16} />\n        </button>\n      </div>\n      <h2 className=\"text-center pt-0\">Buy Glo Dollars</h2>\n      {children}\n    </div>\n  );\n}\n","import { SwapDefault } from \"@coinbase/onchainkit/swap\";\nimport { Token } from \"@coinbase/onchainkit/token\";\nimport Image from \"next/image\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Tooltip } from \"react-tooltip\";\nimport { base, baseSepolia, celo, celoAlfajores } from \"viem/chains\";\nimport { useAccount, useBalance } from \"wagmi\";\n\nimport { getCoinbaseSessionToken } from \"@/fetchers\";\nimport { getSmartContractAddress } from \"@/lib/config\";\nimport { ModalContext } from \"@/lib/context\";\nimport { sliceAddress } from \"@/lib/utils\";\nimport {\n  getCoinbaseOnRampUrl,\n  getUSDCContractAddress,\n  POPUP_PROPS,\n} from \"@/utils\";\n\nimport SquidModal from \"./SquidModal\";\nimport StepCard from \"./StepCard\";\n\ninterface Props {\n  buyAmount: number;\n}\n\nexport default function SwapModal({ buyAmount }: Props) {\n  const { address, chain } = useAccount();\n  const { openModal, closeModal } = useContext(ModalContext);\n\n  const [isCopiedTooltipOpen, setIsCopiedTooltipOpen] = useState(false);\n  const [isSwapForm, setIsSwapForm] = useState(false);\n\n  const isBase = base.id === chain?.id || baseSepolia.id === chain?.id;\n  const isCelo = celo.id === chain?.id || celoAlfajores.id === chain?.id;\n\n  const { data: usdcBalance } = useBalance({\n    address,\n    token: getUSDCContractAddress(chain!),\n    query: {\n      gcTime: 3_000,\n    },\n  });\n\n  const gloToken: Token = {\n    name: \"USDGLO\",\n    address: getSmartContractAddress(chain?.id || base.id),\n    symbol: \"USDGLO\",\n    decimals: 18,\n    image: \"https://app.glodollar.org/glo-logo.png\",\n    chainId: chain?.id || base.id,\n  };\n\n  const usdcToken: Token = {\n    name: \"USDC\",\n    address: getUSDCContractAddress(chain || base),\n    symbol: \"USDC\",\n    decimals: 6,\n    image:\n      \"https://d3r81g40ycuhqg.cloudfront.net/wallet/wais/44/2b/442b80bd16af0c0d9b22e03a16753823fe826e5bfd457292b55fa0ba8c1ba213-ZWUzYjJmZGUtMDYxNy00NDcyLTg0NjQtMWI4OGEwYjBiODE2\",\n    chainId: chain?.id || base.id,\n  };\n\n  useEffect(() => {\n    if (isCopiedTooltipOpen) {\n      setTimeout(() => setIsCopiedTooltipOpen(false), 2000);\n    }\n  }, [isCopiedTooltipOpen]);\n\n  const back = () => (isSwapForm ? setIsSwapForm(false) : closeModal());\n\n  return (\n    <div className=\"flex flex-col text-pine-900 p-2\">\n      <div className=\"flex flex-row justify-between p-3\">\n        <Image\n          src=\"/arrow-right.svg\"\n          width={25}\n          height={25}\n          alt=\"arrow-right\"\n          className=\"flex w-25px max-w-25px h-25px max-h-25px scale-x-[-1] cursor-pointer -translate-x-1\"\n          onClick={() => back()}\n        />\n        <Tooltip id=\"copy-deposit-tooltip\" isOpen={isCopiedTooltipOpen} />\n        <button\n          className=\"copy cursor-pointer border-2 rounded-full border-cyan-200 px-3 py-1\"\n          data-tooltip-id=\"copy-deposit-tooltip\"\n          data-tooltip-content=\"Copied!\"\n          onClick={() => {\n            navigator.clipboard.writeText(address!);\n            setIsCopiedTooltipOpen(true);\n          }}\n        >\n          🔗 {sliceAddress(address!)}\n        </button>\n        <button onClick={() => back()}>\n          <Image alt=\"x\" src=\"/x.svg\" height={16} width={16} />\n        </button>\n      </div>\n      {isSwapForm ? (\n        <section className=\"flex\">\n          <SwapDefault\n            from={[usdcToken]}\n            to={[gloToken]}\n            onSuccess={() => closeModal()}\n          />\n        </section>\n      ) : (\n        <section>\n          <StepCard\n            index={1}\n            iconPath=\"/coinbase-invert.svg\"\n            title={`Buy ${buyAmount} USDC ${\n              isCelo ? \"(Base)\" : \"\"\n            } on Coinbase`}\n            content=\"Withdraws to the connected wallet address\"\n            action={async () => {\n              const sessionToken = await getCoinbaseSessionToken(chain);\n              window.open(\n                getCoinbaseOnRampUrl(\n                  buyAmount,\n                  `${window.location.origin}/purchased-coinbase`,\n                  sessionToken\n                ),\n                \"_blank\",\n                POPUP_PROPS\n              );\n            }}\n            done={(usdcBalance?.value || 0) >= BigInt(buyAmount)}\n            USDC={usdcBalance?.formatted}\n          />\n          {isBase ? (\n            <StepCard\n              index={2}\n              iconPath=\"/coinbase-invert.svg\"\n              title={`Swap ${buyAmount} USDC to USDGLO`}\n              content={\"Swap with Coinbase\"}\n              action={() => setIsSwapForm(true)}\n            />\n          ) : (\n            <StepCard\n              index={2}\n              iconPath=\"/squidrouter.svg\"\n              title={\n                isCelo\n                  ? `Swap ${buyAmount} USDC (Base) to USDGLO (Celo)`\n                  : `Swap ${buyAmount} USDC to USDGLO`\n              }\n              content={\"Swap with Squid Router\"}\n              action={() =>\n                openModal(\n                  <SquidModal\n                    buyAmount={buyAmount}\n                    gloChain={isCelo ? base : undefined}\n                  />\n                )\n              }\n            />\n          )}\n        </section>\n      )}\n    </div>\n  );\n}\n","import { useContext } from \"react\";\nimport { useAccount } from \"wagmi\";\n\nimport { ModalContext } from \"@/lib/context\";\nimport { apiInstance } from \"@/lib/utils\";\nimport { buyWithAqua, buyWithBetterSwap } from \"@/payments\";\n\nimport { BuyBox } from \"../BuyBox\";\n\nimport BoxBuyModal from \"./BoxBuyModal\";\nimport BuyWithCoinbaseSequenceModal from \"./BuyWithCoinbaseSequenceModal\";\nimport SquidModal from \"./SquidModal\";\nimport SwapModal from \"./SwapModal\";\n\ninterface Props {\n  buyAmount: number;\n}\n\nexport default function SwapGate(props: Props) {\n  const { connector } = useAccount();\n  const { openModal } = useContext(ModalContext);\n\n  const buyAmount = props.buyAmount || 1000;\n\n  const isSequenceWallet = connector?.id === \"sequence\";\n  const isMetaMask = connector?.id === \"metaMaskSDK\";\n  const isCoinbaseWallet = connector?.id === \"coinbaseWalletSDK\";\n  const isVe = apiInstance?.defaults.headers[\"glo-pub-address\"]\n    ?.toString()\n    .startsWith(\"ve\");\n  const isWc = connector?.id === \"walletConnect\";\n  const isSafe = connector?.id === \"safe\";\n\n  if (isSequenceWallet) {\n    return <BuyWithCoinbaseSequenceModal buyAmount={buyAmount} />;\n  }\n\n  if (isMetaMask || isCoinbaseWallet || isWc || isSafe) {\n    return <SwapModal buyAmount={buyAmount} />;\n  }\n\n  const BetterSwap = () => (\n    <BuyBox\n      key=\"betterswap\"\n      name=\"BetterSwap\"\n      icon=\"/betterswap.png\"\n      blackBg\n      fees=\"0.3\"\n      worksFor=\"🔐 Crypto\"\n      delay=\"⚡ Instant\"\n      onClick={() => buyWithBetterSwap(buyAmount)}\n    />\n  );\n\n  if (isVe) {\n    return (\n      <BoxBuyModal buyAmount={buyAmount}>\n        <BetterSwap />\n      </BoxBuyModal>\n    );\n  }\n\n  const isStellar = localStorage.getItem(\"stellarConnected\") == \"true\";\n\n  if (isStellar) {\n    return (\n      <BoxBuyModal buyAmount={buyAmount}>\n        <BuyBox\n          key=\"aquarius\"\n          name=\"Aquarius\"\n          icon=\"/aquarius.png\"\n          fees=\"0.1\"\n          worksFor=\"🔐 XLM\"\n          delay=\"⚡ Instant\"\n          onClick={() => buyWithAqua()}\n        />\n      </BoxBuyModal>\n    );\n  }\n\n  // Default option\n  return (\n    <BoxBuyModal buyAmount={buyAmount}>\n      <BetterSwap />\n      <BuyBox\n        key=\"squidrouter\"\n        name=\"squidrouter\"\n        icon=\"/squidrouter.svg\"\n        fees=\"0.3\"\n        worksFor=\"🔐 Crypto\"\n        delay=\"⚡ Instant\"\n        onClick={() => openModal(<SquidModal buyAmount={buyAmount} />)}\n      />\n    </BoxBuyModal>\n  );\n}\n","import { Chain } from \"viem\";\n\nimport { api } from \"@/lib/utils\";\n\nexport const getCurrentSelectedCharity = async () => {\n  let apiInstance = api();\n  if (!apiInstance) {\n    // HACK: some race condition with the api instance\n    await new Promise((res) => setTimeout(res, 1000));\n    apiInstance = api();\n  }\n  return apiInstance.get(`/charity`).then((res) => res.data);\n};\n\nconst getChainName = (chain?: Chain) => {\n  const name = chain?.name.toLowerCase() || \"\";\n\n  const chainMap: { [key: string]: string } = {\n    \"op mainnet\": \"optimism\",\n    \"arbitrum one\": \"arbitrum\",\n  };\n  return chainMap[name] || name;\n};\n\nexport const getCoinbaseSessionToken = async (chain?: Chain) => {\n  const {\n    data: { sessionToken },\n  } = await api().get<{ sessionToken: string }>(\n    `/coinbase/session-token/${getChainName(chain)}`\n  );\n\n  return sessionToken;\n};\n","import { Chain } from \"@wagmi/core/chains\";\n\nimport { getUSDCToUSDGLOSwapDeeplink } from \"./utils\";\n\nexport const buyWithSwap = (amount: number, chain: Chain, dex: string) => {\n  window.open(getUSDCToUSDGLOSwapDeeplink(amount, chain, dex), \"_blank\");\n};\n\nexport const buyWithAqua = () =>\n  window.open(\n    \"https://aqua.network/swap/USDC:GA5ZSEJYB37JRC5AVCIA5MOP4RHTM335X2KGX3IHOJAPP5RE34K4KZVN/USDGLO:GBBS25EGYQPGEZCGCFBKG4OAGFXU6DSOQBGTHELLJT3HZXZJ34HWS6XV\",\n    \"_blank\"\n  );\n\nexport const buyWithBetterSwap = (amount: number) =>\n  window.open(\n    `https://www.betterswap.io/?tokenIn=native&tokenOut=0x29c630cce4ddb23900f5fe66ab55e488c15b9f5e&amountOut=${amount}`,\n    \"_blank\"\n  );\n\nexport const sellWithBetterSwap = (amount: number) =>\n  window.open(\n    `https://www.betterswap.io/?tokenOut=native&tokenIn=0x29c630cce4ddb23900f5fe66ab55e488c15b9f5e&amountOut=${amount}`,\n    \"_blank\"\n  );\n"],"names":["Holdings","glo","setGlo","yearlyYield","closeModal","useContext","ModalContext","formattedGlo","getUSFormattedNumber","formattedYearlyYield","getTextWidth","el","context","canvas","document","createElement","getContext","computedStyles","window","getComputedStyle","fontFamily","getPropertyValue","fontSize","fontWeight","text","value","font","measureText","width","console","error","useEffect","gloInput","getElementById","Math","floor","isFirefox","style","div","className","button","onClick","Image","alt","src","height","input","id","type","inputMode","onChange","e","newGloQuantity","target","replaceAll","parseInt","focus","Slider","min","max","step","defaultValue","railStyle","backgroundColor","trackStyle","handleStyle","borderColor","border","opacity","marginTop","data-testid","a","href","rel","BuyGloModal","totalBalance","openModal","useState","getTotalYield","disabled","SwapGate","buyAmount","BuyWithCoinbaseSequenceModal","address","chain","useAccount","data","balance","useBalance","token","getUSDCContractAddress","query","gcTime","switchChain","useSwitchChain","isCopiedTooltipOpen","setIsCopiedTooltipOpen","isCoinbaseStepDone","setIsCoinbaseStepDone","USDC","setUSDC","userIsOnOptimism","optimism","setTimeout","formatted","Number","val","BigInt","currBuyAmt","toString","usdc","Intl","NumberFormat","currency","format","Tooltip","isOpen","data-tooltip-id","data-tooltip-content","navigator","clipboard","writeText","sliceAddress","section","h3","p","b","StepCard","index","iconPath","title","content","action","chainId","done","async","sessionToken","getCoinbaseSessionToken","open","getCoinbaseOnRampUrl","location","origin","POPUP_PROPS","url","chainConfig","SquidWidget","dynamic","_SquidWidget","ssr","SquidModal","usdcChain","gloChain","celo","fromTo","toLowerCase","getSmartContractAddress","from","to","reverse","config","integratorId","process","env","NEXT_PUBLIC_SQUID_INTEGRATION_ID","apiUrl","initialAssets","Icon","blackBg","clsx","isSequenceWallet","h5","display","span","BuyBox","name","icon","fees","worksFor","delay","undefined","Double","label","BoxBuyModal","children","isConnected","h2","SwapModal","isSwapForm","setIsSwapForm","isBase","base","baseSepolia","isCelo","celoAlfajores","usdcBalance","gloToken","symbol","decimals","image","usdcToken","back","SwapDefault","onSuccess","props","apiInstance","connector","isMetaMask","isCoinbaseWallet","isVe","defaults","headers","startsWith","isWc","isSafe","BetterSwap","buyWithBetterSwap","localStorage","getItem","buyWithAqua","getCurrentSelectedCharity","api","Promise","res","get","then","getChainName","amount","sellWithBetterSwap"],"sourceRoot":""}