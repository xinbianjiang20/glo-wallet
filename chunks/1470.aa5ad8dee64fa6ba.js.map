{"version":3,"file":"static/chunks/1470.aa5ad8dee64fa6ba.js","mappings":"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","sources":["webpack://_N_E/./components/CharitySelector.tsx","webpack://_N_E/./components/GloAnimated.tsx","webpack://_N_E/./components/ImpactInset.tsx","webpack://_N_E/./lib/betterswap.ts","webpack://_N_E/./lib/usePairReserves.ts","webpack://_N_E/./lib/useQuote.ts","webpack://_N_E/./components/Modals/RemoveLiquidityModal.tsx","webpack://_N_E/./components/Modals/LiquidityModal.tsx","webpack://_N_E/./components/Modals/SellModal.tsx","webpack://_N_E/./components/Balance.tsx","webpack://_N_E/./components/CompletedIcon.tsx","webpack://_N_E/./components/Modals/IdrissConfirmModal.tsx","webpack://_N_E/./components/Modals/IdrissModal.tsx","webpack://_N_E/./components/Modals/TweetModal.tsx","webpack://_N_E/./components/CTA.tsx","webpack://_N_E/./components/Modals/CharityCard.tsx","webpack://_N_E/./components/Modals/CharityManageModal.tsx","webpack://_N_E/./components/Recipients.tsx","webpack://_N_E/./lib/idriss.ts","webpack://_N_E/./lib/useAutoConnect.ts","webpack://_N_E/./components/AddToWallet.tsx","webpack://_N_E/./lib/hooks.ts","webpack://_N_E/./components/NetworkSwitcher.tsx","webpack://_N_E/./components/Modals/UserAuthModal.tsx","webpack://_N_E/./components/Modals/UserInfoModal.tsx","webpack://_N_E/./components/Header.tsx","webpack://_N_E/./components/Home.tsx"],"sourcesContent":["import Image from \"next/image\";\nimport useSWR from \"swr\";\n\nimport { getCurrentSelectedCharity } from \"@/fetchers\";\nimport { useUserStore } from \"@/lib/store\";\nimport { CHARITY_MAP } from \"@/lib/utils\";\n\nexport default function CharitySelector() {\n  const { data, error, isLoading } = useSWR(\n    \"/charity\",\n    getCurrentSelectedCharity\n  );\n\n  const { setRecipientsView } = useUserStore();\n  if (error) {\n    console.error(error);\n  }\n  const selected =\n    data &&\n    (data.length > 1\n      ? `${data.length} recipients`\n      : CHARITY_MAP[data[0].name]?.short_name);\n\n  return (\n    <div className=\"m-1 relative z-0 flex justify-center\">\n      <button\n        className={`flex flex-col bg-white border-2 border-cyan-600 text-impact-fg rounded-[36px] h-[32px] px-2 py-5 font-normal items-baseline`}\n        onClick={() => setRecipientsView(true)}\n      >\n        <div className=\"flex w-full justify-center items-center space-y-2\">\n          <div className=\"flex items-center\">\n            <Image\n              src={\"/gear.svg\"}\n              width={16}\n              height={16}\n              alt=\"choose public good to fund\"\n            />\n            <p className=\"ml-2 text-sm\">\n              {isLoading ? \"Loading\" : selected || \"Pending\"}\n            </p>\n          </div>\n        </div>\n      </button>\n    </div>\n  );\n}\n","import { GetBalanceReturnType } from \"@wagmi/core\";\nimport { useLottie } from \"lottie-react\";\nimport { useEffect } from \"react\";\nimport { useAccount } from \"wagmi\";\n\nimport gloAnimationInverted from \"../public/glo-animation-inverted.json\";\nimport gloAnimation from \"../public/glo-animation.json\";\n\nconst style = {\n  height: 28,\n  width: 28,\n};\n\nconst commonOptions = {\n  loop: true,\n  autoplay: false,\n};\n\ntype Props = {\n  totalBalance: GetBalanceReturnType | undefined;\n};\n\nconst GloAnimated = ({ totalBalance }: Props) => {\n  const { isConnected } = useAccount();\n\n  const options = {\n    animationData: totalBalance?.value ? gloAnimation : gloAnimationInverted,\n    ...commonOptions,\n  };\n\n  const { View, play } = useLottie(options, style);\n\n  useEffect(() => {\n    if (isConnected) {\n      play();\n    }\n  }, [isConnected]);\n\n  return View;\n};\n\nexport default GloAnimated;\n","import { GetBalanceReturnType } from \"@wagmi/core\";\nimport { motion } from \"framer-motion\";\n\nimport BuyGloModal from \"@/components/Modals/BuyGloModal\";\n\nimport GloAnimated from \"./GloAnimated\";\n\ntype Props = {\n  openModal: (content: JSX.Element) => void;\n  yearlyYield: number;\n  yearlyYieldFormatted: string;\n  totalBalance: GetBalanceReturnType | undefined;\n};\n\nexport default function ImpactInset({\n  openModal,\n  yearlyYield,\n  yearlyYieldFormatted,\n  totalBalance,\n}: Props) {\n  const bgColorClass = totalBalance?.value ? \"bg-impact-bg\" : \"bg-pine-100\";\n\n  return (\n    <div className=\"m-1 relative z-0 flex justify-center\">\n      <button\n        className={`flex flex-col ${bgColorClass} border-2 border-cyan-600 text-impact-fg rounded-[36px] h-[32px] px-2 py-5 font-normal items-baseline`}\n        onClick={() => openModal(<BuyGloModal totalBalance={1000} />)}\n      >\n        <div className=\"flex w-full justify-center items-center space-y-2\">\n          <motion.div\n            className=\"flex items-center\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 1.5 }}\n          >\n            <GloAnimated totalBalance={totalBalance} />\n            <p className=\"ml-2 text-sm\">{yearlyYieldFormatted}</p>\n          </motion.div>\n        </div>\n      </button>\n    </div>\n  );\n}\n","import { ethers } from \"ethers\";\n\nimport {\n  B3TR,\n  USDGLO,\n  VECHAIN_B3TR_USDGLO_POOL,\n  VECHAIN_ROUTER_ADDRESS,\n} from \"@/lib/config\";\nimport { getJsonProvider } from \"@/utils\";\n\nexport const getVeChainTokenBalance = async (\n  tokenAddress: string,\n  walletAddress: string,\n  chainId: number\n): Promise<bigint> => {\n  try {\n    const provider = await getJsonProvider(chainId);\n    const abi = [\"function balanceOf(address account) view returns (uint256)\"];\n    const tokenContract = new ethers.Contract(tokenAddress, abi, provider);\n    return await tokenContract.balanceOf(walletAddress);\n  } catch (err) {\n    console.log(\n      `Could not fetch token balance for ${walletAddress} on chain ${chainId}`\n    );\n    console.log(err);\n    return BigInt(0);\n  }\n};\n\nexport const getVeChainLiquidityPoolInfo = async (\n  poolAddress: string,\n  chainId: number\n): Promise<{\n  token0: string;\n  token1: string;\n  reserve0: bigint;\n  reserve1: bigint;\n  totalSupply: bigint;\n}> => {\n  try {\n    const provider = await getJsonProvider(chainId);\n    const abi = [\n      \"function token0() view returns (address)\",\n      \"function token1() view returns (address)\",\n      \"function getReserves() view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast)\",\n      \"function totalSupply() view returns (uint256)\",\n    ];\n    const poolContract = new ethers.Contract(poolAddress, abi, provider);\n\n    const [token0, token1, reserves, totalSupply] = await Promise.all([\n      poolContract.token0(),\n      poolContract.token1(),\n      poolContract.getReserves(),\n      poolContract.totalSupply(),\n    ]);\n\n    return {\n      token0,\n      token1,\n      reserve0: BigInt(reserves._reserve0),\n      reserve1: BigInt(reserves._reserve1),\n      totalSupply: BigInt(totalSupply),\n    };\n  } catch (err) {\n    console.log(\n      `Could not fetch pool info for ${poolAddress} on chain ${chainId}`\n    );\n    console.log(err);\n    return {\n      token0: \"\",\n      token1: \"\",\n      reserve0: BigInt(0),\n      reserve1: BigInt(0),\n      totalSupply: BigInt(0),\n    };\n  }\n};\n\nexport const getPairReserves = async (\n  pairAddress: string,\n  chainId: number\n): Promise<{\n  reserve0: bigint;\n  reserve1: bigint;\n  blockTimestampLast: number;\n}> => {\n  try {\n    const provider = await getJsonProvider(chainId);\n    const abi = [\n      \"function getReserves() view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast)\",\n    ];\n    const pairContract = new ethers.Contract(pairAddress, abi, provider);\n\n    const reserves = await pairContract.getReserves();\n\n    return {\n      reserve0: BigInt(reserves._reserve0),\n      reserve1: BigInt(reserves._reserve1),\n      blockTimestampLast: Number(reserves._blockTimestampLast),\n    };\n  } catch (err) {\n    console.log(\n      `Could not fetch reserves for pair ${pairAddress} on chain ${chainId}`\n    );\n    console.log(err);\n    return {\n      reserve0: BigInt(0),\n      reserve1: BigInt(0),\n      blockTimestampLast: 0,\n    };\n  }\n};\n\nexport const getQuoteFromRouter = async (\n  routerAddress: string,\n  amountA: bigint,\n  reserveA: bigint,\n  reserveB: bigint,\n  chainId: number\n): Promise<bigint> => {\n  try {\n    const provider = await getJsonProvider(chainId);\n    const abi = [\n      \"function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) pure returns (uint256 amountB)\",\n    ];\n    const routerContract = new ethers.Contract(routerAddress, abi, provider);\n\n    const amountB = await routerContract.quote(amountA, reserveA, reserveB);\n    return BigInt(amountB);\n  } catch (err) {\n    console.log(\n      `Could not get quote from router ${routerAddress} on chain ${chainId}`\n    );\n    console.log(err);\n    return BigInt(0);\n  }\n};\n\n// Pure calculation function (client-side calculation without contract call)\nexport const calculateQuote = (\n  amountA: bigint,\n  reserveA: bigint,\n  reserveB: bigint\n): bigint => {\n  if (reserveA === BigInt(0)) {\n    return BigInt(0);\n  }\n  return (amountA * reserveB) / reserveA;\n};\n\nexport const calculateLiquidityTokensToMint = (\n  amountA: bigint,\n  amountB: bigint,\n  reserveA: bigint,\n  reserveB: bigint,\n  totalSupply: bigint\n): bigint => {\n  if (totalSupply === BigInt(0)) {\n    // Initial liquidity - geometric mean minus minimum liquidity\n    const liquidity = (amountA * amountB) ** BigInt(1 / 2) - BigInt(1000);\n    return liquidity > BigInt(0) ? liquidity : BigInt(0);\n  } else {\n    // Subsequent liquidity - minimum of proportional amounts\n    const liquidityA = (amountA * totalSupply) / reserveA;\n    const liquidityB = (amountB * totalSupply) / reserveB;\n    return liquidityA < liquidityB ? liquidityA : liquidityB;\n  }\n};\n\nexport const calculateTokensFromLiquidity = (\n  liquidity: bigint,\n  totalSupply: bigint,\n  reserveA: bigint,\n  reserveB: bigint\n): { amountA: bigint; amountB: bigint } => {\n  const amountA = (liquidity * reserveA) / totalSupply;\n  const amountB = (liquidity * reserveB) / totalSupply;\n  return { amountA, amountB };\n};\n\n// Helper function to format units (similar to ethers formatUnits)\nconst formatUnits = (value: bigint, decimals = 18): string => {\n  return (Number(value) / Math.pow(10, decimals)).toFixed(4);\n};\n\nexport const addVeChainLiquidity = async (\n  connex: any,\n  tokenA: string,\n  tokenB: string,\n  amountADesired: bigint,\n  amountBDesired: bigint,\n  userAddress: string,\n  slippageTolerance = 0.5 // 0.5% default slippage\n): Promise<any> => {\n  try {\n    // Calculate minimum amounts with slippage tolerance\n    const slippageMultiplier = (100 - slippageTolerance) / 100;\n    const amountAMin = BigInt(\n      Math.floor(Number(amountADesired) * slippageMultiplier)\n    );\n    const amountBMin = BigInt(\n      Math.floor(Number(amountBDesired) * slippageMultiplier)\n    );\n\n    // Set deadline to 20 minutes from now\n    const deadline = Math.floor(Date.now() / 1000) + 1200;\n\n    // addLiquidity ABI\n    const addLiquidityABI = {\n      inputs: [\n        { internalType: \"address\", name: \"tokenA\", type: \"address\" },\n        { internalType: \"address\", name: \"tokenB\", type: \"address\" },\n        { internalType: \"uint256\", name: \"amountADesired\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"amountBDesired\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"amountAMin\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"amountBMin\", type: \"uint256\" },\n        { internalType: \"address\", name: \"to\", type: \"address\" },\n        { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n      ],\n      name: \"addLiquidity\",\n      outputs: [\n        { internalType: \"uint256\", name: \"amountA\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"amountB\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"liquidity\", type: \"uint256\" },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    };\n\n    // Approve ABI for token approvals\n    const approveABI = {\n      constant: false,\n      inputs: [\n        { name: \"_spender\", type: \"address\" },\n        { name: \"_amount\", type: \"uint256\" },\n      ],\n      name: \"approve\",\n      outputs: [{ name: \"success\", type: \"bool\" }],\n      payable: false,\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    };\n\n    // Prepare approval clauses for both tokens\n    const tokenAContract = connex.thor.account(tokenA).method(approveABI);\n    const tokenBContract = connex.thor.account(tokenB).method(approveABI);\n    const routerContract = connex.thor\n      .account(VECHAIN_ROUTER_ADDRESS)\n      .method(addLiquidityABI);\n\n    const tokenAApprovalClause = tokenAContract.asClause(\n      VECHAIN_ROUTER_ADDRESS,\n      amountADesired.toString()\n    );\n    const tokenBApprovalClause = tokenBContract.asClause(\n      VECHAIN_ROUTER_ADDRESS,\n      amountBDesired.toString()\n    );\n\n    // Prepare addLiquidity clause\n    const addLiquidityClause = routerContract.asClause(\n      tokenA,\n      tokenB,\n      amountADesired.toString(),\n      amountBDesired.toString(),\n      amountAMin.toString(),\n      amountBMin.toString(),\n      userAddress,\n      deadline.toString()\n    );\n\n    // Create transaction with all clauses\n    const clauses = [\n      {\n        comment: `Approve ${formatUnits(amountADesired, 18)} ${\n          tokenA === B3TR ? \"B3TR\" : \"Token A\"\n        }`,\n        ...tokenAApprovalClause,\n      },\n      {\n        comment: `Approve ${formatUnits(amountBDesired, 18)} ${\n          tokenB === USDGLO ? \"USDGLO\" : \"Token B\"\n        }`,\n        ...tokenBApprovalClause,\n      },\n      {\n        comment: `Add liquidity: ${formatUnits(\n          amountADesired,\n          18\n        )} + ${formatUnits(amountBDesired, 18)}`,\n        ...addLiquidityClause,\n      },\n    ];\n\n    console.log(\"Sending liquidity transaction with clauses:\", clauses);\n\n    // Send transaction\n    const result = await connex.vendor\n      .sign(\"tx\", clauses)\n      .signer(userAddress)\n      .gas(500000) // Set maximum gas for liquidity operations\n      .comment(\n        `Add liquidity: ${formatUnits(amountADesired, 18)} ${\n          tokenA === B3TR ? \"B3TR\" : \"TokenA\"\n        } + ${formatUnits(amountBDesired, 18)} ${\n          tokenB === USDGLO ? \"USDGLO\" : \"TokenB\"\n        }`\n      )\n      .request();\n\n    console.log(\"Liquidity transaction result:\", result);\n    return result;\n  } catch (error) {\n    console.error(\"Error adding VeChain liquidity:\", error);\n    throw error;\n  }\n};\n\n// Get LP token total supply\nexport const getLPTokenTotalSupply = async (\n  lpTokenAddress: string,\n  chainId: number\n): Promise<bigint> => {\n  try {\n    const provider = await getJsonProvider(chainId);\n    const abi = [\"function totalSupply() view returns (uint256)\"];\n    const lpContract = new ethers.Contract(lpTokenAddress, abi, provider);\n\n    const totalSupply = await lpContract.totalSupply();\n    return BigInt(totalSupply);\n  } catch (err) {\n    console.log(\n      `Could not fetch LP token total supply for ${lpTokenAddress} on chain ${chainId}`\n    );\n    console.log(err);\n    return BigInt(0);\n  }\n};\n\n// Calculate tokens to receive when removing liquidity\nexport const calculateRemoveLiquidityAmounts = (\n  lpTokenAmount: bigint,\n  totalSupply: bigint,\n  reserve0: bigint,\n  reserve1: bigint\n): { amount0: bigint; amount1: bigint; percentage: number } => {\n  if (totalSupply === BigInt(0)) {\n    return { amount0: BigInt(0), amount1: BigInt(0), percentage: 0 };\n  }\n\n  const amount0 = (lpTokenAmount * reserve0) / totalSupply;\n  const amount1 = (lpTokenAmount * reserve1) / totalSupply;\n  const percentage =\n    Number((lpTokenAmount * BigInt(10000)) / totalSupply) / 100;\n\n  return { amount0, amount1, percentage };\n};\n\nexport const removeVeChainLiquidity = async (\n  connex: any,\n  tokenA: string,\n  tokenB: string,\n  liquidity: bigint,\n  userAddress: string,\n  slippageTolerance = 0.5 // 0.5% default slippage\n): Promise<any> => {\n  try {\n    // Calculate minimum amounts with slippage tolerance\n    const slippageMultiplier = (100 - slippageTolerance) / 100;\n\n    // For remove liquidity, we need to calculate expected amounts first\n    // This would typically require knowing the current reserves and total supply\n    // For now, we'll set minimum amounts to 0 (can be improved)\n    const amountAMin = BigInt(0); // Should be calculated based on expected amounts\n    const amountBMin = BigInt(0); // Should be calculated based on expected amounts\n\n    // Set deadline to 20 minutes from now\n    const deadline = Math.floor(Date.now() / 1000) + 1200;\n\n    // removeLiquidity ABI\n    const removeLiquidityABI = {\n      inputs: [\n        { internalType: \"address\", name: \"tokenA\", type: \"address\" },\n        { internalType: \"address\", name: \"tokenB\", type: \"address\" },\n        { internalType: \"uint256\", name: \"liquidity\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"amountAMin\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"amountBMin\", type: \"uint256\" },\n        { internalType: \"address\", name: \"to\", type: \"address\" },\n        { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n      ],\n      name: \"removeLiquidity\",\n      outputs: [\n        { internalType: \"uint256\", name: \"amountA\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"amountB\", type: \"uint256\" },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    };\n\n    // Approve ABI for LP token approval\n    const approveABI = {\n      constant: false,\n      inputs: [\n        { name: \"_spender\", type: \"address\" },\n        { name: \"_amount\", type: \"uint256\" },\n      ],\n      name: \"approve\",\n      outputs: [{ name: \"success\", type: \"bool\" }],\n      payable: false,\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    };\n\n    // Prepare approval clause for LP token\n    const lpTokenContract = connex.thor\n      .account(VECHAIN_B3TR_USDGLO_POOL)\n      .method(approveABI);\n    const routerContract = connex.thor\n      .account(VECHAIN_ROUTER_ADDRESS)\n      .method(removeLiquidityABI);\n\n    const lpTokenApprovalClause = lpTokenContract.asClause(\n      VECHAIN_ROUTER_ADDRESS,\n      liquidity.toString()\n    );\n\n    // Prepare removeLiquidity clause\n    const removeLiquidityClause = routerContract.asClause(\n      tokenA,\n      tokenB,\n      liquidity.toString(),\n      amountAMin.toString(),\n      amountBMin.toString(),\n      userAddress,\n      deadline.toString()\n    );\n\n    // Create transaction with all clauses\n    const clauses = [\n      {\n        comment: `Approve ${formatUnits(liquidity, 18)} LP tokens`,\n        ...lpTokenApprovalClause,\n      },\n      {\n        comment: `Remove liquidity: ${formatUnits(liquidity, 18)} LP tokens`,\n        ...removeLiquidityClause,\n      },\n    ];\n\n    console.log(\"Sending remove liquidity transaction with clauses:\", clauses);\n\n    // Send transaction\n    const result = await connex.vendor\n      .sign(\"tx\", clauses)\n      .signer(userAddress)\n      .gas(300000) // Set maximum gas for remove liquidity operations\n      .comment(`Remove liquidity: ${formatUnits(liquidity, 18)} LP tokens`)\n      .request();\n\n    console.log(\"Remove liquidity transaction result:\", result);\n    return result;\n  } catch (error) {\n    console.error(\"Error removing VeChain liquidity:\", error);\n    throw error;\n  }\n};\n","import { useQuery } from \"@tanstack/react-query\";\nimport { vechain } from \"viem/chains\";\nimport { useAccount } from \"wagmi\";\n\nimport { getPairReserves } from \"./betterswap\";\n\nexport interface UsePairReservesParameters {\n  pairAddress?: string;\n  chainId?: number;\n  enabled?: boolean;\n  gcTime?: number;\n  staleTime?: number;\n  refetchInterval?: number;\n}\n\nexport interface PairReservesData {\n  reserve0: bigint;\n  reserve1: bigint;\n  blockTimestampLast: number;\n  formatted: {\n    reserve0: string;\n    reserve1: string;\n  };\n}\n\nexport interface UsePairReservesReturnType {\n  data: PairReservesData | undefined;\n  error: Error | null;\n  isError: boolean;\n  isLoading: boolean;\n  isSuccess: boolean;\n  refetch: () => void;\n}\n\nconst formatReserve = (reserve: bigint, decimals = 18): string => {\n  return (Number(reserve) / Math.pow(10, decimals)).toFixed(6);\n};\n\nexport function usePairReserves({\n  pairAddress,\n  chainId,\n  enabled = true,\n  gcTime = 30_000, // 30 seconds cache time\n  staleTime = 5_000, // 5 seconds stale time\n  refetchInterval,\n}: UsePairReservesParameters = {}): UsePairReservesReturnType {\n  const { chain } = useAccount();\n\n  // Use provided chainId or fall back to connected chain\n  const targetChainId = chainId || chain?.id || vechain.id;\n\n  const queryKey = [\"pairReserves\", pairAddress, targetChainId];\n\n  const { data, error, isError, isLoading, isSuccess, refetch } = useQuery({\n    queryKey,\n    queryFn: async (): Promise<PairReservesData> => {\n      if (!pairAddress) {\n        throw new Error(\"Pair address is required\");\n      }\n\n      const reserves = await getPairReserves(pairAddress, targetChainId);\n\n      return {\n        ...reserves,\n        formatted: {\n          reserve0: formatReserve(reserves.reserve0),\n          reserve1: formatReserve(reserves.reserve1),\n        },\n      };\n    },\n    enabled: Boolean(pairAddress && enabled),\n    gcTime,\n    staleTime,\n    refetchInterval,\n    retry: 3,\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\n  });\n\n  return {\n    data,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    refetch,\n  };\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { vechain } from \"viem/chains\";\nimport { useAccount } from \"wagmi\";\n\nimport { calculateQuote, getQuoteFromRouter } from \"./betterswap\";\n\nexport interface UseQuoteParameters {\n  amountA?: bigint;\n  reserveA?: bigint;\n  reserveB?: bigint;\n  routerAddress?: string; // Optional - if provided, uses contract call\n  chainId?: number;\n  enabled?: boolean;\n  gcTime?: number;\n  staleTime?: number;\n  refetchInterval?: number;\n  useClientSide?: boolean; // If true, uses client-side calculation instead of contract\n}\n\nexport interface QuoteData {\n  amountB: bigint;\n  formatted: string;\n  price: number; // Price ratio (amountB/amountA)\n  inversePrice: number; // Inverse price ratio (amountA/amountB)\n}\n\nexport interface UseQuoteReturnType {\n  data: QuoteData | undefined;\n  error: Error | null;\n  isError: boolean;\n  isLoading: boolean;\n  isSuccess: boolean;\n  refetch: () => void;\n}\n\nconst formatAmount = (amount: bigint, decimals = 18): string => {\n  return (Number(amount) / Math.pow(10, decimals)).toFixed(6);\n};\n\nconst calculatePrice = (amountA: bigint, amountB: bigint): number => {\n  if (amountA === BigInt(0)) return 0;\n  return Number(amountB) / Number(amountA);\n};\n\nexport function useQuote({\n  amountA,\n  reserveA,\n  reserveB,\n  routerAddress,\n  chainId,\n  enabled = true,\n  gcTime = 10_000, // 10 seconds cache time (shorter since quotes change frequently)\n  staleTime = 2_000, // 2 seconds stale time\n  refetchInterval,\n  useClientSide = true, // Default to client-side calculation for speed\n}: UseQuoteParameters = {}): UseQuoteReturnType {\n  const { chain } = useAccount();\n\n  // Use provided chainId or fall back to connected chain\n  const targetChainId = chainId || chain?.id || vechain.id;\n\n  const queryKey = [\n    \"quote\",\n    amountA?.toString(),\n    reserveA?.toString(),\n    reserveB?.toString(),\n    routerAddress,\n    targetChainId,\n    useClientSide,\n  ];\n\n  const { data, error, isError, isLoading, isSuccess, refetch } = useQuery({\n    queryKey,\n    queryFn: async (): Promise<QuoteData> => {\n      if (!amountA || !reserveA || !reserveB) {\n        throw new Error(\"Amount A, Reserve A, and Reserve B are required\");\n      }\n\n      let amountB: bigint;\n\n      if (useClientSide || !routerAddress) {\n        // Use client-side calculation (faster, no network call)\n        amountB = calculateQuote(amountA, reserveA, reserveB);\n      } else {\n        // Use contract call for exact router calculation\n        amountB = await getQuoteFromRouter(\n          routerAddress,\n          amountA,\n          reserveA,\n          reserveB,\n          targetChainId\n        );\n      }\n\n      const price = calculatePrice(amountA, amountB);\n      const inversePrice = price > 0 ? 1 / price : 0;\n\n      return {\n        amountB,\n        formatted: formatAmount(amountB),\n        price,\n        inversePrice,\n      };\n    },\n    enabled: Boolean(\n      amountA &&\n        reserveA &&\n        reserveB &&\n        amountA > BigInt(0) &&\n        reserveA > BigInt(0) &&\n        reserveB > BigInt(0) &&\n        enabled\n    ),\n    gcTime,\n    staleTime,\n    refetchInterval,\n    retry: 2,\n    retryDelay: (attemptIndex) => Math.min(500 * 2 ** attemptIndex, 5000),\n  });\n\n  return {\n    data,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    refetch,\n  };\n}\n","import { Token } from \"@coinbase/onchainkit/token\";\nimport { useConnex, useWallet } from \"@vechain/dapp-kit-react\";\nimport Image from \"next/image\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Tooltip } from \"react-tooltip\";\nimport { base, vechain } from \"viem/chains\";\nimport { useAccount, useBalance } from \"wagmi\";\n\nimport {\n  calculateRemoveLiquidityAmounts,\n  getLPTokenTotalSupply,\n  getVeChainTokenBalance,\n  removeVeChainLiquidity,\n} from \"@/lib/betterswap\";\nimport { B3TR, USDGLO, VECHAIN_B3TR_USDGLO_POOL } from \"@/lib/config\";\nimport { ModalContext } from \"@/lib/context\";\nimport { useUserStore } from \"@/lib/store\";\nimport { usePairReserves } from \"@/lib/usePairReserves\";\nimport { sliceAddress } from \"@/lib/utils\";\n\nimport LiquidityModal from \"./LiquidityModal\";\n\nexport default function RemoveLiquidityModal() {\n  const { address, chain } = useAccount();\n  const { openModal, closeModal } = useContext(ModalContext);\n  const { refreshVeBalance } = useUserStore();\n\n  // VeChain wallet integration\n  const { account: veAddress } = useWallet();\n  const connex = useConnex();\n\n  const [isCopiedTooltipOpen, setIsCopiedTooltipOpen] = useState(false);\n  const [lpTokenVeBalance, setLpTokenVeBalance] = useState<bigint>(BigInt(0));\n  const [totalSupply, setTotalSupply] = useState<bigint>(BigInt(0));\n  const [lpAmountToRemove, setLpAmountToRemove] = useState<string>(\"\");\n  const [percentage, setPercentage] = useState<number>(0);\n  const [isRemovingLiquidity, setIsRemovingLiquidity] = useState(false);\n\n  const isVe = !!veAddress;\n\n  // Standard EVM LP token balance\n  const { data: lpTokenBalance } = useBalance({\n    address,\n    token: VECHAIN_B3TR_USDGLO_POOL,\n    query: {\n      gcTime: 3_000,\n    },\n  });\n\n  // Fetch pair reserves\n  const { data: reserves, isLoading: reservesLoading } = usePairReserves({\n    pairAddress: VECHAIN_B3TR_USDGLO_POOL,\n    chainId: isVe ? vechain.id : chain?.id,\n    enabled: isVe || !!address,\n  });\n\n  const gloToken: Token = {\n    name: \"USDGLO\",\n    address: USDGLO,\n    symbol: \"USDGLO\",\n    decimals: 18,\n    image: \"https://app.glodollar.org/glo-logo.png\",\n    chainId: chain?.id || base.id,\n  };\n\n  const b3trToken: Token = {\n    name: \"B3TR\",\n    address: B3TR,\n    symbol: \"B3TR\",\n    decimals: 18,\n    image: \"https://vechainstats.com/assets/media/token-icon_b3tr.png?r=1.4\",\n    chainId: chain?.id || base.id,\n  };\n\n  // Fetch VeChain LP balance and total supply\n  useEffect(() => {\n    if (veAddress && isVe) {\n      const fetchVeData = async () => {\n        try {\n          const [lpBal, totalSup] = await Promise.all([\n            getVeChainTokenBalance(\n              VECHAIN_B3TR_USDGLO_POOL,\n              veAddress,\n              vechain.id\n            ),\n            getLPTokenTotalSupply(VECHAIN_B3TR_USDGLO_POOL, vechain.id),\n          ]);\n          setLpTokenVeBalance(lpBal);\n          setTotalSupply(totalSup);\n        } catch (error) {\n          console.error(\"Error fetching VeChain data:\", error);\n        }\n      };\n      fetchVeData();\n    } else if (address && !isVe) {\n      // For EVM chains, fetch total supply\n      const fetchEvmData = async () => {\n        try {\n          const totalSup = await getLPTokenTotalSupply(\n            VECHAIN_B3TR_USDGLO_POOL,\n            chain?.id || base.id\n          );\n          setTotalSupply(totalSup);\n        } catch (error) {\n          console.error(\"Error fetching EVM data:\", error);\n        }\n      };\n      fetchEvmData();\n    }\n  }, [veAddress, isVe, address, chain?.id]);\n\n  useEffect(() => {\n    if (isCopiedTooltipOpen) {\n      setTimeout(() => setIsCopiedTooltipOpen(false), 2000);\n    }\n  }, [isCopiedTooltipOpen]);\n\n  const displayAddress = isVe ? veAddress : address;\n  const currentLpBalance = isVe\n    ? lpTokenVeBalance\n    : lpTokenBalance?.value || BigInt(0);\n\n  // Format balances for display\n  const formatBalance = (balance: bigint, decimals = 18): string => {\n    return (Number(balance) / Math.pow(10, decimals)).toFixed(4);\n  };\n\n  // Calculate expected tokens to receive\n  const expectedAmounts =\n    reserves && lpAmountToRemove\n      ? calculateRemoveLiquidityAmounts(\n          BigInt(Math.floor(parseFloat(lpAmountToRemove) * 1e18)),\n          totalSupply,\n          reserves.reserve0, // USDGLO\n          reserves.reserve1 // B3TR\n        )\n      : null;\n\n  // Handle percentage input\n  const handlePercentageChange = (newPercentage: number) => {\n    setPercentage(newPercentage);\n    if (currentLpBalance > BigInt(0)) {\n      const lpAmount = (currentLpBalance * BigInt(newPercentage)) / BigInt(100);\n      setLpAmountToRemove(formatBalance(lpAmount));\n    }\n  };\n\n  // Handle direct LP amount input\n  const handleLpAmountChange = (value: string) => {\n    setLpAmountToRemove(value);\n    if (currentLpBalance > BigInt(0) && value) {\n      const lpAmountBigInt = BigInt(Math.floor(parseFloat(value) * 1e18));\n      const newPercentage =\n        Number((lpAmountBigInt * BigInt(10000)) / currentLpBalance) / 100;\n      setPercentage(Math.min(newPercentage, 100));\n    } else {\n      setPercentage(0);\n    }\n  };\n\n  const handleRemoveLiquidity = async () => {\n    if (!lpAmountToRemove || !displayAddress || isRemovingLiquidity) return;\n\n    try {\n      setIsRemovingLiquidity(true);\n      const lpAmountBigInt = BigInt(\n        Math.floor(parseFloat(lpAmountToRemove) * 1e18)\n      );\n\n      console.log(\"Removing liquidity:\", {\n        lpAmount: lpAmountToRemove,\n        percentage: percentage.toFixed(2) + \"%\",\n        expectedTokens: expectedAmounts,\n      });\n\n      if (isVe && connex && veAddress) {\n        // VeChain transaction using Connex\n        const result = await removeVeChainLiquidity(\n          connex,\n          B3TR, // tokenA\n          USDGLO, // tokenB\n          lpAmountBigInt, // liquidity amount\n          veAddress, // userAddress\n          0.5 // 0.5% slippage tolerance\n        );\n        console.log(\"Liquidity removed successfully:\", result);\n\n        refreshVeBalance();\n        //\n\n        // Clear form after successful transaction\n        setLpAmountToRemove(\"\");\n        setPercentage(0);\n      } else {\n        // EVM transaction would go here\n        console.log(\"EVM liquidity removal not implemented yet\");\n      }\n\n      // Don't autoclose modal\n      // closeModal();\n    } catch (error) {\n      console.error(\"Failed to remove liquidity:\", error);\n      // You might want to show an error toast here\n    } finally {\n      setIsRemovingLiquidity(false);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col text-pine-900 p-2\">\n      <div className=\"flex flex-row justify-between p-3\">\n        <Image\n          src=\"/arrow-right.svg\"\n          width={25}\n          height={25}\n          alt=\"arrow-right\"\n          className=\"flex w-25px max-w-25px h-25px max-h-25px scale-x-[-1] cursor-pointer -translate-x-1\"\n          onClick={() => closeModal()}\n        />\n        <Tooltip id=\"copy-deposit-tooltip\" isOpen={isCopiedTooltipOpen} />\n        <button\n          className=\"copy cursor-pointer border-2 rounded-full border-cyan-200 px-3 py-1\"\n          data-tooltip-id=\"copy-deposit-tooltip\"\n          data-tooltip-content=\"Copied!\"\n          onClick={() => {\n            navigator.clipboard.writeText(displayAddress!);\n            setIsCopiedTooltipOpen(true);\n          }}\n        >\n          🔗 {sliceAddress(displayAddress!)}\n        </button>\n        <button onClick={() => closeModal()}>\n          <Image alt=\"x\" src=\"/x.svg\" height={16} width={16} />\n        </button>\n      </div>\n\n      <section className=\"flex flex-col space-y-4 p-4\">\n        {\" \"}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-lg font-semibold\">Remove Liquidity</div>\n          <div className=\"flex bg-gray-100 rounded-lg p-1\">\n            <button\n              onClick={() => openModal(<LiquidityModal />, \"\", true)}\n              className=\"px-3 py-1 text-sm font-medium text-gray-500 hover:text-gray-700 transition-colors\"\n            >\n              Add\n            </button>\n            <button className=\"px-3 py-1 text-sm font-medium bg-white shadow-sm rounded-md text-gray-900\">\n              Remove\n            </button>\n          </div>\n        </div>\n        {/* LP Balance Display */}\n        <div className=\"bg-gray-50 rounded-lg p-4 space-y-3\">\n          <div className=\"text-sm font-medium text-gray-700\">\n            Your LP Position\n          </div>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-6 h-6 bg-gradient-to-r from-blue-500 to-green-500 rounded-full flex items-center justify-center\">\n                  <span className=\"text-xs text-white font-bold\">LP</span>\n                </div>\n                <span className=\"text-sm font-medium\">B3TR-USDGLO LP</span>\n              </div>\n              <span className=\"text-sm font-semibold text-blue-600\">\n                {formatBalance(currentLpBalance)}\n              </span>\n            </div>\n\n            {totalSupply > BigInt(0) && currentLpBalance > BigInt(0) && (\n              <div className=\"text-xs text-gray-500\">\n                Your share:{\" \"}\n                {(\n                  (Number(currentLpBalance) / Number(totalSupply)) *\n                  100\n                ).toFixed(4)}\n                % of pool\n              </div>\n            )}\n\n            {reserves && currentLpBalance > BigInt(0) && (\n              <div className=\"text-xs text-gray-600 space-y-1\">\n                <div>Pool Reserves:</div>\n                <div className=\"pl-2\">\n                  • {formatBalance(reserves.reserve1)} B3TR\n                </div>\n                <div className=\"pl-2\">\n                  • {formatBalance(reserves.reserve0)} USDGLO\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n        {/* Percentage Selection */}\n        <div className=\"space-y-4\">\n          <div className=\"text-sm font-medium text-gray-700\">\n            Amount to Remove\n          </div>\n\n          {/* Percentage Buttons */}\n          <div className=\"grid grid-cols-4 gap-2\">\n            {[25, 50, 75, 100].map((pct) => (\n              <button\n                key={pct}\n                onClick={() => handlePercentageChange(pct)}\n                className={`py-2 px-3 rounded-lg text-sm font-medium transition-colors ${\n                  percentage === pct\n                    ? \"bg-blue-600 text-white\"\n                    : \"bg-gray-100 hover:bg-gray-200 text-gray-700\"\n                }`}\n              >\n                {pct}%\n              </button>\n            ))}\n          </div>\n\n          {/* Custom Percentage Slider */}\n          <div className=\"space-y-2\">\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              step=\"1\"\n              value={percentage}\n              onChange={(e) => handlePercentageChange(Number(e.target.value))}\n              className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n            />\n            <div className=\"flex justify-between text-xs text-gray-500\">\n              <span>0%</span>\n              <span className=\"font-medium\">{percentage.toFixed(1)}%</span>\n              <span>100%</span>\n            </div>\n          </div>\n\n          {/* Direct LP Amount Input */}\n          <div className=\"border border-gray-200 rounded-lg p-4\">\n            <div className=\"flex justify-between items-center mb-2\">\n              <label className=\"text-sm font-medium text-gray-700\">\n                LP Tokens to Remove\n              </label>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"flex items-center space-x-2 bg-gray-50 rounded-lg px-3 py-2\">\n                <div className=\"w-6 h-6 bg-gradient-to-r from-blue-500 to-green-500 rounded-full flex items-center justify-center\">\n                  <span className=\"text-xs text-white font-bold\">LP</span>\n                </div>\n                <span className=\"font-medium\">LP</span>\n              </div>\n              <input\n                type=\"number\"\n                placeholder=\"0.00\"\n                value={lpAmountToRemove}\n                onChange={(e) => handleLpAmountChange(e.target.value)}\n                className=\"flex-1 text-right text-lg font-semibold bg-transparent border-none outline-none\"\n                step=\"any\"\n                max={formatBalance(currentLpBalance)}\n              />\n            </div>\n          </div>\n        </div>\n        {/* Expected Output */}\n        {expectedAmounts && lpAmountToRemove && (\n          <div className=\"bg-blue-50 rounded-lg p-4 space-y-3\">\n            <div className=\"text-sm font-medium text-blue-900\">\n              You will receive (estimated)\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <img\n                    src={b3trToken.image || \"\"}\n                    alt=\"B3TR\"\n                    className=\"w-5 h-5 rounded-full\"\n                  />\n                  <span className=\"text-sm font-medium\">B3TR</span>\n                </div>\n                <span className=\"text-sm font-semibold\">\n                  {formatBalance(expectedAmounts.amount1)}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <img\n                    src={gloToken.image || \"\"}\n                    alt=\"USDGLO\"\n                    className=\"w-5 h-5 rounded-full\"\n                  />\n                  <span className=\"text-sm font-medium\">USDGLO</span>\n                </div>\n                <span className=\"text-sm font-semibold\">\n                  {formatBalance(expectedAmounts.amount0)}\n                </span>\n              </div>\n            </div>\n            <div className=\"text-xs text-blue-700 pt-2 border-t border-blue-200\">\n              Removing {expectedAmounts.percentage.toFixed(4)}% of your\n              liquidity position\n            </div>\n          </div>\n        )}\n        <button\n          className={`py-3 px-6 rounded-lg font-medium mt-4 transition-colors ${\n            lpAmountToRemove &&\n            !reservesLoading &&\n            !isRemovingLiquidity &&\n            currentLpBalance > BigInt(0) &&\n            displayAddress\n              ? \"bg-red-600 hover:bg-red-700 text-white\"\n              : \"bg-gray-300 text-gray-500 cursor-not-allowed\"\n          }`}\n          onClick={handleRemoveLiquidity}\n          disabled={\n            !lpAmountToRemove ||\n            reservesLoading ||\n            isRemovingLiquidity ||\n            currentLpBalance === BigInt(0) ||\n            !displayAddress\n          }\n        >\n          {reservesLoading\n            ? \"Loading...\"\n            : isRemovingLiquidity\n            ? \"Removing Liquidity...\"\n            : \"Remove Liquidity\"}\n        </button>\n        {currentLpBalance === BigInt(0) && (\n          <div className=\"text-center text-gray-500 text-sm py-4\">\n            You don&apos;t have any LP tokens to remove\n          </div>\n        )}\n      </section>\n    </div>\n  );\n}\n","import { Token } from \"@coinbase/onchainkit/token\";\nimport { useConnex, useWallet } from \"@vechain/dapp-kit-react\";\nimport Image from \"next/image\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Tooltip } from \"react-tooltip\";\nimport { base, vechain } from \"viem/chains\";\nimport { useAccount, useBalance } from \"wagmi\";\n\nimport { addVeChainLiquidity, getVeChainTokenBalance } from \"@/lib/betterswap\";\nimport {\n  B3TR,\n  token0,\n  token1,\n  USDGLO,\n  VECHAIN_B3TR_USDGLO_POOL,\n} from \"@/lib/config\";\nimport { ModalContext } from \"@/lib/context\";\nimport { useUserStore } from \"@/lib/store\";\nimport { usePairReserves } from \"@/lib/usePairReserves\";\nimport { useQuote } from \"@/lib/useQuote\";\nimport { api, sliceAddress } from \"@/lib/utils\";\n\nimport RemoveLiquidityModal from \"./RemoveLiquidityModal\";\n\nexport default function LiquidityModal() {\n  const { address, chain } = useAccount();\n  const { openModal, closeModal } = useContext(ModalContext);\n  const { ctas, setCTAs, refreshVeBalance } = useUserStore();\n\n  // VeChain wallet integration\n  const { account: veAddress } = useWallet();\n  const connex = useConnex();\n\n  const [isCopiedTooltipOpen, setIsCopiedTooltipOpen] = useState(false);\n  const [b3trVeBalance, setB3trVeBalance] = useState<bigint>(BigInt(0));\n  const [usdgloVeBalance, setUsdgloVeBalance] = useState<bigint>(BigInt(0));\n  const [lpTokenVeBalance, setLpTokenVeBalance] = useState<bigint>(BigInt(0));\n\n  // Liquidity form state\n  const [b3trAmount, setB3trAmount] = useState<string>(\"\");\n  const [usdgloAmount, setUsdgloAmount] = useState<string>(\"\");\n  const [isB3trInput, setIsB3trInput] = useState(true); // Track which input was last modified\n  const [isAddingLiquidity, setIsAddingLiquidity] = useState(false);\n\n  const isVe = !!veAddress;\n\n  // Standard EVM balances\n  const { data: b3trBalance } = useBalance({\n    address,\n    token: B3TR,\n    query: {\n      gcTime: 3_000,\n    },\n  });\n\n  const { data: usdgloBalance } = useBalance({\n    address,\n    token: USDGLO,\n    query: {\n      gcTime: 3_000,\n    },\n  });\n\n  const { data: lpTokenBalance } = useBalance({\n    address,\n    token: VECHAIN_B3TR_USDGLO_POOL,\n    query: {\n      gcTime: 3_000,\n    },\n  });\n\n  // Fetch pair reserves\n  const { data: reserves, isLoading: reservesLoading } = usePairReserves({\n    pairAddress: VECHAIN_B3TR_USDGLO_POOL,\n    chainId: isVe ? vechain.id : chain?.id,\n    enabled: isVe || !!address,\n  });\n\n  // Parse input amounts to BigInt\n  const b3trAmountBigInt = b3trAmount\n    ? BigInt(Math.floor(parseFloat(b3trAmount) * 1e18))\n    : BigInt(0);\n  const usdgloAmountBigInt = usdgloAmount\n    ? BigInt(Math.floor(parseFloat(usdgloAmount) * 1e18))\n    : BigInt(0);\n\n  // Quote calculation for B3TR -> USDGLO (when B3TR is input)\n  const { data: usdgloQuote, isLoading: usdgloQuoteLoading } = useQuote({\n    amountA: b3trAmountBigInt,\n    reserveA: reserves\n      ? B3TR === token1\n        ? reserves.reserve1\n        : reserves.reserve0\n      : undefined,\n    reserveB: reserves\n      ? USDGLO === token0\n        ? reserves.reserve0\n        : reserves.reserve1\n      : undefined,\n    chainId: isVe ? vechain.id : chain?.id,\n    enabled: Boolean(\n      b3trAmount && reserves && isB3trInput && b3trAmountBigInt > BigInt(0)\n    ),\n    useClientSide: true,\n  });\n\n  // Quote calculation for USDGLO -> B3TR (when USDGLO is input)\n  const { data: b3trQuote, isLoading: b3trQuoteLoading } = useQuote({\n    amountA: usdgloAmountBigInt,\n    reserveA: reserves\n      ? USDGLO === token0\n        ? reserves.reserve0\n        : reserves.reserve1\n      : undefined,\n    reserveB: reserves\n      ? B3TR === token1\n        ? reserves.reserve1\n        : reserves.reserve0\n      : undefined,\n    chainId: isVe ? vechain.id : chain?.id,\n    enabled: Boolean(\n      usdgloAmount && reserves && !isB3trInput && usdgloAmountBigInt > BigInt(0)\n    ),\n    useClientSide: true,\n  });\n\n  const gloToken: Token = {\n    name: \"USDGLO\",\n    address: USDGLO,\n    symbol: \"USDGLO\",\n    decimals: 18,\n    image: \"https://app.glodollar.org/glo-logo.png\",\n    chainId: chain?.id || base.id,\n  };\n\n  const b3trToken: Token = {\n    name: \"B3TR\",\n    address: B3TR,\n    symbol: \"B3TR\",\n    decimals: 18,\n    image: \"https://vechainstats.com/assets/media/token-icon_b3tr.png?r=1.4\",\n    chainId: chain?.id || base.id,\n  };\n\n  // Fetch VeChain balances\n  useEffect(() => {\n    if (veAddress && isVe) {\n      const fetchVeBalances = async () => {\n        try {\n          const [b3trBal, usdgloBal, lpBal] = await Promise.all([\n            getVeChainTokenBalance(B3TR, veAddress, vechain.id),\n            getVeChainTokenBalance(USDGLO, veAddress, vechain.id),\n            getVeChainTokenBalance(\n              VECHAIN_B3TR_USDGLO_POOL,\n              veAddress,\n              vechain.id\n            ),\n          ]);\n          setB3trVeBalance(b3trBal);\n          setUsdgloVeBalance(usdgloBal);\n          setLpTokenVeBalance(lpBal);\n        } catch (error) {\n          console.error(\"Error fetching VeChain balances:\", error);\n        }\n      };\n      fetchVeBalances();\n    } else if (address && !isVe) {\n      // For EVM chains, we would fetch LP balance differently\n      // For now, just set to 0 since we're focusing on VeChain\n      setLpTokenVeBalance(BigInt(0));\n    }\n  }, [veAddress, isVe, address]);\n\n  // Update calculated amounts when quotes change\n  useEffect(() => {\n    if (isB3trInput && usdgloQuote) {\n      setUsdgloAmount(usdgloQuote.formatted);\n    }\n  }, [usdgloQuote, isB3trInput]);\n\n  useEffect(() => {\n    if (!isB3trInput && b3trQuote) {\n      setB3trAmount(b3trQuote.formatted);\n    }\n  }, [b3trQuote, isB3trInput]);\n\n  useEffect(() => {\n    if (isCopiedTooltipOpen) {\n      setTimeout(() => setIsCopiedTooltipOpen(false), 2000);\n    }\n  }, [isCopiedTooltipOpen]);\n\n  // Format balances for display\n  const formatBalance = (balance: bigint, decimals = 18): string => {\n    return (Number(balance) / Math.pow(10, decimals)).toFixed(4);\n  };\n\n  const displayAddress = isVe ? veAddress : address;\n\n  // Input handlers\n  const handleB3trAmountChange = (value: string) => {\n    setB3trAmount(value);\n    setIsB3trInput(true);\n    if (!value || value === \"0\") {\n      setUsdgloAmount(\"\");\n    }\n  };\n\n  const handleUsdgloAmountChange = (value: string) => {\n    setUsdgloAmount(value);\n    setIsB3trInput(false);\n    if (!value || value === \"0\") {\n      setB3trAmount(\"\");\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col text-pine-900 p-2\">\n      <div className=\"flex flex-row justify-between p-3\">\n        <Image\n          src=\"/arrow-right.svg\"\n          width={25}\n          height={25}\n          alt=\"arrow-right\"\n          className=\"flex w-25px max-w-25px h-25px max-h-25px scale-x-[-1] cursor-pointer -translate-x-1\"\n          onClick={() => closeModal()}\n        />\n        <Tooltip id=\"copy-deposit-tooltip\" isOpen={isCopiedTooltipOpen} />\n        <button\n          className=\"copy cursor-pointer border-2 rounded-full border-cyan-200 px-3 py-1\"\n          data-tooltip-id=\"copy-deposit-tooltip\"\n          data-tooltip-content=\"Copied!\"\n          onClick={() => {\n            navigator.clipboard.writeText(displayAddress!);\n            setIsCopiedTooltipOpen(true);\n          }}\n        >\n          🔗 {sliceAddress(displayAddress!)}\n        </button>\n        <button onClick={() => closeModal()}>\n          <Image alt=\"x\" src=\"/x.svg\" height={16} width={16} />\n        </button>\n      </div>\n\n      <section className=\"flex flex-col space-y-4 p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-lg font-semibold\">Manage Liquidity</div>\n          <div className=\"flex bg-gray-100 rounded-lg p-1\">\n            <button className=\"px-3 py-1 text-sm font-medium bg-white shadow-sm rounded-md text-gray-900\">\n              Add\n            </button>\n            <button\n              onClick={() => openModal(<RemoveLiquidityModal />, \"\", true)}\n              className=\"px-3 py-1 text-sm font-medium text-gray-500 hover:text-gray-700 transition-colors\"\n            >\n              Remove\n            </button>\n          </div>\n        </div>\n\n        {/* Balance Display */}\n        <div className=\"bg-gray-50 rounded-lg p-4 space-y-3\">\n          <div className=\"text-sm font-medium text-gray-700\">Your Balances</div>\n          <div className=\"space-y-3\">\n            {/* Token Balances */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <img\n                    src={b3trToken.image || \"\"}\n                    alt=\"B3TR\"\n                    className=\"w-6 h-6 rounded-full\"\n                  />\n                  <span className=\"text-sm font-medium\">B3TR</span>\n                </div>\n                <span className=\"text-sm\">\n                  {isVe\n                    ? formatBalance(b3trVeBalance)\n                    : formatBalance(b3trBalance?.value || BigInt(0))}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <img\n                    src={gloToken.image || \"\"}\n                    alt=\"USDGLO\"\n                    className=\"w-6 h-6 rounded-full\"\n                  />\n                  <span className=\"text-sm font-medium\">USDGLO</span>\n                </div>\n                <span className=\"text-sm\">\n                  {isVe\n                    ? formatBalance(usdgloVeBalance)\n                    : formatBalance(usdgloBalance?.value || BigInt(0))}\n                </span>\n              </div>\n            </div>\n\n            {/* LP Token Balance */}\n            <div className=\"border-t pt-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-6 h-6 bg-gradient-to-r from-blue-500 to-green-500 rounded-full flex items-center justify-center\">\n                    <span className=\"text-xs text-white font-bold\">LP</span>\n                  </div>\n                  <span className=\"text-sm font-medium\">B3TR-USDGLO LP</span>\n                </div>\n                <span className=\"text-sm font-semibold text-blue-600\">\n                  {isVe\n                    ? formatBalance(lpTokenVeBalance)\n                    : formatBalance(lpTokenBalance?.value || BigInt(0))}\n                </span>\n              </div>\n              {((isVe && lpTokenVeBalance > BigInt(0)) ||\n                (!isVe &&\n                  lpTokenBalance?.value &&\n                  lpTokenBalance.value > BigInt(0))) && (\n                <div className=\"flex items-center justify-between mt-2\">\n                  <div className=\"text-xs text-gray-500\">\n                    You have liquidity in this pool\n                  </div>\n                  <button\n                    onClick={() =>\n                      openModal(<RemoveLiquidityModal />, \"\", true)\n                    }\n                    className=\"text-xs bg-red-100 hover:bg-red-200 text-red-700 px-2 py-1 rounded-md transition-colors\"\n                  >\n                    Remove\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Custom Liquidity Input Form */}\n        <div className=\"space-y-4\">\n          {/* B3TR Input */}\n          <div className=\"border border-gray-200 rounded-lg p-4\">\n            <div className=\"flex justify-between items-center mb-2\">\n              <label className=\"text-sm font-medium text-gray-700\">\n                Token A\n              </label>\n              <span className=\"text-xs text-gray-500\">\n                Balance:{\" \"}\n                {isVe\n                  ? formatBalance(b3trVeBalance)\n                  : formatBalance(b3trBalance?.value || BigInt(0))}\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"flex items-center space-x-2 bg-gray-50 rounded-lg px-3 py-2\">\n                <img\n                  src={b3trToken.image || \"\"}\n                  alt=\"B3TR\"\n                  className=\"w-6 h-6 rounded-full\"\n                />\n                <span className=\"font-medium\">B3TR</span>\n              </div>\n              <input\n                type=\"number\"\n                placeholder=\"0.00\"\n                value={b3trAmount}\n                onChange={(e) => handleB3trAmountChange(e.target.value)}\n                className=\"flex-1 text-right text-lg font-semibold bg-transparent border-none outline-none\"\n                step=\"any\"\n              />\n            </div>\n            {isB3trInput && usdgloQuoteLoading && (\n              <div className=\"text-xs text-blue-500 mt-1\">\n                Calculating quote...\n              </div>\n            )}\n          </div>\n\n          {/* Plus Icon */}\n          <div className=\"flex justify-center\">\n            <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n              <span className=\"text-blue-600 font-bold\">+</span>\n            </div>\n          </div>\n\n          {/* USDGLO Input */}\n          <div className=\"border border-gray-200 rounded-lg p-4\">\n            <div className=\"flex justify-between items-center mb-2\">\n              <label className=\"text-sm font-medium text-gray-700\">\n                Token B\n              </label>\n              <span className=\"text-xs text-gray-500\">\n                Balance:{\" \"}\n                {isVe\n                  ? formatBalance(usdgloVeBalance)\n                  : formatBalance(usdgloBalance?.value || BigInt(0))}\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"flex items-center space-x-2 bg-gray-50 rounded-lg px-3 py-2\">\n                <img\n                  src={gloToken.image || \"\"}\n                  alt=\"USDGLO\"\n                  className=\"w-6 h-6 rounded-full\"\n                />\n                <span className=\"font-medium\">USDGLO</span>\n              </div>\n              <input\n                type=\"number\"\n                placeholder=\"0.00\"\n                value={usdgloAmount}\n                onChange={(e) => handleUsdgloAmountChange(e.target.value)}\n                className=\"flex-1 text-right text-lg font-semibold bg-transparent border-none outline-none\"\n                step=\"any\"\n              />\n            </div>\n            {!isB3trInput && b3trQuoteLoading && (\n              <div className=\"text-xs text-blue-500 mt-1\">\n                Calculating quote...\n              </div>\n            )}\n          </div>\n\n          {/* Price Information */}\n          {reserves && (b3trAmount || usdgloAmount) && (\n            <div className=\"bg-blue-50 rounded-lg p-3 space-y-2\">\n              <div className=\"text-sm font-medium text-blue-900\">\n                Pool Information\n              </div>\n              <div className=\"text-xs text-blue-700 space-y-1\">\n                <div>\n                  Pool Reserves: {formatBalance(reserves.reserve1)} B3TR,{\" \"}\n                  {formatBalance(reserves.reserve0)} USDGLO\n                </div>\n                {(usdgloQuote || b3trQuote) && (\n                  <div>\n                    Exchange Rate: 1 {isB3trInput ? \"B3TR\" : \"USDGLO\"} ={\" \"}\n                    {isB3trInput\n                      ? usdgloQuote?.price.toFixed(6)\n                      : b3trQuote?.inversePrice.toFixed(6)}{\" \"}\n                    {isB3trInput ? \"USDGLO\" : \"B3TR\"}\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n\n        <button\n          className={`py-3 px-6 rounded-lg font-medium mt-4 transition-colors ${\n            b3trAmount &&\n            usdgloAmount &&\n            !reservesLoading &&\n            !isAddingLiquidity &&\n            (isVe ? veAddress : address)\n              ? \"bg-cyan-600 hover:bg-cyan-700 text-white\"\n              : \"bg-gray-300 text-gray-500 cursor-not-allowed\"\n          }`}\n          onClick={async () => {\n            if (\n              b3trAmount &&\n              usdgloAmount &&\n              (isVe ? veAddress : address) &&\n              !isAddingLiquidity\n            ) {\n              try {\n                setIsAddingLiquidity(true);\n                console.log(\"Adding liquidity:\", {\n                  b3trAmount,\n                  usdgloAmount,\n                });\n\n                if (isVe && connex && veAddress) {\n                  // VeChain transaction using Connex\n                  const result = await addVeChainLiquidity(\n                    connex,\n                    B3TR, // tokenA\n                    USDGLO, // tokenB\n                    b3trAmountBigInt, // amountADesired\n                    usdgloAmountBigInt, // amountBDesired\n                    veAddress, // userAddress\n                    0.5 // 0.5% slippage tolerance\n                  );\n                  console.log(\"Liquidity added successfully:\", result);\n\n                  // Clear form after successful transaction\n                  setB3trAmount(\"\");\n                  setUsdgloAmount(\"\");\n\n                  await api().post<string>(\"/betterswap/liquidity-added\");\n\n                  refreshVeBalance();\n                  setCTAs(\n                    ctas.map((cta) =>\n                      cta.type === \"ADD_BETTERSWAP_LIQUIDITY\"\n                        ? { ...cta, isCompleted: true }\n                        : cta\n                    )\n                  );\n                } else {\n                  // EVM transaction would go here\n                  console.log(\"EVM liquidity addition not implemented yet\");\n                }\n\n                // Don't autoclose modal\n                // closeModal();\n              } catch (error) {\n                console.error(\"Failed to add liquidity:\", error);\n                // You might want to show an error toast here\n              } finally {\n                setIsAddingLiquidity(false);\n              }\n            }\n          }}\n          disabled={\n            !b3trAmount ||\n            !usdgloAmount ||\n            reservesLoading ||\n            isAddingLiquidity ||\n            !(isVe ? veAddress : address)\n          }\n        >\n          {reservesLoading\n            ? \"Loading...\"\n            : isAddingLiquidity\n            ? \"Adding Liquidity...\"\n            : \"Add Liquidity\"}\n        </button>\n      </section>\n    </div>\n  );\n}\n","import { SwapDefault } from \"@coinbase/onchainkit/swap\";\nimport { Token } from \"@coinbase/onchainkit/token\";\nimport { useWallet } from \"@vechain/dapp-kit-react\";\nimport Image from \"next/image\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Tooltip } from \"react-tooltip\";\nimport { base, baseSepolia, celo, celoAlfajores } from \"viem/chains\";\nimport { useAccount, useBalance } from \"wagmi\";\n\nimport { getCoinbaseSessionToken } from \"@/fetchers\";\nimport { chainConfig, getSmartContractAddress } from \"@/lib/config\";\nimport { ModalContext } from \"@/lib/context\";\nimport { sliceAddress } from \"@/lib/utils\";\nimport { sellWithBetterSwap } from \"@/payments\";\nimport {\n  getCoinbaseOffRampUrl,\n  getUSDCContractAddress,\n  POPUP_PROPS,\n} from \"@/utils\";\n\nimport SquidModal from \"./SquidModal\";\nimport StepCard from \"./StepCard\";\n\ninterface Props {\n  sellAmount: number;\n}\n\nexport default function SellModal({ sellAmount }: Props) {\n  const { address: wagmiAddress, chain, connector } = useAccount();\n  const { openModal, closeModal } = useContext(ModalContext);\n\n  const [isCopiedTooltipOpen, setIsCopiedTooltipOpen] = useState(false);\n  const [isSwapForm, setIsSwapForm] = useState(false);\n\n  const isBase = base.id === chain?.id || baseSepolia.id === chain?.id;\n  const isCelo = celo.id === chain?.id || celoAlfajores.id === chain?.id;\n\n  const isCoinbaseWallet = connector?.id === \"coinbaseWalletSDK\";\n  const isSequenceWallet = connector?.id === \"sequence\";\n\n  const forceBaseTarget = isCoinbaseWallet && isCelo;\n\n  const { account: veAccount } = useWallet();\n  const address = wagmiAddress || (veAccount as `0x${string}` | undefined);\n  const isVe = !!veAccount;\n\n  const { data: usdcBalance } = useBalance({\n    address,\n    token: getUSDCContractAddress(chain!),\n    query: {\n      gcTime: 3_000,\n    },\n  });\n\n  const gloToken: Token = {\n    name: \"USDGLO\",\n    address: getSmartContractAddress(chain?.id || base.id),\n    symbol: \"USDGLO\",\n    decimals: 18,\n    image: \"https://app.glodollar.org/glo-logo.png\",\n    chainId: chain?.id || base.id,\n  };\n\n  const usdcToken: Token = {\n    name: \"USDC\",\n    address: getUSDCContractAddress(chain || base),\n    symbol: \"USDC\",\n    decimals: 6,\n    image:\n      \"https://d3r81g40ycuhqg.cloudfront.net/wallet/wais/44/2b/442b80bd16af0c0d9b22e03a16753823fe826e5bfd457292b55fa0ba8c1ba213-ZWUzYjJmZGUtMDYxNy00NDcyLTg0NjQtMWI4OGEwYjBiODE2\",\n    chainId: chain?.id || base.id,\n  };\n\n  useEffect(() => {\n    if (isCopiedTooltipOpen) {\n      setTimeout(() => setIsCopiedTooltipOpen(false), 2000);\n    }\n  }, [isCopiedTooltipOpen]);\n\n  const back = () => (isSwapForm ? setIsSwapForm(false) : closeModal());\n\n  const SquidStep = () => (\n    <StepCard\n      iconPath=\"/squidrouter.svg\"\n      title={`Swap ${sellAmount} USDGLO to USDC`}\n      content=\"Powered by Squid Router\"\n      action={() => openModal(<SquidModal buyAmount={-sellAmount} />)}\n    />\n  );\n\n  const usdc = Math.floor(parseFloat(usdcBalance?.formatted || \"0\"));\n\n  const SequenceSwap = () => (\n    <section>\n      <StepCard\n        index={1}\n        iconPath=\"/sequence.svg\"\n        title={`Swap ${sellAmount} Glo Dollars on Sequence`}\n        content={`Swap ${sellAmount} Glo Dollars to ${sellAmount} USDC`}\n        action={() => {\n          if (chain) {\n            const url = `https://sequence.app/wallet/swap?chainId=${\n              chain.id\n            }&to=${getUSDCContractAddress(chain)}&from=${\n              chainConfig[chain.id]\n            }`;\n            window.open(url, \"_blank\");\n          }\n        }}\n        done={usdc >= sellAmount}\n        USDC={usdcBalance?.formatted}\n      />\n      <OfframpStep />\n    </section>\n  );\n  const OfframpStep = () => (\n    <StepCard\n      index={2}\n      iconPath=\"/coinbase-invert.svg\"\n      title={`Sell ${usdc} USDC on Coinbase`}\n      content=\"Withdraws to the connected wallet address\"\n      action={async () => {\n        const sessionToken = await getCoinbaseSessionToken(chain);\n        window.open(\n          getCoinbaseOffRampUrl(\n            address!,\n            usdc,\n            `${window.location.origin}/purchased-coinbase`,\n            sessionToken\n          ),\n          \"_blank\",\n          POPUP_PROPS\n        );\n      }}\n    />\n  );\n\n  const CoinbaseSwap = () =>\n    isSwapForm ? (\n      <section className=\"flex\">\n        <SwapDefault\n          from={[gloToken]}\n          to={[usdcToken]}\n          onSuccess={() => closeModal()}\n        />\n      </section>\n    ) : (\n      <section>\n        {isBase ? (\n          <StepCard\n            index={1}\n            iconPath=\"/coinbase-invert.svg\"\n            title={`Swap ${sellAmount} USDGLO to USDC`}\n            content={\"Swap with Coinbase\"}\n            action={() => setIsSwapForm(true)}\n            done={usdc >= sellAmount}\n            USDC={usdcBalance?.formatted}\n          />\n        ) : (\n          <StepCard\n            index={1}\n            iconPath=\"/squidrouter.svg\"\n            title={\n              forceBaseTarget\n                ? `Swap ${sellAmount} USDGLO (Celo) to USDC (Base)`\n                : `Swap ${sellAmount} USDGLO to USDC`\n            }\n            content=\"Powered by Squid Router\"\n            action={() =>\n              openModal(\n                <SquidModal\n                  buyAmount={-sellAmount}\n                  usdcChain={forceBaseTarget ? base : undefined}\n                />\n              )\n            }\n            done={usdc >= sellAmount}\n            USDC={usdcBalance?.formatted}\n          />\n        )}\n        <OfframpStep />\n      </section>\n    );\n\n  return (\n    <div className=\"flex flex-col text-pine-900 p-2\">\n      <div className=\"flex flex-row justify-between p-3\">\n        <Image\n          src=\"/arrow-right.svg\"\n          width={25}\n          height={25}\n          alt=\"arrow-right\"\n          className=\"flex w-25px max-w-25px h-25px max-h-25px scale-x-[-1] cursor-pointer -translate-x-1\"\n          onClick={() => back()}\n        />\n        <Tooltip id=\"copy-deposit-tooltip\" isOpen={isCopiedTooltipOpen} />\n        <button\n          className=\"copy cursor-pointer border-2 rounded-full border-cyan-200 px-3 py-1\"\n          data-tooltip-id=\"copy-deposit-tooltip\"\n          data-tooltip-content=\"Copied!\"\n          onClick={() => {\n            navigator.clipboard.writeText(address!);\n            setIsCopiedTooltipOpen(true);\n          }}\n        >\n          🔗 {sliceAddress(address!)}\n        </button>\n        <button onClick={() => back()}>\n          <Image alt=\"x\" src=\"/x.svg\" height={16} width={16} />\n        </button>\n      </div>\n      {isVe ? (\n        <section className=\"w-[300px]\">\n          <StepCard\n            iconPath=\"/betterswap.png\"\n            blackBg\n            title=\"Swap USDGLO to VET\"\n            content=\"Powered by Betterswap\"\n            action={() => sellWithBetterSwap(sellAmount)}\n          />\n        </section>\n      ) : isCoinbaseWallet ? (\n        <CoinbaseSwap />\n      ) : isSequenceWallet ? (\n        <SequenceSwap />\n      ) : (\n        <section>\n          <StepCard\n            iconPath=\"/peanut.png\"\n            title=\"Withdraw to bank account in EU or USA\"\n            content=\"Powered by Peanut Protocol\"\n            action={() => window.open(\"https://peanut.to/cashout\", \"_blank\")}\n          />\n          <StepCard\n            iconPath=\"/offramp.svg\"\n            title=\"Pay with debit card in 160+ countries\"\n            content=\"Powered by Offramp.xyz\"\n            action={() => window.open(\"https://app.offramp.xyz\", \"_blank\")}\n          />\n          <SquidStep />\n        </section>\n      )}\n    </div>\n  );\n}\n","import { GetBalanceReturnType } from \"@wagmi/core\";\nimport clsx from \"clsx\";\nimport Image from \"next/image\";\nimport { useContext, useState } from \"react\";\n\nimport { ModalContext } from \"@/lib/context\";\nimport { customFormatBalance } from \"@/utils\";\n\nimport CharitySelector from \"./CharitySelector\";\nimport ImpactInset from \"./ImpactInset\";\nimport BuyGloModal from \"./Modals/BuyGloModal\";\nimport LiquidityModal from \"./Modals/LiquidityModal\";\nimport SellModal from \"./Modals/SellModal\";\nimport SwapGate from \"./Modals/SwapGate\";\n\ntype Props = {\n  polygonBalance: GetBalanceReturnType | undefined;\n  ethereumBalance: GetBalanceReturnType | undefined;\n  celoBalance: GetBalanceReturnType | undefined;\n  optimismBalance: GetBalanceReturnType | undefined;\n  arbitrumBalance: GetBalanceReturnType | undefined;\n  totalBalance: GetBalanceReturnType | undefined;\n  usdcBalance: GetBalanceReturnType | undefined;\n  stellarBalance: GetBalanceReturnType | undefined;\n  baseBalance: GetBalanceReturnType | undefined;\n  veBalance: GetBalanceReturnType | undefined;\n  stellarConnected: boolean;\n  veConnected: boolean;\n};\n\nexport default function Balance({\n  polygonBalance,\n  ethereumBalance,\n  celoBalance,\n  optimismBalance,\n  arbitrumBalance,\n  totalBalance,\n  usdcBalance,\n  baseBalance,\n  stellarConnected,\n  veConnected,\n}: Props) {\n  const { openModal } = useContext(ModalContext);\n\n  const [showBalanceDropdown, setShowBalanceDropdown] = useState(false);\n\n  const polygonBalanceFormatted = customFormatBalance(polygonBalance);\n  const ethereumBalanceFormatted = customFormatBalance(ethereumBalance);\n  const celoBalanceFormatted = customFormatBalance(celoBalance);\n  const optimismBalanceFormatted = customFormatBalance(optimismBalance);\n  const arbitrumBalanceFormatted = customFormatBalance(arbitrumBalance);\n  const totalBalanceFormatted = customFormatBalance(totalBalance);\n  const baseBalanceformatted = customFormatBalance(baseBalance);\n  const hasGlo = totalBalance && totalBalance.value > 0;\n\n  const formattedUSDC = Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    maximumFractionDigits: 0,\n  }).format(Math.floor(Number(usdcBalance?.formatted)));\n\n  const supportedChains = [\n    {\n      name: \"Ethereum\",\n      logo: \"/ethereum-square-logo.svg\",\n      balance: ethereumBalanceFormatted,\n    },\n    {\n      name: \"Polygon\",\n      logo: \"/polygon-matic-logo.svg\",\n      balance: polygonBalanceFormatted,\n    },\n    {\n      name: \"Celo\",\n      logo: \"/celo-square-logo.svg\",\n      balance: celoBalanceFormatted,\n    },\n    {\n      name: \"Optimism\",\n      logo: \"/optimism-logo.svg\",\n      balance: optimismBalanceFormatted,\n    },\n    {\n      name: \"Arbitrum\",\n      logo: \"/arbitrum-logo.svg\",\n      balance: arbitrumBalanceFormatted,\n    },\n    {\n      name: \"Base\",\n      logo: \"/base-logo.svg\",\n      balance: baseBalanceformatted,\n    },\n  ];\n\n  const canSell = hasGlo && !stellarConnected;\n  const canAdd = veConnected;\n  const buyOnly = !canAdd && !canSell;\n\n  return (\n    <div className=\"bg-white rounded-[20px] pt-4\">\n      <div className=\"flex flex-col space-y-2 p-4\">\n        <div className=\"self-center text-sm text-pine-700/90 mb-1.5\">\n          You own\n        </div>\n        <div\n          className={`flex flex-row font-semibold justify-center ${\n            veConnected || stellarConnected ? \"\" : \"cursor-pointer\"\n          }`}\n          onClick={() => {\n            veConnected || stellarConnected\n              ? null\n              : setShowBalanceDropdown(!showBalanceDropdown);\n          }}\n        >\n          <div className=\"flex flex-col justify-center items-center relative z-1\">\n            <div className=\"flex flex-row text-[2.625rem] items-baseline\">\n              <div className=\"max-w-[226px]\">\n                ${totalBalanceFormatted.fmtBalanceDollarPart}\n              </div>\n              <div className=\"text-xl\">\n                .{totalBalanceFormatted.fmtBalanceCentPart || \"00\"}\n              </div>\n            </div>\n            {showBalanceDropdown && (\n              <div className=\"absolute top-10 z-10 mt-1 w-[280px] h-[220px] bg-white border-2 border-pine-400/90 rounded-lg\">\n                <div className=\"h-4 w-4 bg-white border-white border-t-pine-400/90 border-r-pine-400/90 border-2 -rotate-45 transform origin-top-left translate-x-32\"></div>\n\n                <div className=\"flex flex-col justify-center items-center\">\n                  {supportedChains.map((chain) => (\n                    <div\n                      key={chain.name}\n                      className=\"flex flex-row align-middle text-[2.625rem] items-center justify-between w-[200px] mb-2\"\n                    >\n                      <div className=\"text-sm text-pine-700/90 mb-1.5 w-1/6\">\n                        <Image\n                          alt={`${chain.name} logo`}\n                          src={chain.logo}\n                          width={20}\n                          height={20}\n                        />\n                      </div>\n                      <div className=\"text-sm text-pine-700/90 mb-1.5 w-1/3\">\n                        {chain.name}\n                      </div>\n                      <div className=\"text-sm text-pine-700/90 mb-1.5 w-1/2 text-right\">\n                        ${chain.balance.dblFmtBalance}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n        {usdcBalance && usdcBalance.value > 1000000 && (\n          <a\n            className=\"text-pine-700 self-center\"\n            onClick={() => {\n              openModal(<SwapGate buyAmount={1000} />);\n            }}\n          >\n            <span className=\"black-link\">{formattedUSDC} USDC</span>{\" \"}\n            <span className=\"invisible-link\">swappable for Glo Dollar</span>\n          </a>\n        )}\n      </div>\n\n      <div className=\"flex flex-col\">\n        <div className=\"self-center text-sm text-pine-700/90 mb-1.5\">\n          Generating up to\n        </div>\n      </div>\n\n      <div className=\"flex flex-row justify-center\">\n        <ImpactInset\n          openModal={openModal}\n          yearlyYield={totalBalanceFormatted.yearlyYield}\n          yearlyYieldFormatted={totalBalanceFormatted.yearlyYieldUSFormatted}\n          totalBalance={totalBalance}\n        />\n        {hasGlo && (\n          <>\n            <div className=\"self-center text-sm text-pine-700/90 mb-1.5 mx-1\">\n              for\n            </div>\n            <CharitySelector />\n          </>\n        )}\n      </div>\n\n      <div className=\"flex flex-col\">\n        <div className=\"self-center text-sm text-pine-700/90 mb-1.5\">\n          per year\n        </div>\n      </div>\n\n      <div className=\"flex justify-center h-[60px]\">\n        <div\n          className={clsx(\n            \"flex justify-center items-center bg-impact-bg w-full rounded-bl-xl border-t-pine-900/10 border-t cursor-pointer\",\n            buyOnly && \"rounded-br-xl\"\n          )}\n          onClick={() =>\n            openModal(\n              <BuyGloModal\n                totalBalance={1000}\n                stellarConnected={stellarConnected}\n              />\n            )\n          }\n        >\n          <span className=\"font-bolder\">\n            {buyOnly ? \"Buy Glo Dollar\" : \"Buy\"}\n          </span>\n          <Image\n            className=\"ml-2\"\n            alt=\"Buy Glo\"\n            src=\"/arrow-right.svg\"\n            width={16}\n            height={16}\n          />\n        </div>\n\n        {canSell && (\n          <div\n            className={clsx(\n              \"flex justify-center items-center bg-pine-50 w-full border-t-pine-900/10 border-t cursor-pointer\",\n              !canAdd && \"rounded-br-xl\"\n            )}\n            onClick={() =>\n              openModal(<SellModal sellAmount={Number(totalBalance.value)} />)\n            }\n          >\n            <span className=\"font-bolder\">Sell</span>\n            <Image\n              className=\"ml-2\"\n              alt=\"Sell Glo\"\n              src=\"/arrow-right.svg\"\n              width={16}\n              height={16}\n            />\n          </div>\n        )}\n        {canAdd && (\n          <div\n            className=\"flex justify-center items-center bg-pine-200 w-full rounded-br-xl border-t-pine-900/10 border-t cursor-pointer\"\n            onClick={() => openModal(<LiquidityModal />, \"\", true)}\n          >\n            <span className=\"font-bolder\">Add Liquidity</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import confetti from \"canvas-confetti\";\nimport { motion, useAnimation, useInView } from \"framer-motion\";\nimport Cookies from \"js-cookie\";\nimport Image from \"next/image\";\nimport { useEffect, useRef, useState } from \"react\";\n\nconst variants = {\n  visible: {\n    pathLength: 1,\n    transition: {\n      delay: 1,\n      duration: 1.2,\n      ease: \"easeOut\",\n      type: \"tween\",\n    },\n    opacity: 1,\n    scale: [0, 1, 1.2, 1],\n  },\n  hidden: { pathLength: 0, opacity: 0 },\n};\n\nexport const CompletedIcon = ({\n  name,\n  path,\n}: {\n  name: string;\n  path: string;\n}) => {\n  const [shown, setShown] = useState(false);\n\n  const controls = useAnimation();\n  const ref = useRef(null);\n  const isInView = useInView(ref);\n\n  useEffect(() => {\n    if (isInView && !shown) {\n      setShown(true);\n      controls.start(\"visible\");\n\n      const hasBeenPlayed = Cookies.get(name);\n\n      if (!hasBeenPlayed) {\n        Cookies.set(name, \"1\");\n\n        confetti({\n          particleCount: 200,\n          spread: 70,\n          angle: 60,\n          startVelocity: 60,\n          origin: { y: 0.99, x: 0 },\n        });\n        confetti({\n          particleCount: 200,\n          spread: 70,\n          angle: 120,\n          startVelocity: 60,\n          origin: { y: 0.99, x: 1 },\n        });\n      }\n    }\n  }, [isInView]);\n\n  return (\n    <button className=\"flex border justify-center min-w-[40px] min-h-[40px] rounded-full bg-cyan-600 relative\">\n      <Image src={path} width={16} height={16} alt=\"call to action\" />\n      <Image\n        src=\"checkmark.svg\"\n        width={16}\n        height={16}\n        alt=\"call to action\"\n        className=\"absolute -top-1 -right-1\"\n      />\n    </button>\n  );\n};\n","import Image from \"next/image\";\nimport { useContext, useState, useEffect } from \"react\";\nimport { Tooltip } from \"react-tooltip\";\nimport { useAccount } from \"wagmi\";\n\nimport { ModalContext } from \"@/lib/context\";\nimport { useUserStore } from \"@/lib/store\";\nimport { api, sliceAddress } from \"@/lib/utils\";\n\nexport default function IdrissConfirmModal() {\n  const { address } = useAccount();\n  const { closeModal } = useContext(ModalContext);\n  const { setCTAs } = useUserStore();\n\n  const [isCopiedTooltipOpen, setIsCopiedTooltipOpen] = useState(false);\n  const [id, setId] = useState(\"\");\n  useEffect(() => {\n    if (isCopiedTooltipOpen) {\n      setTimeout(() => setIsCopiedTooltipOpen(false), 2000);\n    }\n  }, [isCopiedTooltipOpen]);\n\n  return (\n    <div className=\"flex flex-col max-w-[343px] text-pine-900 p-2\">\n      <div className=\"flex flex-row justify-between p-3\">\n        <Image\n          src=\"/arrow-right.svg\"\n          width={25}\n          height={25}\n          alt=\"arrow-right\"\n          className=\"flex w-25px max-w-25px h-25px max-h-25px scale-x-[-1] cursor-pointer -translate-x-1\"\n          onClick={() => closeModal()}\n        />\n        <Tooltip id=\"copy-deposit-tooltip\" isOpen={isCopiedTooltipOpen} />\n        <button\n          className=\"copy cursor-pointer border-2 rounded-full border-cyan-200 px-3 py-1\"\n          data-tooltip-id=\"copy-deposit-tooltip\"\n          data-tooltip-content=\"Copied!\"\n          onClick={() => {\n            navigator.clipboard.writeText(address!);\n            setIsCopiedTooltipOpen(true);\n          }}\n        >\n          🔗 {sliceAddress(address!)}\n        </button>\n        <button onClick={() => closeModal()}>\n          <Image alt=\"x\" src=\"/x.svg\" height={16} width={16} />\n        </button>\n      </div>\n      <section className=\"text-center\">\n        <h3 className=\"pt-0\">IDriss 🤝 Glo Dollar</h3>\n        <p className=\"text-sm py-4\">\n          Enter the IDriss email / twitter / phone number that you used during\n          IDriss registration.\n        </p>\n      </section>\n      <section>\n        <input\n          id=\"sign-in-with-email\"\n          className=\"rounded-full bg-white py-4 pl-6 pr-28 text-xl\"\n          placeholder={\"Email / Twitter / Phone\"}\n          value={id}\n          data-testid=\"submit-email-input\"\n          onChange={(e) => setId(e.target.value)}\n        />\n      </section>\n      <section className=\"mt-8 flex flex-col justify-end\">\n        <button\n          className=\"primary-button\"\n          onClick={async () => {\n            await api().get(`/idriss/confirm/${id}`);\n            api()\n              .get<CTA[]>(`/ctas`)\n              .then((res) => {\n                setCTAs(res.data);\n                closeModal();\n              });\n          }}\n        >\n          Submit\n        </button>\n      </section>\n    </div>\n  );\n}\n","import Image from \"next/image\";\nimport { useContext, useState, useEffect } from \"react\";\nimport { Tooltip } from \"react-tooltip\";\nimport { useAccount } from \"wagmi\";\n\nimport StepCard from \"@/components/Modals/StepCard\";\nimport { ModalContext } from \"@/lib/context\";\nimport { api, sliceAddress } from \"@/lib/utils\";\n\nimport IdrissConfirmModal from \"./IdrissConfirmModal\";\n\ninterface Props {\n  balance: number;\n}\n\nexport default function IdrissModal({ balance }: Props) {\n  const { address } = useAccount();\n  const { openModal, closeModal } = useContext(ModalContext);\n\n  const [isCopiedTooltipOpen, setIsCopiedTooltipOpen] = useState(false);\n  const [startedRegistration, setstartedRegistration] = useState(false);\n  const [requestedRegistration, setRequestedRegistration] = useState(false);\n\n  useEffect(() => {\n    if (isCopiedTooltipOpen) {\n      setTimeout(() => setIsCopiedTooltipOpen(false), 2000);\n    }\n  }, [isCopiedTooltipOpen]);\n\n  return (\n    <div className=\"flex flex-col max-w-[343px] text-pine-900 p-2\">\n      <div className=\"flex flex-row justify-between p-3\">\n        <Image\n          src=\"/arrow-right.svg\"\n          width={25}\n          height={25}\n          alt=\"arrow-right\"\n          className=\"flex w-25px max-w-25px h-25px max-h-25px scale-x-[-1] cursor-pointer -translate-x-1\"\n          onClick={() => closeModal()}\n        />\n        <Tooltip id=\"copy-deposit-tooltip\" isOpen={isCopiedTooltipOpen} />\n        <button\n          className=\"copy cursor-pointer border-2 rounded-full border-cyan-200 px-3 py-1\"\n          data-tooltip-id=\"copy-deposit-tooltip\"\n          data-tooltip-content=\"Copied!\"\n          onClick={() => {\n            navigator.clipboard.writeText(address!);\n            setIsCopiedTooltipOpen(true);\n          }}\n        >\n          🔗 {sliceAddress(address!)}\n        </button>\n        <button onClick={() => closeModal()}>\n          <Image alt=\"x\" src=\"/x.svg\" height={16} width={16} />\n        </button>\n      </div>\n      <section className=\"text-center\">\n        <h3 className=\"pt-0\">IDriss 🤝 Glo Dollar</h3>\n        <p className=\"text-sm py-4\">\n          We&apos;ve teamed up to gift a free IDriss registration to people who\n          own $100+ Glo Dollar.\n        </p>\n        <p className=\"text-sm pb-4\">\n          With an IDriss you can use an 📧, 📱 or @twitter instead of your\n          wallet address, and share your impact with an easier link:&nbsp;\n          <a className=\"black-link\" target=\"_blank\" href=\"/impact/@geyr_garmr\">\n            /impact/@geyr_garmr\n          </a>\n        </p>\n      </section>\n      <section>\n        <StepCard\n          index={1}\n          iconPath=\"/glo-logo.svg\"\n          title=\"Buy $100 Glo Dollars (or more!)\"\n          content=\"Across all blockchains\"\n          done={balance >= 100}\n        />\n        <StepCard\n          index={2}\n          iconPath=\"/idriss.png\"\n          title=\"Request a free IDriss registration\"\n          content=\"Just click here\"\n          action={async () => {\n            setRequestedRegistration(true);\n            await api().get(\"/idriss\");\n          }}\n          done={requestedRegistration}\n        />\n        <StepCard\n          index={3}\n          iconPath=\"/idriss.png\"\n          title=\"Complete IDriss registration\"\n          content=\"Connect your wallet on idriss.xyz\"\n          action={() => {\n            window.open(\"https://www.idriss.xyz/\", \"_blank\");\n            setstartedRegistration(true);\n          }}\n          done={startedRegistration}\n        />\n        <StepCard\n          index={4}\n          iconPath=\"/idriss.png\"\n          title=\"Confirm IDriss identity\"\n          content=\"Enter your IDriss email/twitter/phone\"\n          action={() => openModal(<IdrissConfirmModal />)}\n        />\n      </section>\n    </div>\n  );\n}\n","import Cookies from \"js-cookie\";\nimport Image from \"next/image\";\nimport { useContext, useEffect, useState } from \"react\";\n\nimport { ModalContext } from \"@/lib/context\";\nimport { useUserStore } from \"@/lib/store\";\nimport { api } from \"@/lib/utils\";\nimport { POPUP_PROPS } from \"@/utils\";\n\nconst BUTTON_CLASS_NAME = \"bg-pine-100 text-pine-900 h-[52px] py-3.5 m-1 p-10\";\n\nconst TwitterLogo = () => (\n  <Image className=\"mr-3\" alt=\"\" src=\"/twitter.svg\" height={32} width={32} />\n);\n\nexport default function TweetModal({ tweetText }: { tweetText: string }) {\n  const { closeModal } = useContext(ModalContext);\n  const { ctas, setCTAs } = useUserStore();\n\n  const [tweetVerified, setTweetVerified] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const isCompleted = ctas.find(\n      (x) => x.type === \"TWEEET_IMPACT\" && x.isCompleted\n    );\n    if (isCompleted) {\n      setTweetVerified(true);\n    }\n  }, []);\n\n  const verify = () => {\n    setError(false);\n    const bc = new BroadcastChannel(\"glo-channel\");\n    bc.onmessage = (event) => {\n      console.log(\"Popup closed\");\n\n      const { success } = event.data;\n\n      if (success) {\n        api()\n          .get<CTA[]>(`/ctas`)\n          .then((res) => {\n            setCTAs(res.data);\n            setTweetVerified(true);\n            closeModal();\n          });\n      } else {\n        setError(true);\n      }\n    };\n\n    const userId = Cookies.get(\"glo-user\");\n\n    const redirectUri = `${window.location.origin}/oauth2/twitter`;\n\n    const authUrl = `https://twitter.com/i/oauth2/authorize?response_type=code&client_id=${process.env.NEXT_PUBLIC_TWITTER_CLIENT_ID}&redirect_uri=${redirectUri}?userId=${userId}&scope=tweet.read%20users.read&state=state&code_challenge=${process.env.NEXT_PUBLIC_CODE_CHALLENGE}&code_challenge_method=plain`;\n\n    window.open(authUrl, \"twitter-oauth2\", POPUP_PROPS);\n  };\n\n  const tweet = () => {\n    const tweetUrl = `https://twitter.com/intent/tweet?text=${encodeURI(\n      tweetText\n    )}`;\n    window.open(tweetUrl, \"twitter-tweet\", POPUP_PROPS);\n  };\n\n  return (\n    <div className=\"p-8 max-w-[343px]\">\n      <div className=\"flex flex-row justify-between\">\n        <div></div>\n        <button onClick={() => closeModal()}>\n          <Image alt=\"x\" src=\"/x.svg\" height={16} width={16} />\n        </button>\n      </div>\n      <section className=\"flex flex-col items-center\">\n        <h2>Two steps:</h2>\n        <button onClick={() => tweet()} className={BUTTON_CLASS_NAME}>\n          <TwitterLogo />\n          1. Tweet your impact\n        </button>\n        <p className=\"py-5 hidden\">\n          Click the button to tweet the following message:\n        </p>\n        <p className=\"copy pseudo-input-text text-sm p-2 whitespace-pre-line my-6\">\n          {tweetText.includes(\"0x\") || tweetText.slice(-50).includes(\"@\")\n            ? tweetText.replace(/0x[a-fA-F0-9]+/, \"0x...\")\n            : tweetText.slice(0, -54) + \"...\"}\n        </p>\n\n        <p className=\"py-5 hidden\">\n          and then verify that you posted with the bottom button to complete\n          this action.\n        </p>\n        <button\n          disabled={tweetVerified}\n          onClick={() => verify()}\n          className={BUTTON_CLASS_NAME}\n        >\n          <TwitterLogo />\n          2. Verify Tweet\n        </button>\n        {error && (\n          <p className=\"py-5 text-red-300\">\n            Could not verify the Tweet. Try again.\n          </p>\n        )}\n      </section>\n    </div>\n  );\n}\n","import { useWallet } from \"@vechain/dapp-kit-react\";\nimport { motion } from \"framer-motion\";\nimport Cookies from \"js-cookie\";\nimport Image from \"next/image\";\nimport { useContext } from \"react\";\n\nimport { ModalContext } from \"@/lib/context\";\nimport { useUserStore } from \"@/lib/store\";\nimport { DEFAULT_CTAS } from \"@/lib/utils\";\n\nimport { CompletedIcon } from \"./CompletedIcon\";\nimport IdrissModal from \"./Modals/IdrissModal\";\nimport LiquidityModal from \"./Modals/LiquidityModal\";\nimport TweetModal from \"./Modals/TweetModal\";\n\nconst Icon = ({ path }: { path: string }) => (\n  <button className=\"flex border justify-center min-w-[40px] min-h-[40px] rounded-full bg-pine-200\">\n    <Image src={path} width={16} height={16} alt=\"call to action\" />\n  </button>\n);\n\nconst FillIcon = ({ path }: { path: string }) => (\n  <button className=\"flex border justify-center min-w-[40px] min-h-[40px] rounded-full bg-black\">\n    <Image src={path} width={30} height={30} alt=\"call to action\" />\n  </button>\n);\n\nconst ActionButton = ({\n  CTA_MAP,\n  ctaData,\n}: {\n  CTA_MAP: { [key in CTAType]: ActionButton };\n  email: string | undefined;\n  ctaData: CTA;\n}) => {\n  const cta = CTA_MAP[ctaData.type];\n  const { action } = cta;\n\n  const link = cta?.url ? cta.url + (cta.slug || \"\") : undefined;\n\n  return (\n    <a\n      className=\"cta\"\n      href={link}\n      onClick={() => (action ? action() : undefined)}\n      target=\"_blank\"\n      rel=\"noreferrer\"\n    >\n      {ctaData.isCompleted ? (\n        <CompletedIcon name={`cta-${ctaData.type}`} path={cta.iconPath} />\n      ) : cta.fillIcon ? (\n        <FillIcon path={cta.iconPath} />\n      ) : (\n        <Icon path={cta.iconPath} />\n      )}\n      <div className=\"flex-col w-56 ml-[16px]\">\n        <h5>{cta.title}</h5>\n        <p className=\"mt-1 text-xs text-pine-700 whitespace-pre-line\">\n          {cta.description}\n        </p>\n      </div>\n\n      <Image\n        src=\"/arrow-right.svg\"\n        width={25}\n        height={25}\n        alt=\"arrow-right\"\n        className=\"ml-2 flex w-25px max-w-25px h-25px max-h-25px\"\n      />\n    </a>\n  );\n};\n\nconst nf = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 0,\n});\n\nexport default function CTA({\n  balance,\n  identity = \"\",\n}: {\n  balance?: string;\n  identity: string;\n}) {\n  const { ctas } = useUserStore();\n  const { openModal } = useContext(ModalContext);\n\n  const { account: veAddress } = useWallet();\n  const isVe = !!veAddress;\n\n  const gloBalance = Number(balance) || 100;\n\n  const email = Cookies.get(\"glo-email\") || \"\";\n\n  const shareImpactText = `I just bought ${nf.format(\n    gloBalance\n  )} @glodollar, the stablecoin that funds public goods and charities.\\n\\nLearn more on my personal impact page: https://app.glodollar.org/impact/${\n    isVe ? \"ve/\" : \"\"\n  }${identity}`;\n\n  const shareImpactTextShort = `${\n    shareImpactText.split(\"public goods\")[0]\n  }...`.replace(\"\\n\\n\", \"\\n\");\n\n  const CTA_MAP: { [key in CTAType]: ActionButton } = {\n    [\"JOIN_CONSORTIUM\"]: {\n      title: \"Join the Consortium\",\n      description: \"Embed philanthropy into your organization.\",\n      iconPath: \"/za-warudo.svg\",\n      url: \"https://www.glodollar.org/glo-consortium\",\n    },\n    [\"TWEEET_IMPACT\"]: {\n      title: \"Tweet your impact\",\n      iconPath: \"/megahorn.svg\",\n      description: shareImpactTextShort,\n      action: () => openModal(<TweetModal tweetText={shareImpactText} />),\n    },\n    [\"REGISTER_IDRISS\"]: {\n      title: \"Claim free IDriss handle\",\n      iconPath: \"/idriss.png\",\n      description:\n        \"Hold $100+ of Glo Dollar to claim an IDriss registration for this wallet\",\n      action: () => openModal(<IdrissModal balance={gloBalance} />),\n    },\n    [\"ADD_BETTERSWAP_LIQUIDITY\"]: {\n      title: \"Add DEX liquidity\",\n      iconPath: \"/vebetterdao.png\",\n      description: \"Buy Glo Dollar, add liquidity and get B3TR via VeBetterDAO\",\n      action: () => openModal(<LiquidityModal />, \"\", true),\n    },\n  };\n  const CTAS = DEFAULT_CTAS;\n\n  const ctaList: CTA[] = ctas.length > 0 ? ctas : CTAS;\n\n  const spring = {\n    type: \"spring\",\n    damping: 25,\n    stiffness: 120,\n    duration: 0.1,\n  };\n\n  return (\n    <div className=\"bg-pine-50 rounded-[20px] p-6\">\n      <div className=\"flex justify-between cursor-default\">\n        <h3>🌟 Help Grow Glo!</h3>\n      </div>\n      <ul className=\"mt-2\">\n        {ctaList\n          // Filter out betterswap if not a Ve user\n          .filter((cta) => isVe || cta.type !== \"ADD_BETTERSWAP_LIQUIDITY\")\n          .map((cta) => (\n            <motion.div key={cta.type} layout transition={spring}>\n              <ActionButton CTA_MAP={CTA_MAP} email={email} ctaData={cta} />\n            </motion.div>\n          ))}\n      </ul>\n    </div>\n  );\n}\n","import clsx from \"clsx\";\nimport Image from \"next/image\";\n\ninterface CharityCardProps {\n  name: string;\n  description: string;\n  type: string;\n  iconPath: string;\n  selected?: boolean;\n  percent?: number;\n  onClick?: () => void;\n}\n\nconst CharityCard = ({\n  name,\n  description,\n  type,\n  iconPath,\n  selected,\n  percent,\n  onClick,\n}: CharityCardProps) => (\n  <div\n    className={clsx(\n      \"flex flex-col justify-center border-2 rounded-xl border-pine-100 mb-2\",\n      (selected || !onClick) && \"bg-cyan-600/20\",\n      !selected && onClick && \"hover:border-pine-400\",\n      onClick && \"cursor-pointer\"\n    )}\n    onClick={() => onClick && onClick()}\n  >\n    <div className=\"flex flex-col justify-center\">\n      <div className=\"flex items-center p-3\">\n        <div className=\"min-w-[32px]\">\n          <Image\n            alt={iconPath}\n            src={iconPath}\n            height={32}\n            width={32}\n            className=\"rounded-2xl\"\n          />\n        </div>\n        <div className=\"pl-4\">\n          <div className=\"flex flex-row justify-between\">\n            <h5 className=\"text-sm mb-2\">{name}</h5>\n            <p className=\"copy text-xs\">{type}</p>\n          </div>\n          <p className=\"copy text-xs\">\n            {typeof percent === \"undefined\" ? description : `${percent}%`}\n          </p>\n        </div>\n\n        <div className=\"min-w-[32px] ml-auto\">\n          {!onClick ? (\n            <div className=\"circle border-2 border-none bg-cyan-600 w-[32px] h-[32px]\">\n              <Image\n                alt=\"checkmark\"\n                src=\"check-alpha.svg\"\n                height={12}\n                width={12}\n              />\n            </div>\n          ) : (\n            <div className=\"circle w-[32px] h-[32px]\">\n              <Image\n                alt={iconPath}\n                src={selected ? \"x.svg\" : \"plus.svg\"}\n                height={16}\n                width={16}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default CharityCard;\n","import {\n  allowAllModules,\n  StellarWalletsKit,\n  WalletNetwork,\n  XBULL_ID,\n} from \"@creit.tech/stellar-wallets-kit/build/index\";\nimport { Charity } from \"@prisma/client\";\nimport { useWallet } from \"@vechain/dapp-kit-react\";\nimport { Chain } from \"@wagmi/core/chains\";\nimport Image from \"next/image\";\nimport Slider from \"rc-slider\";\nimport { useContext, useEffect, useState } from \"react\";\nimport useSWR from \"swr\";\nimport { Hex } from \"viem\";\nimport { useAccount, useWalletClient } from \"wagmi\";\n\nimport { getCurrentSelectedCharity } from \"@/fetchers\";\nimport { ModalContext } from \"@/lib/context\";\nimport { useToastStore } from \"@/lib/store\";\nimport { api, CHARITY_MAP, isProd } from \"@/lib/utils\";\nimport { UpdateCharityChoiceBody } from \"@/pages/api/charity\";\n\ninterface Props {\n  yearlyYield: number;\n  percentMap: { [id: string]: number };\n  isAddNewMode?: boolean;\n  onClose?: () => void;\n}\n\ninterface CharityCardProps {\n  name: string;\n  percent: number;\n  yearlyYield: number;\n  iconPath: string;\n  setPercent: (value: number) => void;\n  onDelete?: () => void;\n}\n\nconst CharitySlider = ({\n  name,\n  percent,\n  yearlyYield,\n  iconPath,\n  setPercent,\n  onDelete,\n}: CharityCardProps) => (\n  <div className=\"flex flex-col justify-center border-t-2 border-pine-100\">\n    <div className=\"flex flex-col justify-center\">\n      <div className=\"flex items-center p-2\">\n        <div className=\"min-w-[32px]\">\n          <Image\n            alt={iconPath}\n            src={iconPath}\n            height={32}\n            width={32}\n            className=\"rounded-2xl\"\n          />\n        </div>\n        <div className=\"pl-4\">\n          <div className=\"flex justify-between\">\n            <h5 className=\"text-sm\">{name}</h5>\n          </div>\n        </div>\n        {onDelete && (\n          <Image\n            className=\"ml-auto cursor-pointer\"\n            alt=\"trash\"\n            src=\"/trash.svg\"\n            height={16}\n            width={16}\n            onClick={() => onDelete()}\n          />\n        )}\n      </div>\n    </div>\n    <div className=\"px-5 py-2 mb-8\">\n      <Slider\n        min={0}\n        max={100}\n        step={1}\n        onChange={(x) => setPercent(Array.isArray(x) ? x[0] : x)}\n        defaultValue={percent}\n        value={percent}\n        railStyle={{\n          backgroundColor: \"#EAF2F1\",\n        }}\n        trackStyle={{\n          backgroundColor: \"rgb(36 229 223)\",\n        }}\n        handleStyle={{\n          height: \"28px\",\n          width: \"28px\",\n          backgroundColor: \"white\",\n          border: \"8px solid rgb(36 229 223)\",\n          opacity: 1,\n          marginTop: \"-13px\",\n        }}\n        marks={{\n          [percent]: (\n            <>\n              <h5 className=\"text-sm mt-[2px]\">{percent}%</h5>\n              <p className=\"mt-[-5px]\">\n                ({((percent / 100) * yearlyYield).toFixed(2)}$)\n              </p>\n            </>\n          ),\n        }}\n      />\n    </div>\n  </div>\n);\n\nexport default function CharityManageModal(props: Props) {\n  const { closeModal } = useContext(ModalContext);\n  const { data: walletClient } = useWalletClient();\n\n  const { chain } = useAccount();\n  const { account: veAddress } = useWallet();\n  const isVe = !!veAddress;\n\n  const [percentMap, setPercentMap] = useState({ ...props.percentMap });\n  const [touched, setTouched] = useState<{ [key: string]: boolean }>({});\n  const [lastTouchedKey, setLastTouchedKey] = useState<string | null>(null);\n  const [isAutoDistributed, setIsAutoDistributed] = useState(false);\n\n  useEffect(() => {\n    if (props.isAddNewMode) {\n      const count = Object.keys(props.percentMap).length;\n      const equal = Math.floor(100 / count);\n      const last = equal + (100 - equal * count);\n      const updated: { [id: string]: number } = {};\n\n      Object.entries(percentMap).forEach(([key], index) => {\n        updated[key] = index < count - 1 ? equal : last;\n      });\n      setPercentMap({ ...updated });\n    }\n  }, []);\n\n  const { setShowToast } = useToastStore();\n  const selectedKeys = Object.keys(percentMap);\n  const charities = Object.entries(CHARITY_MAP).filter((x) =>\n    selectedKeys.includes(x[0])\n  );\n\n  const sumPercentages = Object.values(percentMap).reduce(\n    (acc, cur) => acc + cur,\n    0\n  );\n  const { mutate } = useSWR(\"/charity\", getCurrentSelectedCharity);\n\n  const onClose = () => {\n    if (props.onClose) props.onClose();\n  };\n\n  const autoDistribute = () => {\n    const allKeys = Object.keys(percentMap);\n    const totalTouchedPercentage = allKeys\n      .filter((key) => key !== lastTouchedKey) // Exclude the last touched key\n      .reduce((acc, key) => acc + percentMap[key], 0);\n\n    const remainingPercentage = 100 - (percentMap[lastTouchedKey!] || 0); // Remaining percentage excluding the last touched\n\n    if (allKeys.length === 1) {\n      // If there's only one recipient, set its percentage to 100%\n      percentMap[allKeys[0]] = 100;\n    } else if (totalTouchedPercentage > remainingPercentage) {\n      // Scale down the other recipients to fit within the remaining percentage\n      const scalingFactor = remainingPercentage / totalTouchedPercentage;\n      allKeys.forEach((key) => {\n        if (key !== lastTouchedKey) {\n          percentMap[key] = Math.floor(percentMap[key] * scalingFactor);\n        }\n      });\n\n      const scaledTotal = Object.values(percentMap).reduce(\n        (acc, cur) => acc + cur,\n        0\n      );\n      const leftover = 100 - scaledTotal;\n\n      if (leftover > 0 && lastTouchedKey) {\n        percentMap[lastTouchedKey] += leftover;\n      }\n    } else {\n      // Distribute the remaining percentage equally among untouched recipients\n      const untouchedKeys = allKeys.filter((key) => key !== lastTouchedKey);\n      const untouchedCount = untouchedKeys.length;\n\n      const equalDistribution = Math.floor(\n        remainingPercentage / untouchedCount\n      );\n      const distributedTotal = equalDistribution * untouchedCount;\n\n      untouchedKeys.forEach((key) => {\n        percentMap[key] = equalDistribution;\n      });\n\n      const leftover = remainingPercentage - distributedTotal;\n      if (leftover > 0 && lastTouchedKey) {\n        percentMap[lastTouchedKey] += leftover;\n      }\n    }\n\n    setPercentMap({ ...percentMap });\n    setIsAutoDistributed(true);\n  };\n\n  const validateAndSave = () => {\n    if (sumPercentages !== 100) {\n      autoDistribute();\n      setShowToast({\n        showToast: true,\n        message: `Auto-distributed. Please press confirm to proceed.`,\n      });\n    } else {\n      // Proceed with signing if total is already 100%\n      updateSelectedCharity(percentMap, chain as Chain);\n      onClose();\n    }\n  };\n\n  const signCharityUpdateMessage = async (\n    message: string\n  ): Promise<string | undefined> => {\n    const isStellar = localStorage.getItem(\"stellarConnected\") == \"true\";\n\n    if (isStellar) {\n      return \"public-signature\";\n\n      const stellarNetwork = isProd()\n        ? WalletNetwork.PUBLIC\n        : WalletNetwork.TESTNET;\n      const stellarWalletId =\n        localStorage.getItem(\"stellarWalletId\") || XBULL_ID;\n\n      const kit: StellarWalletsKit = new StellarWalletsKit({\n        network: stellarNetwork,\n        selectedWalletId: stellarWalletId,\n        modules: allowAllModules(),\n      });\n\n      // const { address } = await kit.getAddress();\n\n      //   const tx = new TransactionBuilder(new Account(address, \"0\"), {\n      //     fee: \"1\",\n      //     networkPassphrase: isProd() ? Networks.PUBLIC : Networks.TESTNET,\n      //   })\n      //     .addOperation(\n      //       Operation.payment({\n      //         destination: address,\n      //         amount: \"1\",\n      //         asset: Asset.native(),\n      //       })\n      //     )\n      //     .setTimeout(30)\n      //     .build();\n\n      //   // TODO: cry\n      //   // const { result: sig } = await kit.signTx({\n      //   //   xdr: tx.toXDR(),\n      //   //   publicKeys: [address],\n      //   //   network: stellarNetwork,\n      //   // });\n\n      //   // return sig;\n    }\n\n    const sig = await walletClient?.signMessage({\n      message: message,\n    } as any);\n\n    return sig;\n  };\n\n  const updateSelectedCharity = async (\n    percentMap: { [key: string]: number },\n    chain: Chain\n  ) => {\n    // backend has to verify the signature and also make sure the timestamp is after the last choice and before the current time\n    const currentDateTimeString = new Date().toISOString();\n    const charities = Object.entries(percentMap).map((x) => ({\n      charity: x[0] as Charity,\n      percent: x[1],\n    }));\n\n    const nonZeroCharities = charities.filter((x) => x.percent > 0);\n    const signingBody = {\n      timestamp: currentDateTimeString,\n      charities: nonZeroCharities,\n      action: \"Updating charity selection\",\n    };\n\n    const signingBodyString = JSON.stringify(signingBody);\n    const signature = isVe\n      ? \"ve\"\n      : await signCharityUpdateMessage(signingBodyString);\n\n    const apiBody: UpdateCharityChoiceBody = {\n      sigFields: {\n        timestamp: currentDateTimeString,\n        charities: nonZeroCharities,\n        action: \"Updating charity selection\",\n        sig: signature as Hex,\n      },\n      choices: nonZeroCharities,\n      chain: chain,\n    };\n\n    api()\n      .post(`/charity`, apiBody)\n      .then(() => mutate())\n      .then(() => closeModal())\n      .then(() =>\n        setShowToast({\n          showToast: true,\n          message: \"Distribution updated\",\n        })\n      );\n  };\n\n  return (\n    <div className=\"flex flex-col max-w-[343px] text-pine-900 p-2\">\n      <div className=\"flex flex-row justify-end p-2\">\n        <button\n          onClick={() => {\n            closeModal();\n            onClose();\n          }}\n        >\n          <Image alt=\"x\" src=\"/x.svg\" height={16} width={16} />\n        </button>\n      </div>\n      <section className=\"text-center\">\n        <h3 className=\"pt-0\">\n          {props.isAddNewMode\n            ? \"Confirm how to split recipients\"\n            : \"Manage recipients\"}\n        </h3>\n        <p className=\"text-sm py-4 copy\">\n          You can decide how much we should donate to each recipient.\n        </p>\n      </section>\n      <section>\n        {charities.map(([key, charity]) => (\n          <CharitySlider\n            key={key}\n            iconPath={charity.iconPath}\n            name={charity.name}\n            percent={percentMap[key]}\n            yearlyYield={props.yearlyYield}\n            setPercent={(value: number) => {\n              percentMap[key] = value;\n              setTouched((prev) => ({ ...prev, [key]: true }));\n              setLastTouchedKey(key);\n              setPercentMap({ ...percentMap });\n            }}\n            onDelete={\n              charities.length > 1\n                ? () => {\n                    delete percentMap[key];\n                    setTouched((prev) => ({ ...prev, [key]: false }));\n                    setPercentMap({ ...percentMap });\n                    setIsAutoDistributed(false); // Reset auto-distribute state\n                    autoDistribute(); // Re-run auto-distribute\n                  }\n                : undefined\n            }\n          />\n        ))}\n      </section>\n      <button\n        className={\"primary-button m-2\"}\n        onClick={() => {\n          validateAndSave();\n        }}\n      >\n        {isAutoDistributed ? \"Confirm\" : \"Save\"}\n      </button>\n    </div>\n  );\n}\n","import { Charity, CharityChoice } from \"@prisma/client\";\nimport Image from \"next/image\";\nimport { useContext, useEffect, useState } from \"react\";\nimport useSWR from \"swr\";\n\nimport CharityCard from \"@/components/Modals/CharityCard\";\nimport CharityManageModal from \"@/components/Modals/CharityManageModal\";\nimport { getCurrentSelectedCharity } from \"@/fetchers\";\nimport { ModalContext } from \"@/lib/context\";\nimport { CHARITY_MAP } from \"@/lib/utils\";\nimport { getTotalYield } from \"@/utils\";\n\ninterface Props {\n  yearlyYield: number;\n}\n\nconst fetchFundingChoices = async () => {\n  const res = await fetch(\"/api/funding/current\");\n  if (!res.ok) {\n    throw new Error(\"Failed to fetch funding choices\");\n  }\n  return res.json();\n};\n\nexport default function Recipients({ yearlyYield }: Props) {\n  const { openModal } = useContext(ModalContext);\n  const [selected, setSelected] = useState({} as { [key: string]: boolean });\n  const [search, setSearch] = useState(\"\");\n\n  const { data: fundingData, error: fundingError } = useSWR(\n    \"/api/funding/current\",\n    fetchFundingChoices\n  );\n\n  const { possibleFundingChoices = {} } = fundingData || {};\n  const [totalYield, setTotalYield] = useState(0);\n\n  const { data: selectedCharities } = useSWR<CharityChoice[]>(\n    \"/charity\",\n    getCurrentSelectedCharity\n  );\n  useEffect(() => {\n    const x = document.getElementById(\"Smallchat\");\n    x?.classList.add(\"invisible\");\n    return () => {\n      x?.classList.remove(\"invisible\");\n    };\n  }, []);\n\n  const selectedKeys = Object.entries(selected)\n    .filter((x) => x[1])\n    .map((x) => x[0]);\n  const selectedCharitiesNames = selectedCharities\n    ? selectedCharities.map((x) => x.name)\n    : [];\n  const selectedCharitiesMap = Object.entries(CHARITY_MAP).filter((x) =>\n    selectedCharitiesNames.includes(x[0] as Charity)\n  );\n  const searchPhrase = search.toLowerCase();\n\n  const availableCharitiesMap = Object.entries(CHARITY_MAP).filter(\n    (x) =>\n      !selectedCharitiesNames.includes(x[0] as Charity) &&\n      (!search.length ||\n        x[1].description.toLowerCase().includes(searchPhrase) ||\n        x[1].name.toLowerCase().includes(searchPhrase))\n  );\n\n  const percentMap: { [id: string]: number } =\n    selectedCharities?.reduce(\n      (acc, cur) => ({ ...acc, [cur.name]: cur.percent }),\n      {}\n    ) || {};\n\n  // Calculate total yield whenever funding choices or selected charities change\n  useEffect(() => {\n    if (\n      Object.keys(possibleFundingChoices).length &&\n      selectedCharitiesNames.length\n    ) {\n      let calculatedYield = 0;\n\n      Object.keys(possibleFundingChoices).forEach((cause: any) => {\n        if (selectedCharitiesNames.includes(cause)) {\n          calculatedYield += getTotalYield(possibleFundingChoices[cause]);\n        }\n      });\n\n      setTotalYield(calculatedYield);\n    }\n  }, [possibleFundingChoices, selectedCharitiesNames]);\n\n  if (fundingError) {\n    console.error(\"Error fetching funding choices:\", fundingError);\n  }\n\n  return (\n    <>\n      <div className=\"bg-white rounded-[20px] p-4\">\n        <section className=\"text-center p-2\">\n          <div className=\"flex justify-between\">\n            <h3 className=\"pt-0\">My recipients</h3>\n            <div\n              className=\"flex items-center cursor-pointer\"\n              onClick={() => {\n                openModal(\n                  <CharityManageModal\n                    percentMap={{ ...percentMap }}\n                    yearlyYield={yearlyYield}\n                  />\n                );\n              }}\n            >\n              <Image\n                src={\"/gear.svg\"}\n                width={16}\n                height={16}\n                alt=\"choose public good to fund\"\n              />\n              <p className=\"ml-2 text-sm\">Manage</p>\n            </div>\n          </div>\n          {/* TODO: Temp disable yield */}\n          {/* <p className=\"text-sm py-4 copy text-left\">\n            {totalYield ? (\n              <>\n                You fund up to <b>${yearlyYield.toFixed(2) || 0}</b> of the{\" \"}\n                <b>${totalYield.toFixed(2) || 0}/year</b> we donate to these\n                causes.\n              </>\n            ) : (\n              <>\n                You fund up to <b>${yearlyYield.toFixed(2) || 0}</b> per year.\n              </>\n            )}\n          </p> */}\n        </section>\n        <section>\n          {selectedCharitiesMap.map(([key, charity]) => (\n            <CharityCard\n              key={key}\n              iconPath={charity.iconPath}\n              name={charity.name}\n              description={charity.description}\n              type={charity.type}\n              percent={percentMap[key]}\n            />\n          ))}\n        </section>\n      </div>\n      <div className=\"bg-white rounded-[20px] p-4\">\n        <section className=\"text-left p-2\">\n          <h3 className=\"pt-0\">Explore recipients</h3>\n          <p className=\"text-sm py-4 copy\">You can pick as many as you want.</p>\n        </section>\n\n        <section className=\"text-left pb-4 relative\">\n          <Image\n            className=\"ml-2 mt-1.5 absolute left-0\"\n            src=\"/search.svg\"\n            width={16}\n            height={16}\n            alt=\"search\"\n          />\n          <input\n            className=\"pl-7 w-full rounded-full bg-white border-2 rounded-xl border-pine-100\"\n            placeholder={\"Search...\"}\n            value={search}\n            data-testid=\"submit-email-input\"\n            onChange={(e) => setSearch(e.target.value)}\n          />\n        </section>\n        <section>\n          {availableCharitiesMap.map(([key, charity]) => (\n            <CharityCard\n              key={key}\n              iconPath={charity.iconPath}\n              name={charity.name}\n              description={charity.description}\n              type={charity.type}\n              selected={selected[key]}\n              onClick={() =>\n                setSelected({ ...selected, [key]: !selected[key] })\n              }\n            />\n          ))}\n        </section>\n      </div>\n      {!!selectedKeys.length && (\n        <div className=\"flex p-2 justify-between content-center bg-white fixed bottom-0 left-0 right-0\">\n          <p>\n            {selectedKeys.length} recipient{selectedKeys.length > 1 ? \"s\" : \"\"}{\" \"}\n            selected\n          </p>\n          <div className=\"flex\">\n            <button\n              className=\"primary-button h-8 border-2 bg-white mr-2\"\n              onClick={() => setSelected({})}\n            >\n              Cancel\n            </button>\n            <button\n              className=\"primary-button h-8\"\n              onClick={() =>\n                openModal(\n                  <CharityManageModal\n                    percentMap={{\n                      ...percentMap,\n                      ...selectedKeys.reduce(\n                        (acc, cur) => ({ ...acc, [cur]: 0 }),\n                        {}\n                      ),\n                    }}\n                    isAddNewMode={true}\n                    yearlyYield={yearlyYield}\n                    onClose={() => setSelected({})}\n                  />\n                )\n              }\n            >\n              Add\n            </button>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","import { IdrissCrypto } from \"idriss-crypto/browser\";\n\nexport const idriss = new IdrissCrypto(process.env.NEXT_PUBLIC_POLYGON_RPC_URL);\n\nexport const isIdriss = async (address: string, email?: string) => {\n  if (email) {\n    const resolved = await idriss.resolve(email);\n    if (Object.values(resolved).includes(address)) {\n      return true;\n    }\n  }\n\n  const result = await getIdrissName(address);\n  return !!result;\n};\n\nexport const getIdrissName = async (address: string) => {\n  try {\n    return await idriss.reverseResolve(address);\n  } catch (err) {\n    console.log(\"Could not resolve Idriss\");\n    return \"\";\n  }\n};\n","import { useEffect } from \"react\";\nimport { useConnect } from \"wagmi\";\n\nconst AUTOCONNECTED_CONNECTOR_IDS = [\"safe\"];\n\nfunction useAutoConnect(isSafe: boolean) {\n  const { connect, connectors } = useConnect();\n\n  useEffect(() => {\n    if (!isSafe) {\n      return;\n    }\n    AUTOCONNECTED_CONNECTOR_IDS.forEach((connector) => {\n      const connectorInstance = connectors.find((c) => c.id === connector);\n\n      if (connectorInstance) {\n        connect({ connector: connectorInstance });\n      }\n    });\n  }, [connect, connectors]);\n}\n\nexport { useAutoConnect };\n","import { Chain } from \"@wagmi/core/chains\";\nimport Image from \"next/image\";\nimport { useState } from \"react\";\nimport { Tooltip } from \"react-tooltip\";\nimport { useAccount, useWalletClient } from \"wagmi\";\n\nimport { chainConfig } from \"@/lib/config\";\n\nexport default function AddToWallet() {\n  const { chain } = useAccount();\n  const { data: walletClient } = useWalletClient();\n  const [isAddToWalletTooltipOpen, setIsAddToWalletTooltipOpen] =\n    useState(false);\n\n  function addTokenToWallet(chain: Chain) {\n    try {\n      walletClient\n        ?.watchAsset({\n          type: \"ERC20\", // Initially only supports ERC20, but eventually more!\n          options: {\n            address: chainConfig[chain.id], // The address that the token is at.\n            symbol: \"USDGLO\", // A ticker symbol or shorthand, up to 5 chars.\n            decimals: 18, // The number of decimals in the token\n            image: \"https://app.glodollar.org/glo-logo.svg\", // A string url of the token logo\n          },\n        })\n        .then(() => {\n          console.log(\"Thanks for your interest!\");\n        })\n        .catch(() => {\n          console.log(\"Your loss!\");\n        });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <div className=\"relative ml-2\">\n      <Tooltip\n        id=\"add-to-wallet-tooltip\"\n        content=\"Add to wallet\"\n        isOpen={isAddToWalletTooltipOpen}\n      />\n      <div\n        className={`rounded-lg hover:bg-white hover:drop-shadow-sm w-9 h-9 z-10 flex justify-center`}\n        onMouseOver={() => setIsAddToWalletTooltipOpen(true)}\n        onMouseOut={() => setIsAddToWalletTooltipOpen(false)}\n        onClick={() => (chain ? addTokenToWallet(chain) : \"\")}\n        data-tooltip-id=\"add-to-wallet-tooltip\"\n        data-tooltip-content=\"Add to wallet\"\n      >\n        <Image\n          src={\"/metamask.svg\"}\n          alt={`metamask-logo`}\n          height={18}\n          width={18}\n        />\n      </div>\n    </div>\n  );\n}\n","import { RefObject, useEffect } from \"react\";\n\nexport const useOutsideClick = (ref: RefObject<HTMLElement>, callback: any) => {\n  useEffect(() => {\n    const handleClickOutside = (event: any) => {\n      if (ref.current && !ref.current.contains(event.target)) {\n        callback();\n      }\n    };\n    document.addEventListener(\"click\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"click\", handleClickOutside);\n    };\n  });\n};\n","import {\n  arbitrum,\n  arbitrumSepolia,\n  base,\n  baseSepolia,\n  celo,\n  celoAlfajores,\n  Chain,\n  mainnet,\n  optimism,\n  optimismSepolia,\n  polygon,\n} from \"@wagmi/core/chains\";\nimport Image from \"next/image\";\nimport { useRef, useState } from \"react\";\nimport { useAccount, useSwitchChain } from \"wagmi\";\n\nimport { useOutsideClick } from \"@/lib/hooks\";\nimport { getAllowedChains } from \"@/lib/utils\";\n\nexport default function NetworkSwitcher() {\n  const { switchChain } = useSwitchChain();\n  const { chain } = useAccount();\n  const [dropdownActive, setDropdownActive] = useState(false);\n\n  const ref = useRef(null);\n  useOutsideClick(ref, () => setDropdownActive(false));\n\n  const getChainLogoPath = (chain: Chain): string => {\n    switch (chain.id) {\n      case mainnet.id: {\n        return \"/ethereum-square-logo.svg\";\n      }\n      case polygon.id: {\n        return \"/polygon-matic-logo.svg\";\n      }\n      case celo.id:\n      case celoAlfajores.id: {\n        return \"/celo-square-logo.svg\";\n      }\n      case optimism.id:\n      case optimismSepolia.id: {\n        return \"/optimism-logo.svg\";\n      }\n      case arbitrum.id:\n      case arbitrumSepolia.id: {\n        return \"/arbitrum-logo.svg\";\n      }\n      case base.id:\n      case baseSepolia.id: {\n        return \"/base-logo.svg\";\n      }\n      default: {\n        return \"/question-mark.svg\";\n      }\n    }\n  };\n\n  const getChainOptions = () => {\n    const chains = getAllowedChains();\n    return chains.map((chain) => (\n      <li\n        className=\"hover:bg-pine-100 px-2 py-2.5 rounded-lg\"\n        onClick={async () => {\n          switchChain({ chainId: chain.id });\n          setDropdownActive(false);\n        }}\n        key={chain.id}\n      >\n        <div className=\"flex flex-row space-x-2\">\n          <Image\n            src={getChainLogoPath(chain)}\n            alt={`${chain.name}-logo`}\n            height={18}\n            width={18}\n          />\n          <div>{chain.name}</div>\n        </div>\n      </li>\n    ));\n  };\n\n  return (\n    <div className=\"relative mr-2\" ref={ref}>\n      <div\n        className={`rounded-lg hover:bg-white hover:drop-shadow-sm w-9 h-9 z-10 flex justify-center ${\n          dropdownActive && \"bg-white drop-shadow-sm\"\n        }`}\n        onClick={() => setDropdownActive(!dropdownActive)}\n      >\n        <Image\n          src={chain ? getChainLogoPath(chain) : \"/question-mark.svg\"}\n          alt={`${chain ? chain.name : \"unknown-chain\"}-logo`}\n          height={18}\n          width={18}\n        />\n      </div>\n      {dropdownActive && (\n        <div className=\"absolute p-2 bg-white rounded-lg w-52 drop-shadow-sm mt-1\">\n          <ul>{getChainOptions()}</ul>\n        </div>\n      )}\n    </div>\n  );\n}\n","/* eslint-disable import/order */\nimport {\n  AlbedoModule,\n  FreighterModule,\n  HanaModule,\n  ISupportedWallet,\n  LobstrModule,\n  RabetModule,\n  StellarWalletsKit,\n  WalletConnectAllowedMethods,\n  WalletConnectModule,\n  WalletNetwork,\n  XBULL_ID,\n  xBullModule,\n} from \"@creit.tech/stellar-wallets-kit/build/index\";\n\nimport { useWalletModal } from \"@vechain/dapp-kit-react\";\nimport clsx from \"clsx\";\nimport Cookies from \"js-cookie\";\nimport Image from \"next/image\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport { isMobile } from \"react-device-detect\";\nimport { useConnect } from \"wagmi\";\n\nimport { ModalContext } from \"@/lib/context\";\nimport { isProd } from \"@/lib/utils\";\nimport { WC_COOKIE } from \"@/utils\";\n\nconst TOS_COOKIE = \"tos-agreed\";\n\nconst ToS = () => (\n  <span>\n    <a\n      target=\"_blank\"\n      className=\"underline\"\n      href=\"https://www.glodollar.org/articles/terms-of-service\"\n      rel=\"noreferrer\"\n    >\n      Terms\n    </a>\n    &nbsp;and&nbsp;\n    <a\n      target=\"_blank\"\n      className=\"underline\"\n      href=\"https://www.glodollar.org/articles/terms-of-service\"\n      rel=\"noreferrer\"\n    >\n      Privacy Policy\n    </a>\n  </span>\n);\n\ntype UserAuthModalProps = {\n  setStellarConnected: (bool: boolean) => void;\n  setStellarAddress: (str: string) => void;\n  connector?: string;\n};\n\nexport default function UserAuthModal({\n  setStellarConnected,\n  setStellarAddress,\n  connector,\n}: UserAuthModalProps) {\n  const { connect, connectors } = useConnect();\n  const { closeModal } = useContext(ModalContext);\n\n  const [wcState, setRawWcState] = useState<WC_STATE>(\n    (Cookies.get(WC_COOKIE) as WC_STATE) || \"STELLAR_PREP\"\n  );\n  const setWcState = (state: WC_STATE) => {\n    Cookies.set(WC_COOKIE, state);\n    setRawWcState(state);\n  };\n\n  const { open } = useWalletModal();\n\n  const tosAlreadyAgreed = Cookies.get(TOS_COOKIE);\n\n  const [hasUserAgreed, setHasUserAgreed] = useState<boolean | null>(\n    tosAlreadyAgreed ? true : null\n  );\n  const userRejected = hasUserAgreed === false;\n  const tosRef = useRef<HTMLDivElement>(null);\n\n  const requireUserAgreed = (callback: () => void) => {\n    if (!hasUserAgreed) {\n      setHasUserAgreed(false);\n      tosRef.current?.scrollIntoView({ behavior: \"smooth\" });\n      return;\n    }\n\n    Cookies.set(TOS_COOKIE, \"1\");\n\n    callback();\n  };\n\n  const connectWithConnector = async (index: number) => {\n    requireUserAgreed(async () => {\n      if (index == 99) {\n        if ([\"STELLAR_PREP\", \"STELLAR_READY\"].includes(wcState)) {\n          setWcState(\"STELLAR_READY\");\n        } else {\n          setWcState(\"STELLAR_PREP\");\n          window.open(\"/sign-in/stellar\", \"_self\");\n          return;\n        }\n\n        await connectStellar();\n      } else {\n        // Connect with EVM connectors\n        connect({ connector: connectors[index] });\n      }\n      closeModal();\n    });\n  };\n\n  const connectWithWallectConnect = () => {\n    requireUserAgreed(async () => {\n      if ([\"WC_PREP\", \"WC_READY\"].includes(wcState)) {\n        setWcState(\"WC_READY\");\n        await connectWithConnector(3);\n        closeModal();\n      } else {\n        setWcState(\"WC_PREP\");\n        window.open(\"/sign-in/wc\", \"_self\");\n      }\n    });\n  };\n\n  async function connectStellar() {\n    const stellarKit = new StellarWalletsKit({\n      network: isProd() ? WalletNetwork.PUBLIC : WalletNetwork.TESTNET,\n      selectedWalletId: XBULL_ID,\n      modules: [\n        new FreighterModule(),\n        new xBullModule(),\n        new HanaModule(),\n        new LobstrModule(),\n        new RabetModule(),\n        new AlbedoModule(),\n        new WalletConnectModule({\n          url: \"https://app.glodollar.org\",\n          projectId: process.env.NEXT_PUBLIC_WC_PROJECT_ID!,\n          method: WalletConnectAllowedMethods.SIGN,\n          description: `Glo Dollar App allows you to select which public good to fund`,\n          name: \"Glo Dollar\",\n          icons: [\"public/glo-logo.svg\"],\n          network: isProd() ? WalletNetwork.PUBLIC : WalletNetwork.TESTNET,\n        }),\n      ],\n    });\n    await stellarKit.openModal({\n      onWalletSelected: async (option: ISupportedWallet) => {\n        stellarKit.setWallet(option.id);\n        const address = await stellarKit.getPublicKey();\n        localStorage.setItem(\"stellarConnected\", \"true\");\n        localStorage.setItem(\"stellarAddress\", address);\n        localStorage.setItem(\"stellarWalletId\", option.id);\n        setStellarConnected(true);\n        setStellarAddress(address);\n      },\n    });\n\n    closeModal();\n  }\n\n  useEffect(() => {\n    if (connector) {\n      const connectorMap: { [con: string]: () => void } = {\n        wc: connectWithWallectConnect,\n        stellar: connectStellar,\n      };\n      const fun = connectorMap[connector];\n      if (fun) {\n        fun();\n      }\n    }\n  }, []);\n\n  return (\n    <>\n      <section className=\"sticky p-2 flex flex-col items-center text-center bg-white rounded-t-3xl\">\n        <h2 className=\"\">Sign in to Glo Dollar</h2>\n      </section>\n      <section className=\"modal-body px-4 rounded-b-3xl bg-pine-100 after:bg-pine-100\">\n        <div className=\"pt-2\">\n          <button\n            className=\"auth-button\"\n            data-testid=\"coinbase-login-button\"\n            onClick={() => connectWithConnector(2)}\n          >\n            <h4>Coinbase</h4>\n            <Image alt=\"coinbase\" src=\"/coinbase.png\" width={35} height={35} />\n          </button>\n          <button\n            className=\"auth-button\"\n            data-testid=\"stellar-login-button\"\n            onClick={() => connectWithConnector(99)}\n          >\n            <h4>Stellar wallets</h4>\n            <Image\n              alt=\"stellar\"\n              src=\"/stellar-logo.svg\"\n              width={35}\n              height={35}\n            />\n          </button>\n\n          <button\n            className=\"auth-button\"\n            data-testid=\"social-login-button\"\n            onClick={() => connectWithConnector(0)}\n          >\n            <h4>Social Login</h4>\n            <div className=\"social-icons flex\">\n              <Image alt=\"apple\" src=\"/apple.svg\" width={35} height={35} />\n              <Image\n                alt=\"facebook\"\n                src=\"/facebook.svg\"\n                width={35}\n                height={35}\n              />\n              <Image alt=\"google\" src=\"/google.svg\" width={35} height={35} />\n            </div>\n          </button>\n          {!isMobile && (\n            <div>\n              <button\n                className=\"auth-button\"\n                data-testid=\"metamask-login-button\"\n                onClick={() => connectWithConnector(1)}\n              >\n                <h4>Metamask</h4>\n                <Image\n                  alt=\"metamask\"\n                  src=\"/metamask.svg\"\n                  width={35}\n                  height={35}\n                />\n              </button>\n            </div>\n          )}\n\n          <button\n            className=\"auth-button\"\n            data-testid=\"walletconnect-login-button\"\n            onClick={() => connectWithWallectConnect()}\n          >\n            <h4>WalletConnect (EVM)</h4>\n\n            <Image\n              alt=\"walletconnect\"\n              src=\"/walletconnect.svg\"\n              width={35}\n              height={35}\n            />\n          </button>\n          <button\n            className=\"auth-button\"\n            data-testid=\"vechain-login-button\"\n            onClick={() =>\n              requireUserAgreed(() => {\n                open();\n                closeModal();\n              })\n            }\n          >\n            <h4>VeChain</h4>\n            <Image alt=\"ve\" src=\"/ve.png\" width={35} height={35} />\n          </button>\n        </div>\n\n        <div\n          ref={tosRef}\n          className=\"pb-4 flex text-sm justify-center items-center\"\n        >\n          <input\n            type=\"checkbox\"\n            defaultChecked={hasUserAgreed || undefined}\n            data-testid=\"tos-checkbox\"\n            value=\"\"\n            className={clsx(\n              \"w-5 h-5 rounded accent-cyan-600 outline-none bg-white\",\n              !hasUserAgreed && \"appearance-none\",\n              userRejected && \"border border-red-400\"\n            )}\n            onChange={() => setHasUserAgreed(!hasUserAgreed)}\n          />\n          <span className=\"ml-2\">\n            Agree with <ToS />\n          </span>\n        </div>\n\n        {userRejected && (\n          <div className=\"p-2 text-center text-red-400\">\n            Please accept our Terms to sign up\n          </div>\n        )}\n      </section>\n    </>\n  );\n}\n","import { useWallet } from \"@vechain/dapp-kit-react\";\nimport Cookies from \"js-cookie\";\nimport Image from \"next/image\";\nimport { QRCodeSVG } from \"qrcode.react\";\nimport { useState, useEffect, useContext } from \"react\";\nimport { Tooltip } from \"react-tooltip\";\nimport { useAccount, useDisconnect } from \"wagmi\";\n\nimport { ModalContext } from \"@/lib/context\";\nimport { useUserStore } from \"@/lib/store\";\nimport { sliceAddress } from \"@/lib/utils\";\n\ntype Props = {\n  address?: string;\n  idrissName?: string;\n  ensName?: string;\n  isStellarConnected: boolean;\n  isVeConnected: boolean;\n  setStellarConnected: (bool: boolean) => void;\n  setStellarAddress: (str: string) => void;\n};\n\nexport default function UserInfoModal({\n  address,\n  idrissName,\n  ensName,\n  isStellarConnected,\n  isVeConnected,\n  setStellarConnected,\n  setStellarAddress,\n}: Props) {\n  const { disconnect } = useDisconnect();\n  const { chain } = useAccount();\n  const { closeModal } = useContext(ModalContext);\n  const [isCopiedTooltipOpen, setIsCopiedTooltipOpen] = useState(false);\n  const { setTransfers, setCTAs, setRecipientsView } = useUserStore();\n  const { disconnect: veDisconnect } = useWallet();\n\n  const email = Cookies.get(\"glo-email\");\n\n  useEffect(() => {\n    if (isCopiedTooltipOpen) {\n      setTimeout(() => setIsCopiedTooltipOpen(false), 2000);\n    }\n  }, [isCopiedTooltipOpen]);\n\n  const handleLogout = () => {\n    if (isStellarConnected) {\n      disconnectStellar();\n    }\n    if (isVeConnected) {\n      veDisconnect();\n    } else {\n      disconnect();\n    }\n    setTransfers({ transfers: [] });\n    setCTAs([]);\n    localStorage.setItem(\"showedLogin\", \"true\");\n    setRecipientsView(false);\n\n    closeModal();\n  };\n\n  async function disconnectStellar() {\n    localStorage.setItem(\"stellarAddress\", \"\");\n    localStorage.setItem(\"stellarConnected\", \"false\");\n    localStorage.setItem(\"stellarWalletId\", \"\");\n    setStellarAddress(\"\");\n    setStellarConnected(false);\n  }\n\n  return (\n    <div className=\"py-6 px-10\">\n      <div className=\"flex flex-row justify-between\">\n        <div></div>\n        <button className=\"\" onClick={() => closeModal()}>\n          <Image alt=\"x\" src=\"/x.svg\" height={16} width={16} />\n        </button>\n      </div>\n      <section className=\"flex flex-col items-center\">\n        <div className=\"my-4 p-4 border-2\">\n          <QRCodeSVG size={169} value={address!} data-testid=\"profile-qr\" />\n        </div>\n        <div>\n          <h5>Network:</h5>\n          <div className=\"copy pseudo-input-text text-sm\">\n            <span data-testid=\"profile-network\">\n              {isStellarConnected && <div>Stellar</div>}\n              {isVeConnected && <div>VeChain</div>}\n              {!isStellarConnected && !isVeConnected && (\n                <div>\n                  {chain?.name} ({chain?.id})\n                </div>\n              )}\n            </span>\n          </div>\n\n          <h5 className=\"mt-6\">Wallet Address:</h5>\n          <div className=\"copy pseudo-input-text text-sm\">\n            <span data-testid=\"profile-address\">\n              {sliceAddress(address!, 9)}\n            </span>\n            <Tooltip id=\"copy-deposit-tooltip\" isOpen={isCopiedTooltipOpen} />\n            <button\n              data-tooltip-id=\"copy-deposit-tooltip\"\n              data-tooltip-content=\"Copied!\"\n              className=\"pl-2\"\n              onClick={() => {\n                navigator.clipboard.writeText(address!);\n                setIsCopiedTooltipOpen(true);\n              }}\n            >\n              <Image src={`/copy.svg`} height={15} width={15} alt=\"\" />\n            </button>\n          </div>\n\n          {email && (\n            <>\n              <h5 className=\"mt-6\">Email:</h5>\n              <div className=\"copy pseudo-input-text text-sm\">\n                <span data-testid=\"profile-email\">{email}</span>\n              </div>\n            </>\n          )}\n          {idrissName && (\n            <>\n              <h5 className=\"mt-6\">IDriss ID:</h5>\n              <div className=\"copy pseudo-input-text text-sm\">\n                <span data-testid=\"profile-idriss\">{idrissName}</span>\n              </div>\n            </>\n          )}\n          {ensName && (\n            <>\n              <h5 className=\"mt-6\">Ens:</h5>\n              <div className=\"copy pseudo-input-text text-sm\">\n                <span data-testid=\"profile-ens\">{ensName}</span>\n              </div>\n            </>\n          )}\n        </div>\n      </section>\n      <section className=\"mt-8 flex flex-col justify-end\">\n        <button\n          className=\"primary-button\"\n          onClick={() => handleLogout()}\n          data-testid=\"profile-logout\"\n        >\n          Log out\n        </button>\n      </section>\n    </div>\n  );\n}\n","import { useWallet } from \"@vechain/dapp-kit-react\";\nimport Head from \"next/head\";\nimport Image from \"next/image\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Tooltip } from \"react-tooltip\";\nimport { useAccount, useConnect } from \"wagmi\";\n\nimport AddToWallet from \"@/components/AddToWallet\";\nimport NetworkSwitcher from \"@/components/NetworkSwitcher\";\nimport { ModalContext } from \"@/lib/context\";\nimport { useUserStore } from \"@/lib/store\";\nimport { sliceAddress } from \"@/lib/utils\";\n\nimport UserAuthModal from \"./Modals/UserAuthModal\";\nimport UserInfoModal from \"./Modals/UserInfoModal\";\n\nexport default function Header({\n  idrissName,\n  ensName,\n  stellarConnected,\n  stellarAddress,\n  setStellarConnected,\n  setStellarAddress,\n}: {\n  idrissName: string;\n  ensName: string;\n  stellarConnected: boolean;\n  stellarAddress: string;\n  setStellarConnected: (bool: boolean) => void;\n  setStellarAddress: (str: string) => void;\n}) {\n  const { isPending } = useConnect();\n  const { address, isConnected, connector } = useAccount();\n  const [isCopiedTooltipOpen, setIsCopiedTooltipOpen] = useState(false);\n  const { openModal } = useContext(ModalContext);\n  const { setRecipientsView } = useUserStore();\n  const { account: veAccount } = useWallet();\n\n  const isVeConnected = !!veAccount;\n\n  const isSequenceWallet = connector?.id === \"sequence\";\n  const isCoinbaseWallet = connector?.id === \"coinbaseWalletSDK\";\n  const isWc = connector?.id === \"walletConnect\";\n\n  useEffect(() => {\n    if (isCopiedTooltipOpen) {\n      setTimeout(() => setIsCopiedTooltipOpen(false), 2000);\n    }\n  }, [isCopiedTooltipOpen]);\n\n  const openUserInfoModal = (userAddress: string | undefined) => {\n    openModal(\n      <UserInfoModal\n        address={userAddress}\n        idrissName={idrissName}\n        ensName={ensName}\n        isStellarConnected={stellarConnected}\n        isVeConnected={isVeConnected}\n        setStellarConnected={setStellarConnected}\n        setStellarAddress={setStellarAddress}\n      />\n    );\n  };\n\n  const openUserAuthModal = () => {\n    openModal(\n      <UserAuthModal\n        setStellarConnected={setStellarConnected}\n        setStellarAddress={setStellarAddress}\n      />,\n      \"bg-transparent\"\n    );\n  };\n\n  return (\n    <>\n      <Head>\n        <title>Glo Dollar App</title>\n      </Head>\n\n      <nav className=\"mt-4 mb-6 flex justify-between items-center\">\n        <a className=\"cursor-pointer\" onClick={() => setRecipientsView(false)}>\n          <Image src=\"/glo-logo.png\" alt=\"glo logo\" width={34} height={26} />\n        </a>\n\n        {isPending ? (\n          <button className=\"primary-button\">Connecting... </button>\n        ) : isConnected ||\n          isSequenceWallet ||\n          isVeConnected ||\n          stellarConnected ? (\n          <div className=\"flex z-10\">\n            {!isSequenceWallet &&\n              !isCoinbaseWallet &&\n              !isVeConnected &&\n              !stellarConnected &&\n              !isWc && <AddToWallet />}\n            {isConnected && <NetworkSwitcher />}\n            <Tooltip\n              id=\"copy-wallet-tooltip\"\n              content=\"Copied!\"\n              isOpen={isCopiedTooltipOpen}\n            />\n            <button\n              data-tooltip-id=\"copy-wallet-tooltip\"\n              data-tooltip-content=\"Copied!\"\n              className=\"text-sm text-pine-800 mr-3 font-normal\"\n              onClick={() => {\n                navigator.clipboard.writeText(\n                  ensName ||\n                    idrissName ||\n                    address! ||\n                    stellarAddress ||\n                    veAccount!\n                );\n                setIsCopiedTooltipOpen(true);\n              }}\n            >\n              {ensName ||\n                idrissName ||\n                sliceAddress(address! || stellarAddress || veAccount || \"\")}\n            </button>\n            <button\n              className=\"primary-button w-9 h-9\"\n              onClick={() =>\n                openUserInfoModal(\n                  address?.toString() ||\n                    stellarAddress ||\n                    veAccount ||\n                    undefined\n                )\n              }\n              data-testid=\"profile-button\"\n            >\n              👤\n            </button>\n          </div>\n        ) : (\n          <div className=\"flex\">\n            <button\n              className=\"primary-button mr-2\"\n              data-testid=\"primary-login-button\"\n              onClick={() => openUserAuthModal()}\n            >\n              Log in\n            </button>\n          </div>\n        )}\n      </nav>\n    </>\n  );\n}\n","import { useConnex, useWallet } from \"@vechain/dapp-kit-react\";\nimport {\n  arbitrum,\n  arbitrumSepolia,\n  base,\n  baseSepolia,\n  celo,\n  celoAlfajores,\n  goerli,\n  mainnet,\n  optimism,\n  optimismSepolia,\n  polygon,\n  polygonMumbai,\n  vechain,\n} from \"@wagmi/core/chains\";\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport Head from \"next/head\";\nimport { useRouter } from \"next/router\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { erc20Abi } from \"viem\";\nimport { useAccount, useBalance, useEnsName, useSwitchChain } from \"wagmi\";\n\nimport Balance from \"@/components/Balance\";\nimport CTA from \"@/components/CTA\";\nimport BuyGloModal from \"@/components/Modals/BuyGloModal\";\nimport Recipients from \"@/components/Recipients\";\nimport {\n  chainConfig,\n  defaultChainId,\n  getSmartContractAddress,\n} from \"@/lib/config\";\nimport { ModalContext } from \"@/lib/context\";\nimport { getIdrissName } from \"@/lib/idriss\";\nimport { useUserStore } from \"@/lib/store\";\nimport { useAutoConnect } from \"@/lib/useAutoConnect\";\nimport {\n  api,\n  getAllowedChains,\n  horizonUrl,\n  initApi,\n  isProd,\n} from \"@/lib/utils\";\nimport {\n  customFormatBalance,\n  getTotalGloBalance,\n  getUSDCContractAddress,\n} from \"@/utils\";\n\nimport Header from \"./Header\";\nimport BuyWithCoinbaseSequenceModal from \"./Modals/BuyWithCoinbaseSequenceModal\";\nimport SwapGate from \"./Modals/SwapGate\";\nimport UserAuthModal from \"./Modals/UserAuthModal\";\n\nconst startBalance = (decimals: number) => ({\n  decimals,\n  symbol: \"USDGLO\",\n  formatted: \"0\",\n  value: BigInt(0),\n});\n\nexport default function Home() {\n  const { address, isConnected, connector, chain } = useAccount();\n  const { switchChain } = useSwitchChain();\n  const { openModal, closeModal } = useContext(ModalContext);\n  const { setCTAs, isRecipientsView, veBalanceRefresher } = useUserStore();\n\n  const [idrissName, setIdrissName] = useState(\"\");\n  const [stellarConnected, setStellarConnected] = useState(\n    localStorage.getItem(\"stellarConnected\") === \"true\"\n  );\n  const [stellarAddress, setStellarAddress] = useState(\n    localStorage.getItem(\"stellarAddress\") || \"\"\n  );\n  const [stellarBalance, setStellarBalance] = useState(startBalance(7));\n\n  const [veBalance, setVeBalance] = useState(startBalance(18));\n\n  const connex = useConnex();\n  const { account: veAddress } = useWallet();\n  const veConnected = !!veAddress;\n\n  useEffect(() => {\n    if (veAddress) {\n      // TODO: Could be replaced with Viem confifured for Ve and custom Ve testnet\n      connex.thor\n        .account(chainConfig[isProd() ? vechain.id : -1]) // TODO:\n        .method(erc20Abi.find((x) => x.name === \"balanceOf\")!)\n        .call(veAddress)\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .then((result: any) => {\n          const value = BigInt(result.decoded[0]);\n          setVeBalance({\n            ...veBalance,\n            value,\n            formatted: (value / BigInt(10 ** 18)).toString(),\n          });\n        });\n    } else {\n      setVeBalance(startBalance(18));\n    }\n  }, [veAddress, veBalanceRefresher]);\n\n  const { data: ensName } = useEnsName({ address });\n\n  const usdcBalance = useBalance({\n    address,\n    token: getUSDCContractAddress(chain!),\n\n    query: {\n      gcTime: 2_000,\n    },\n  });\n  const polygonId = isProd() ? polygon.id : polygonMumbai.id;\n  const { data: polygonBalance } = useBalance({\n    address,\n    token: getSmartContractAddress(polygonId),\n    query: {\n      gcTime: 2_000,\n    },\n    chainId: polygonId,\n  });\n\n  const ethereumId = isProd() ? mainnet.id : goerli.id;\n  const { data: ethereumBalance } = useBalance({\n    address,\n    token: getSmartContractAddress(ethereumId),\n    query: {\n      gcTime: 2_000,\n    },\n    chainId: ethereumId,\n  });\n\n  const celoId = isProd() ? celo.id : celoAlfajores.id;\n  const { data: celoBalance } = useBalance({\n    address,\n    token: getSmartContractAddress(celoId),\n    query: {\n      gcTime: 2_000,\n    },\n    chainId: celoId,\n  });\n\n  const optimismId = isProd() ? optimism.id : optimismSepolia.id;\n  const { data: optimismBalance } = useBalance({\n    address,\n    token: getSmartContractAddress(optimismId),\n    query: {\n      gcTime: 2_000,\n    },\n    chainId: optimismId,\n  });\n\n  const arbitrumId = isProd() ? arbitrum.id : arbitrumSepolia.id;\n  const { data: arbitrumBalance } = useBalance({\n    address,\n    token: getSmartContractAddress(arbitrumId),\n    query: {\n      gcTime: 2_000,\n    },\n    chainId: arbitrumId,\n  });\n\n  const baseId = isProd() ? base.id : baseSepolia.id;\n  const { data: baseBalance } = useBalance({\n    address,\n    token: getSmartContractAddress(baseId),\n    query: {\n      gcTime: 2_000,\n    },\n    chainId: baseId,\n  });\n\n  const totalBalance = getTotalGloBalance([\n    ethereumBalance,\n    polygonBalance,\n    celoBalance,\n    optimismBalance,\n    arbitrumBalance,\n    stellarBalance,\n    baseBalance,\n    veBalance,\n  ]);\n\n  const showedLogin = localStorage.getItem(\"showedLogin\");\n\n  const { asPath, push } = useRouter();\n\n  const isSafe =\n    window.location.ancestorOrigins?.length > 0 &&\n    window.location.ancestorOrigins[0] === \"https://app.safe.global\";\n  useAutoConnect(isSafe);\n\n  useEffect(() => {\n    if (\n      (!isConnected && !showedLogin && !isSafe) ||\n      asPath.startsWith(\"/sign-in\")\n    ) {\n      const connector = asPath.replace(\"/sign-in/\", \"\");\n      openModal(\n        <UserAuthModal\n          setStellarConnected={setStellarConnected}\n          setStellarAddress={setStellarAddress}\n          connector={connector}\n        />,\n        \"bg-transparent\"\n      );\n      localStorage.setItem(\"showedLogin\", \"true\");\n      push(\"/\");\n    }\n  }, []);\n\n  useEffect(() => {\n    const getStellarBalance = async () => {\n      const apiUrl = `${horizonUrl}/accounts/${stellarAddress}`;\n      try {\n        const res = await axios.get(apiUrl, {\n          headers: { Accept: \"application/json\" },\n        });\n        const stellarBalanceValue = await res.data.balances.reduce(\n          (acc: any, cur: any) =>\n            cur.asset_code == \"USDGLO\" ? (acc += parseFloat(cur.balance)) : acc,\n          0\n        );\n        const bigIntStellarBalance = BigInt(\n          `${stellarBalanceValue}`.replace(\".\", \"\")\n        );\n        setStellarBalance({\n          decimals: 7,\n          symbol: \"USDGLO\",\n          formatted: `${stellarBalanceValue}`,\n          value: bigIntStellarBalance,\n        });\n      } catch (err) {\n        console.log(\"Could not fetch Stellar balance\");\n      }\n    };\n    if (stellarConnected) {\n      getStellarBalance();\n    } else {\n      setStellarBalance(startBalance(7));\n    }\n  }, [stellarConnected]);\n\n  useEffect(() => {\n    const allowedChains = getAllowedChains();\n    const currentChainAllowed = allowedChains.some(\n      (allowedChain) => allowedChain.id === chain?.id\n    );\n\n    const isSequenceWallet = connector?.id === \"sequence\";\n    const shouldSwitchToDefault =\n      !currentChainAllowed ||\n      (isSequenceWallet && chain?.id !== defaultChainId());\n    if (isConnected && shouldSwitchToDefault) {\n      // This timeout avoids some Sequence condition race\n      setTimeout(() => {\n        switchChain?.({ chainId: defaultChainId() });\n      }, 0);\n    }\n  }, [switchChain]);\n\n  useEffect(() => {\n    if (isConnected || stellarConnected || veConnected) {\n      const _key = `glo-wallet-${stellarConnected ? stellarAddress : address}`;\n\n      const sign = async () => {\n        return \"public-signature\";\n        // Temporary disabled\n        // const storedSignature = localStorage.getItem(key);\n        // if (storedSignature) {\n        //   return storedSignature;\n        // }\n\n        // const signature = await signMessageAsync();\n        // localStorage.setItem(key, signature); return signature;\n      };\n\n      sign().then(async (signature: string) => {\n        if (isConnected) {\n          await initApi(address!, chain!.id, signature);\n        } else if (stellarConnected) {\n          await initApi(stellarAddress, 0, signature);\n        } else if (veConnected) {\n          await initApi(`ve${veAddress}`, vechain.id, signature);\n        }\n\n        const email = Cookies.get(\"glo-email\") || null;\n\n        const { data: userId } = await api().post<string>(`/sign-in`, {\n          email,\n        });\n\n        Cookies.set(\"glo-user\", userId);\n\n        api()\n          .get<CTA[]>(`/ctas`)\n          .then((res) => setCTAs(res.data));\n\n        if (isConnected) {\n          const idrissName = (await getIdrissName(address!)) as string;\n          setIdrissName(idrissName);\n        }\n        localStorage.setItem(\"loggedIn\", \"true\");\n      });\n    } else {\n      Cookies.remove(\"glo-email\");\n      Cookies.remove(\"glo-proof\");\n\n      if (!localStorage.getItem(\"showedLogin\")) {\n        closeModal();\n        openModal(\n          <UserAuthModal\n            setStellarConnected={setStellarConnected}\n            setStellarAddress={setStellarAddress}\n          />,\n          \"bg-transparent\"\n        );\n      }\n      localStorage.setItem(\"showedLogin\", \"true\");\n      localStorage.setItem(\"loggedIn\", \"false\");\n    }\n  }, [isConnected, stellarConnected, veConnected]);\n\n  useEffect(() => {\n    if (!isConnected) {\n      return;\n    }\n    if (asPath === \"/buy\") {\n      openModal(<BuyGloModal totalBalance={1000} />);\n      push(\"/\");\n    } else if (asPath === \"/purchased-coinbase\") {\n      openModal(<SwapGate buyAmount={1000} />);\n      push(\"/\");\n    } else if (asPath === \"/purchased-sequence\") {\n      openModal(<BuyWithCoinbaseSequenceModal buyAmount={1000} />);\n      push(\"/\");\n    }\n  }, []);\n  return (\n    <>\n      <Head>\n        <meta\n          name=\"description\"\n          content=\"Sign up to buy Glo Dollar using our app. See your transactions and the impact your Glo Dollar holdings have.\"\n        />\n\n        <meta property=\"og:url\" content=\"https://app.glodollar.org/\" />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content=\"Glo Dollar App\" />\n        <meta\n          property=\"og:description\"\n          content=\"Sign up to buy Glo Dollar using our app. See your transactions and the impact your Glo Dollar holdings have.\"\n        />\n        <meta\n          property=\"og:image\"\n          content=\"https://uploads-ssl.webflow.com/62289d6493efe7c3b765d6bd/63d146d464f48942d593bc57_Group%204%20(3).png\"\n        />\n        <meta property=\"og:image:alt\" content=\"Glo Dollar logo\" />\n\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta property=\"twitter:url\" content=\"https://app.glodollar.org/\" />\n        <meta name=\"twitter:title\" content=\"Glo Dollar App\" />\n        <meta\n          name=\"twitter:description\"\n          content=\"Sign up to buy Glo Dollar using our app. See your transactions and the impact your Glo Dollar holdings have.\"\n        />\n        <meta\n          name=\"twitter:image\"\n          content=\"https://uploads-ssl.webflow.com/62289d6493efe7c3b765d6bd/63d146d464f48942d593bc57_Group%204%20(3).png\"\n        />\n        <meta name=\"twitter:image:alt\" content=\"Glo Dollar logo\" />\n      </Head>\n      <div className=\"mt-4 px-6 bg-pine-100\">\n        <Header\n          idrissName={idrissName}\n          ensName={ensName || \"\"}\n          stellarConnected={stellarConnected}\n          stellarAddress={stellarAddress}\n          setStellarConnected={setStellarConnected}\n          setStellarAddress={setStellarAddress}\n        />\n        <div className=\"flex flex-col space-y-4\">\n          {isRecipientsView ? (\n            <Recipients\n              yearlyYield={customFormatBalance(totalBalance).yearlyYield}\n            />\n          ) : (\n            <>\n              <Balance\n                stellarBalance={stellarBalance}\n                polygonBalance={polygonBalance}\n                ethereumBalance={ethereumBalance}\n                celoBalance={celoBalance}\n                optimismBalance={optimismBalance}\n                arbitrumBalance={arbitrumBalance}\n                baseBalance={baseBalance}\n                totalBalance={totalBalance}\n                usdcBalance={usdcBalance.data}\n                veBalance={veBalance}\n                stellarConnected={stellarConnected}\n                veConnected={veConnected}\n              />\n\n              <CTA\n                balance={totalBalance?.formatted}\n                identity={\n                  idrissName || address! || stellarAddress! || veAddress!\n                }\n              />\n            </>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n"],"names":["CharitySelector","CHARITY_MAP","data","error","isLoading","useSWR","getCurrentSelectedCharity","setRecipientsView","useUserStore","console","selected","length","name","short_name","div","className","button","onClick","Image","src","width","height","alt","p","style","commonOptions","loop","autoplay","totalBalance","isConnected","useAccount","options","animationData","value","gloAnimation","gloAnimationInverted","View","play","useLottie","useEffect","ImpactInset","openModal","yearlyYield","yearlyYieldFormatted","bgColorClass","BuyGloModal","motion","initial","opacity","animate","transition","duration","GloAnimated","getVeChainTokenBalance","async","tokenAddress","walletAddress","chainId","provider","getJsonProvider","abi","tokenContract","ethers","balanceOf","err","log","BigInt","getPairReserves","pairAddress","pairContract","reserves","getReserves","reserve0","_reserve0","reserve1","_reserve1","blockTimestampLast","Number","_blockTimestampLast","getQuoteFromRouter","routerAddress","amountA","reserveA","reserveB","routerContract","amountB","quote","calculateQuote","formatUnits","decimals","Math","pow","toFixed","addVeChainLiquidity","connex","tokenA","tokenB","amountADesired","amountBDesired","userAddress","slippageTolerance","slippageMultiplier","amountAMin","floor","amountBMin","deadline","Date","now","addLiquidityABI","inputs","internalType","type","outputs","stateMutability","approveABI","constant","payable","tokenAContract","thor","account","method","tokenBContract","VECHAIN_ROUTER_ADDRESS","tokenAApprovalClause","asClause","toString","tokenBApprovalClause","addLiquidityClause","clauses","comment","B3TR","USDGLO","result","vendor","sign","signer","gas","request","getLPTokenTotalSupply","lpTokenAddress","lpContract","totalSupply","calculateRemoveLiquidityAmounts","lpTokenAmount","amount0","amount1","percentage","removeVeChainLiquidity","liquidity","removeLiquidityABI","lpTokenContract","VECHAIN_B3TR_USDGLO_POOL","lpTokenApprovalClause","removeLiquidityClause","formatReserve","reserve","usePairReserves","enabled","gcTime","staleTime","refetchInterval","chain","targetChainId","id","vechain","queryKey","isError","isSuccess","refetch","useQuery","queryFn","Error","formatted","Boolean","retry","retryDelay","attemptIndex","min","formatAmount","amount","calculatePrice","useQuote","useClientSide","price","inversePrice","RemoveLiquidityModal","address","closeModal","useContext","ModalContext","refreshVeBalance","veAddress","useWallet","useConnex","isCopiedTooltipOpen","setIsCopiedTooltipOpen","useState","lpTokenVeBalance","setLpTokenVeBalance","setTotalSupply","lpAmountToRemove","setLpAmountToRemove","setPercentage","isRemovingLiquidity","setIsRemovingLiquidity","isVe","lpTokenBalance","useBalance","token","query","reservesLoading","gloToken","b3trToken","base","lpBal","totalSup","Promise","all","fetchVeData","fetchEvmData","setTimeout","displayAddress","currentLpBalance","formatBalance","balance","expectedAmounts","parseFloat","handlePercentageChange","newPercentage","lpAmount","Tooltip","isOpen","data-tooltip-id","data-tooltip-content","navigator","clipboard","writeText","sliceAddress","section","LiquidityModal","span","map","pct","input","max","step","onChange","e","target","label","placeholder","lpAmountBigInt","handleLpAmountChange","img","expectedTokens","disabled","ctas","setCTAs","b3trVeBalance","setB3trVeBalance","usdgloVeBalance","setUsdgloVeBalance","b3trAmount","setB3trAmount","usdgloAmount","setUsdgloAmount","isB3trInput","setIsB3trInput","isAddingLiquidity","setIsAddingLiquidity","b3trBalance","usdgloBalance","b3trAmountBigInt","usdgloAmountBigInt","usdgloQuote","usdgloQuoteLoading","token1","undefined","token0","b3trQuote","b3trQuoteLoading","b3trBal","usdgloBal","fetchVeBalances","handleB3trAmountChange","handleUsdgloAmountChange","api","post","cta","isCompleted","SellModal","sellAmount","wagmiAddress","connector","isSwapForm","setIsSwapForm","isBase","baseSepolia","isCelo","celo","celoAlfajores","isCoinbaseWallet","isSequenceWallet","forceBaseTarget","veAccount","usdcBalance","getUSDCContractAddress","getSmartContractAddress","symbol","image","usdcToken","back","SquidStep","StepCard","iconPath","title","content","action","SquidModal","buyAmount","usdc","SequenceSwap","index","url","chainConfig","window","open","done","USDC","OfframpStep","sessionToken","getCoinbaseSessionToken","getCoinbaseOffRampUrl","location","origin","POPUP_PROPS","CoinbaseSwap","SwapDefault","from","to","onSuccess","usdcChain","blackBg","sellWithBetterSwap","Balance","polygonBalance","ethereumBalance","celoBalance","optimismBalance","arbitrumBalance","baseBalance","stellarConnected","veConnected","showBalanceDropdown","setShowBalanceDropdown","polygonBalanceFormatted","customFormatBalance","ethereumBalanceFormatted","celoBalanceFormatted","optimismBalanceFormatted","arbitrumBalanceFormatted","totalBalanceFormatted","baseBalanceformatted","hasGlo","formattedUSDC","Intl","NumberFormat","currency","maximumFractionDigits","format","supportedChains","logo","canSell","canAdd","buyOnly","fmtBalanceDollarPart","fmtBalanceCentPart","dblFmtBalance","a","SwapGate","yearlyYieldUSFormatted","clsx","CompletedIcon","path","shown","setShown","controls","useAnimation","ref","useRef","isInView","useInView","start","Cookies","get","set","confetti","particleCount","spread","angle","startVelocity","y","x","IdrissConfirmModal","setId","h3","data-testid","then","res","IdrissModal","startedRegistration","setstartedRegistration","requestedRegistration","setRequestedRegistration","href","BUTTON_CLASS_NAME","TwitterLogo","TweetModal","tweetText","tweetVerified","setTweetVerified","setError","find","h2","tweetUrl","encodeURI","tweet","includes","slice","replace","BroadcastChannel","onmessage","event","success","userId","redirectUri","authUrl","process","env","NEXT_PUBLIC_TWITTER_CLIENT_ID","NEXT_PUBLIC_CODE_CHALLENGE","verify","Icon","FillIcon","ActionButton","CTA_MAP","ctaData","link","slug","rel","fillIcon","h5","description","nf","CTA","identity","gloBalance","email","shareImpactText","split","CTAS","DEFAULT_CTAS","ctaList","spring","damping","stiffness","ul","filter","layout","percent","CharitySlider","setPercent","onDelete","Slider","Array","isArray","defaultValue","railStyle","backgroundColor","trackStyle","handleStyle","border","marginTop","marks","CharityManageModal","props","walletClient","useWalletClient","percentMap","setPercentMap","touched","setTouched","lastTouchedKey","setLastTouchedKey","isAutoDistributed","setIsAutoDistributed","isAddNewMode","count","Object","keys","equal","last","updated","entries","forEach","key","setShowToast","useToastStore","selectedKeys","charities","sumPercentages","values","reduce","acc","cur","mutate","onClose","autoDistribute","allKeys","totalTouchedPercentage","remainingPercentage","scalingFactor","leftover","untouchedKeys","untouchedCount","equalDistribution","distributedTotal","updateSelectedCharity","currentDateTimeString","toISOString","nonZeroCharities","charity","signingBody","timestamp","signingBodyString","JSON","stringify","apiBody","sigFields","sig","message","localStorage","getItem","signMessage","signCharityUpdateMessage","choices","showToast","prev","fetchFundingChoices","fetch","ok","json","Recipients","setSelected","search","setSearch","fundingData","fundingError","possibleFundingChoices","totalYield","setTotalYield","selectedCharities","document","getElementById","classList","add","remove","selectedCharitiesNames","selectedCharitiesMap","searchPhrase","toLowerCase","availableCharitiesMap","calculatedYield","cause","getTotalYield","CharityCard","idriss","IdrissCrypto","NEXT_PUBLIC_POLYGON_RPC_URL","getIdrissName","reverseResolve","AUTOCONNECTED_CONNECTOR_IDS","AddToWallet","isAddToWalletTooltipOpen","setIsAddToWalletTooltipOpen","onMouseOver","onMouseOut","watchAsset","catch","addTokenToWallet","useOutsideClick","callback","handleClickOutside","current","contains","addEventListener","removeEventListener","NetworkSwitcher","switchChain","useSwitchChain","dropdownActive","setDropdownActive","getChainLogoPath","mainnet","polygon","optimism","optimismSepolia","arbitrum","arbitrumSepolia","getAllowedChains","li","TOS_COOKIE","ToS","UserAuthModal","setStellarConnected","setStellarAddress","connect","connectors","useConnect","wcState","setRawWcState","WC_COOKIE","setWcState","state","useWalletModal","tosAlreadyAgreed","hasUserAgreed","setHasUserAgreed","userRejected","tosRef","requireUserAgreed","scrollIntoView","behavior","connectWithConnector","connectStellar","connectWithWallectConnect","stellarKit","StellarWalletsKit","network","isProd","WalletNetwork","PUBLIC","TESTNET","selectedWalletId","XBULL_ID","modules","FreighterModule","xBullModule","HanaModule","LobstrModule","RabetModule","AlbedoModule","WalletConnectModule","projectId","NEXT_PUBLIC_WC_PROJECT_ID","WalletConnectAllowedMethods","SIGN","icons","onWalletSelected","option","setWallet","getPublicKey","setItem","fun","wc","stellar","h4","isMobile","defaultChecked","UserInfoModal","idrissName","ensName","isStellarConnected","isVeConnected","disconnect","useDisconnect","setTransfers","veDisconnect","handleLogout","disconnectStellar","transfers","QRCodeSVG","size","Header","stellarAddress","isPending","isWc","Head","nav","openUserInfoModal","startBalance","Home","isRecipientsView","veBalanceRefresher","setIdrissName","stellarBalance","setStellarBalance","veBalance","setVeBalance","erc20Abi","call","decoded","useEnsName","polygonId","polygonMumbai","ethereumId","goerli","celoId","optimismId","arbitrumId","baseId","getTotalGloBalance","showedLogin","asPath","push","useRouter","isSafe","ancestorOrigins","connectorInstance","c","useAutoConnect","startsWith","apiUrl","horizonUrl","axios","headers","Accept","stellarBalanceValue","balances","asset_code","bigIntStellarBalance","getStellarBalance","currentChainAllowed","some","allowedChain","shouldSwitchToDefault","defaultChainId","signature","initApi","BuyWithCoinbaseSequenceModal","meta","property"],"sourceRoot":""}