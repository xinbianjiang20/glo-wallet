{"version":3,"file":"static/chunks/pages/info/optimism-0b72000e0ce167e1.js","mappings":"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","sources":["webpack://_N_E/?d200","webpack://_N_E/./components/Info/InfoCard.tsx","webpack://_N_E/./components/Info/Table.tsx","webpack://_N_E/./components/Info/data.ts","webpack://_N_E/./pages/info/optimism.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/info/optimism\",\n      function () {\n        return require(\"private-next-pages/info/optimism.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/info/optimism\"])\n      });\n    }\n  ","import axios from \"axios\";\nimport Image from \"next/image\";\nimport useSWR from \"swr\";\n\nimport { backendUrl } from \"@/lib/utils\";\n\nimport { ICard } from \"./types\";\n\nexport function InfoCard(props: { data: ICard }) {\n  const { data } = props;\n\n  const fetcher = (url: string) =>\n    axios.get(`${backendUrl}${url}`).then((res) => {\n      if (data.formatResult) {\n        return data.formatResult(res.data);\n      }\n\n      return res.data;\n    });\n\n  const { data: result, isLoading, error } = useSWR(data.url, fetcher);\n\n  return (\n    <div\n      className={`\n        bg-white shadow-sm rounded-lg\n         border-white border p-3 flex \n         flex-col items-center justify-center text-center\n    `}\n    >\n      <Image\n        src={data.image}\n        width={25}\n        height={25}\n        alt=\"arrow-right\"\n        className=\"flex w-25px max-w-25px h-25px max-h-25px\"\n      />\n\n      {data.count ? (\n        <h2 className=\"my-0 pb-2 pt-3\">{data.count}</h2>\n      ) : (\n        <h2 className=\"my-0 pb-2 pt-3\">\n          {isLoading || error ? \"...\" : result}\n        </h2>\n      )}\n\n      <p className=\"text-sm text-muted font-thin\">{data.title}</p>\n    </div>\n  );\n}\n","import { ITable } from \"./types\";\n\nexport function Table(props: ITable) {\n  return (\n    <div className=\"my-5 \">\n      <h5 className=\" font-semibold mb-2\">{props.title}</h5>\n      {props.others}\n      <div className=\"relative max-h-[400px] overflow-y-scroll overflow-x-auto sm:rounded-lg\">\n        <table className=\"w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400\">\n          <THead data={props.headers} />\n          <tbody>{props.children}</tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport function TRow(props: { td: string[] }) {\n  return (\n    <tr className=\"odd:bg-white even:bg-gray-50 border-b dark:border-gray-300\">\n      {props.td.map((val, i) => (\n        <td key={i} className=\"px-3 py-3 text-gray-600\">\n          {val}\n        </td>\n      ))}\n    </tr>\n  );\n}\n\nfunction THead(props: { data: string[] }) {\n  return (\n    <thead className=\"text-xs text-gray-700 uppercase bg-gray-100 \">\n      <tr>\n        {props.data.map((text, i) => (\n          <th scope=\"col\" className=\"px-4 py-3\" key={i}>\n            {text}\n          </th>\n        ))}\n      </tr>\n    </thead>\n  );\n}\n\nexport const splitAndAddEllipses = (input: string) => {\n  if (input.length <= 7) return input;\n  return (\n    input.slice(0, 5) + \"...\" + input.slice(input.length - 3, input.length)\n  );\n};\n","import { ICard } from \"./types\";\n\nexport function formatToCurrency(num: number) {\n  if (isNaN(num)) {\n    return \"...\";\n  }\n  return num.toLocaleString(\"en-US\", {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n}\n\nconst totalSupplyFormatter = (res: string) => {\n  const dividedByAMillion = (parseInt(res) / 1_000_000).toFixed(2).toString();\n  const withDollarSign = \"$\".concat(dividedByAMillion.toString()).concat(\"M\");\n\n  return withDollarSign;\n};\n\nconst formatNumber = (payload: string) => {\n  return parseInt(payload)\n    .toLocaleString(\"en-US\", {\n      minimumFractionDigits: 0,\n    })\n    .toString();\n};\nexport const infoCards: ICard[] = [\n  {\n    title: \"Glo Dollars in circulation today\",\n    image: \"/info/world.png\",\n    name: \"TOTAL_SUPPLY\",\n    formatResult: totalSupplyFormatter,\n    url: \"/api/total-supply\",\n  },\n  {\n    title: \"Glo Dollar holders\",\n    image: \"/info/shecode.png\",\n    name: \"DOLLAR_HOLDERS\",\n    url: \"/api/total-holders\",\n    formatResult: formatNumber,\n  },\n  {\n    title: \"Glo Dollar transactions\",\n    image: \"/info/calculator.png\",\n    name: \"TOTAL_TRANSACTIONS\",\n    url: \"/api/total-transactions\",\n    formatResult: formatNumber,\n  },\n  {\n    title: \"Organizations integrating Glo\",\n    image: \"/info/handshake.png\",\n    name: \"ORG_INTEGRATED\",\n    url: \"\",\n    count: \"61\",\n  },\n  {\n    title: \"Donated\",\n    image: \"/info/receipt.png\",\n    name: \"DONATED\",\n    url: \"\",\n    count: \"$11,252\",\n  },\n];\n","import { Charity, CharityChoice } from \"@prisma/client\";\nimport { InferGetServerSidePropsType } from \"next\";\n\nimport { infoCards } from \"@/components/Info/data\";\nimport { InfoCard } from \"@/components/Info/InfoCard\";\nimport { splitAndAddEllipses, Table, TRow } from \"@/components/Info/Table\";\nimport { cachedOrFetch } from \"@/lib/cache\";\nimport { fetchHoldersList } from \"@/lib/dune\";\nimport prisma from \"@/lib/prisma\";\n\nexport default function InfoPage({\n  distribution,\n  top10holders,\n}: InferGetServerSidePropsType<typeof getServerSideProps>) {\n  const OptimismDelegates = () => (\n    <div className=\"my-5\">\n      <Table\n        title={\"Delegate and cause\"}\n        headers={[\"Cause\", \"Amount\", \"Holders\"]}\n      >\n        {Object.entries(distribution).map(([charity, { balance, count }]) => (\n          <TRow\n            key={charity}\n            td={[charity, `$${Math.round(balance)}`, `#${count}`]}\n          />\n        ))}\n      </Table>\n    </div>\n  );\n\n  const LargestHolders = () => (\n    <div className=\"my-5\">\n      <Table title={\"Largest current holders\"} headers={[\"Holder\", \"Amount\"]}>\n        {top10holders.map(({ address, balance }) => (\n          <TRow\n            key={address}\n            td={[splitAndAddEllipses(address), `$${Math.round(balance)}`]}\n          />\n        ))}\n      </Table>\n    </div>\n  );\n\n  return (\n    <div className=\"mt-4 px-4 bg-pine-100\">\n      <div className=\"grid grid-cols-2 gap-3\">\n        {infoCards.map((val, i) => (\n          <InfoCard key={i} data={val} />\n        ))}\n      </div>\n      <div className=\"my-5\">\n        <OptimismDelegates />\n        <LargestHolders />\n      </div>\n    </div>\n  );\n}\n\nexport async function getServerSideProps() {\n  const res = cachedOrFetch(\"op-info-data\", fetchOpData);\n  return { props: res };\n}\n\nconst fetchOpData = async () => {\n  const allFundingChoices = await prisma.charityChoice.findMany({\n    distinct: [\"address\", \"name\"],\n    orderBy: { choiceNum: \"desc\" },\n  });\n\n  const choicesByAddress = allFundingChoices.reduce(\n    (acc, cur) => ({\n      ...acc,\n      [cur.address.toLowerCase()]: [\n        ...(acc[cur.address.toLowerCase()] || []),\n        cur,\n      ],\n    }),\n    {} as {\n      [key: string]: CharityChoice[];\n    }\n  );\n\n  const filteredChoicesByAddress = {} as {\n    [key: string]: {\n      name: Charity;\n      percent: number;\n    }[];\n  };\n\n  for (const address of Object.keys(choicesByAddress)) {\n    const choices = choicesByAddress[address];\n    const lastChoiceNum = Math.max(...choices.map((x) => x.choiceNum));\n    const filteredChoices = choices.filter(\n      (x) => x.choiceNum === lastChoiceNum\n    );\n    if (!filteredChoices.length) {\n      continue;\n    }\n\n    filteredChoicesByAddress[address] = filteredChoices.map((x) => ({\n      name: x.name,\n      percent: x.percent,\n    }));\n  }\n\n  const holders = await fetchHoldersList();\n\n  const distribution: {\n    [charity: string]: { balance: number; count: number };\n  } = {\n    RETRO_PG_OP: { balance: 0, count: 0 },\n  };\n\n  holders.data.forEach(({ address: addr, balance }) => {\n    const address = addr.toLowerCase();\n\n    if (filteredChoicesByAddress[address]) {\n      const choices = filteredChoicesByAddress[address];\n\n      choices.forEach(({ name, percent }) => {\n        if (!(name in distribution)) {\n          distribution[name] = { balance: 0, count: 0 };\n        }\n        distribution[name].balance += balance * (percent / 100);\n        distribution[name].count += 1;\n      });\n    } else {\n      distribution.RETRO_PG_OP.balance += balance;\n      distribution.RETRO_PG_OP.count += 1;\n    }\n  });\n\n  const top10holders = holders.data.slice(0, 10);\n\n  return { distribution, top10holders };\n};\n"],"names":["window","__NEXT_P","push","InfoCard","props","data","result","isLoading","error","useSWR","url","axios","get","backendUrl","then","res","formatResult","div","className","Image","src","image","width","height","alt","count","h2","p","title","Table","h5","others","table","THead","headers","tbody","children","TRow","tr","td","map","val","i","thead","text","th","scope","splitAndAddEllipses","input","length","slice","formatToCurrency","num","isNaN","toLocaleString","minimumFractionDigits","maximumFractionDigits","formatNumber","payload","parseInt","toString","infoCards","name","dividedByAMillion","toFixed","concat","InfoPage","distribution","top10holders","OptimismDelegates","Object","entries","charity","balance","Math","round","LargestHolders","address"],"sourceRoot":""}