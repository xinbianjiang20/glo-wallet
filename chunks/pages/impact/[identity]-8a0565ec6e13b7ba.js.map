{"version":3,"file":"static/chunks/pages/impact/[identity]-8a0565ec6e13b7ba.js","mappings":"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","sources":["webpack://_N_E/?0a9f","webpack://_N_E/./components/Navbar.tsx","webpack://_N_E/./pages/impact/[identity].tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/impact/[identity]\",\n      function () {\n        return require(\"private-next-pages/impact/[identity].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/impact/[identity]\"])\n      });\n    }\n  ","import Image from \"next/image\";\n\nexport default function Navbar() {\n  return (\n    <nav className=\"mt-4 mb-6 px-6 flex justify-between items-center\">\n      <a href=\"https://glodollar.org/\">\n        <Image src=\"/glo-logo-text.svg\" alt=\"glo logo\" width={74} height={26} />\n      </a>\n    </nav>\n  );\n}\n","import axios from \"axios\";\nimport { GetServerSidePropsContext, InferGetServerSidePropsType } from \"next\";\nimport Head from \"next/head\";\nimport Image from \"next/image\";\nimport { useRouter } from \"next/router\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Tooltip } from \"react-tooltip\";\nimport { createPublicClient, http } from \"viem\";\nimport { mainnet } from \"viem/chains\";\nimport { getEnsAddress, normalize } from \"viem/ens\";\n\nimport BuyGloModal from \"@/components/Modals/BuyGloModal\";\nimport Navbar from \"@/components/Navbar\";\nimport { getBalances } from \"@/lib/balance\";\nimport { ModalContext } from \"@/lib/context\";\nimport { idriss } from \"@/lib/idriss\";\nimport { lastSliceAddress, sliceAddress } from \"@/lib/utils\";\nimport {\n  customFormatBalance,\n  getTotalYield,\n  getUSFormattedNumber,\n} from \"@/utils\";\n\nimport { KVResponse } from \"../api/transfers/first-glo/[address]\";\n\nexport default function Impact({\n  address,\n  idrissIdentity,\n  ensIdentity,\n  balance,\n  yearlyYield,\n  polygonBalanceFormatted,\n  ethereumBalanceFormatted,\n  celoBalanceFormatted,\n  optimismBalanceFormatted,\n  arbitrumBalanceFormatted,\n  baseBalanceFormatted,\n  isVe,\n}: InferGetServerSidePropsType<typeof getServerSideProps>) {\n  const [isCopiedTooltipOpen, setIsCopiedTooltipOpen] = useState(false);\n  const { openModal } = useContext(ModalContext);\n  const router = useRouter();\n  const { push } = router;\n\n  const [whenFirstGlo, setWhenFirstGlo] = useState<string>(\"\");\n  const [showBalanceDropdown, setShowBalanceDropdown] = useState(false);\n\n  const formattedBalance = getUSFormattedNumber(balance);\n  const yearlyYieldFormatted =\n    yearlyYield > 0 ? `$0 - $${yearlyYield.toFixed(0)}` : \"$0\";\n  useEffect(() => {\n    if (isCopiedTooltipOpen) {\n      setTimeout(() => setIsCopiedTooltipOpen(false), 2000);\n    }\n  }, [isCopiedTooltipOpen]);\n  useEffect(() => {\n    const seeWhenFirstGloTransaction = async () => {\n      if (!address || !address.startsWith(\"0x\") || isVe) {\n        return;\n      }\n\n      const addressToCheck = address as string;\n      const { data } = await axios.get<KVResponse>(\n        `/api/transfers/first-glo/${addressToCheck}`\n      );\n      const { dateFirstGlo } = data;\n      if (dateFirstGlo) {\n        setWhenFirstGlo(beautifyDate(new Date(dateFirstGlo)));\n      }\n    };\n    seeWhenFirstGloTransaction();\n  }, [address]);\n\n  const supportedChains = [\n    {\n      name: \"Ethereum\",\n      logo: \"/ethereum-square-logo.svg\",\n      balance: ethereumBalanceFormatted,\n    },\n    {\n      name: \"Polygon\",\n      logo: \"/polygon-matic-logo.svg\",\n      balance: polygonBalanceFormatted,\n    },\n    {\n      name: \"Celo\",\n      logo: \"/celo-square-logo.svg\",\n      balance: celoBalanceFormatted,\n    },\n    {\n      name: \"Optimism\",\n      logo: \"/optimism-logo.svg\",\n      balance: optimismBalanceFormatted,\n    },\n    {\n      name: \"Arbitrum\",\n      logo: \"/arbitrum-logo.svg\",\n      balance: arbitrumBalanceFormatted,\n    },\n    {\n      name: \"Base\",\n      logo: \"/base-logo.svg\",\n      balance: baseBalanceFormatted,\n    },\n  ];\n\n  return (\n    <>\n      <Head>\n        <title>Glo Impact</title>\n        <meta name=\"keywords\" content=\"glo, impact, stablecoin, crypto\" />\n        <meta name=\"robots\" content=\"index, follow\" />\n        <meta name=\"language\" content=\"English\" />\n        <meta name=\"author\" content=\"Glo\" />\n        <meta name=\"twitter:site\" content=\"@glodollar\" />\n        <meta name=\"twitter:creator\" content=\"@glodollar\" />\n      </Head>\n      <Navbar />\n      <div className=\"mt-4 px-6\">\n        <div className=\"bg-white rounded-[20px] py-4\">\n          <div className=\"flex flex-col space-y-2 px-4 mb-4\">\n            <div className=\"flex flex-row font-semibold justify-start mb-4 hover:cursor-pointer\">\n              <Tooltip\n                anchorId=\"copy-wallet-address\"\n                content=\"Copied!\"\n                noArrow={true}\n                isOpen={isCopiedTooltipOpen}\n                className=\"ml-16\"\n              />\n              <div\n                id=\"copy-wallet-address\"\n                className=\"flex text-xs items-center justify-start\"\n                onClick={() => {\n                  navigator.clipboard.writeText(address as string);\n                  setIsCopiedTooltipOpen(true);\n                }}\n              >\n                <button className=\"primary-button w-16 h-16 p-2 text-sm text-pine-900/90 mr-4\">\n                  {address && lastSliceAddress(address)}\n                </button>\n                <div className=\"flex flex-col text-[14px] font-normal leading-normal text-pine-900/90\">\n                  <span>{sliceAddress(address as string, 4)}</span>\n                  <span>{idrissIdentity || ensIdentity}</span>\n                  <span>{whenFirstGlo}</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"text-normal pb-4\">Owns</div>\n            <div className=\"flex flex-row font-extrabold justify-start relative\">\n              <div\n                className=\"flex flex-row text-[2.625rem] items-baseline cursor-pointer\"\n                onClick={() => {\n                  setShowBalanceDropdown(!showBalanceDropdown);\n                }}\n              >\n                <span\n                  className=\"font-extrabold\"\n                  data-testid=\"formatted-balance\"\n                >\n                  ${formattedBalance}{\" \"}\n                </span>\n                <span className=\"text-sm ml-1\">Glo Dollar</span>\n              </div>\n              {showBalanceDropdown && !isVe && (\n                <div className=\"absolute top-10 z-10 mt-1 w-[280px] bg-white border-2 border-pine-400/90 rounded-lg\">\n                  <div className=\"h-4 w-4 bg-white border-white border-t-pine-400/90 border-r-pine-400/90 border-2 -rotate-45 transform origin-top-left translate-x-32\"></div>\n\n                  <div className=\"flex flex-col justify-center items-center\">\n                    {supportedChains.map((chain) => (\n                      <div\n                        key={chain.name}\n                        className=\"flex flex-row align-middle text-[2.625rem] items-center justify-between w-[200px] mb-2\"\n                      >\n                        <div className=\"text-sm text-pine-700/90 mb-1.5 w-1/6\">\n                          <Image\n                            alt={`${chain.name} logo`}\n                            src={chain.logo}\n                            width={20}\n                            height={20}\n                          />\n                        </div>\n                        <div className=\"text-sm text-pine-700/90 mb-1.5 w-1/3\">\n                          {chain.name}\n                        </div>\n                        <div className=\"text-sm text-pine-700/90 mb-1.5 w-1/2 text-right\">\n                          ${chain?.balance?.dblFmtBalance}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n          <div\n            className=\"flex flex-col bg-impact-bg text-impact-fg rounded-[24px] mx-1 mb-1 px-4 pb-3 cursor-pointer\"\n            onClick={() => openModal(<BuyGloModal totalBalance={1000} />)}\n            data-testid=\"simulateBuyGlo\"\n          >\n            <div className=\"overflow-hidden\">\n              <div className=\"h-4 w-4 bg-white -rotate-45 transform origin-top-left translate-x-32\"></div>\n            </div>\n            <div className=\"flex flex-col w-full justify-between items-start space-y-2\">\n              <span className=\"my-2\">\n                Generating charitable donations up to\n              </span>\n              <div\n                className=\"text-[2.625rem] leading-[2.625rem] break-all font-neuehaasgrotesk\"\n                data-testid=\"yearlyYieldFormatted\"\n              >\n                {yearlyYieldFormatted}\n                <span className=\"text-base\">/ year</span>\n              </div>\n              <span className=\"text-xs text-[11px] py-4\">\n                Current impact on the lower end of this range because Glo Dollar{\" \"}\n                <a\n                  className=\"underline\"\n                  href=\"https://www.glodollar.org/articles/from-bootstrap-to-high-impact\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  is bootstrapping\n                </a>\n                . Adoption helps grow impact.\n              </span>\n            </div>\n          </div>\n          {/*<DetailedEnoughToBuy\n            yearlyYield={yearlyYield}\n            noImpactCopyText=\"Nothing.\"\n          />*/}\n        </div>\n        <div className=\"flex flex-col items-center justify-center\">\n          <div className=\"font-normal leading-normal mt-3 mb-2\">\n            Fund public goods by hodling Glo\n          </div>\n          <button\n            className=\"primary-button px-6\"\n            onClick={() => push(\"/sign-in\")}\n          >\n            Buy Glo Dollar\n          </button>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst beautifyDate = (date?: Date) => {\n  if (!date) {\n    return \"\";\n  }\n\n  const year = date.getFullYear().toString().slice(2);\n  const month = date.toLocaleString(\"default\", { month: \"long\" }).toLowerCase();\n\n  return ` 🔆 ${month.toString().toLowerCase()} ‘${year}`;\n};\n\nfunction formatBalance(balance: bigint) {\n  const balanceValue = BigInt(balance.toString()) / BigInt(10 ** 18);\n  return customFormatBalance({\n    decimals: 18,\n    formatted: balanceValue.toString(),\n    symbol: \"USDGLO\",\n    value: balanceValue,\n  });\n}\n\n// serverside rendering\nexport async function getServerSideProps(context: GetServerSidePropsContext) {\n  const { res } = context;\n  res.setHeader(\n    \"Cache-Control\",\n    \"public, s-maxage=10, stale-while-revalidate=59\"\n  );\n\n  const pathname = context.req.url;\n  const isVe = pathname?.includes(\"/impact/ve/0x\");\n\n  // identity can be an address or an idriss identity\n  let { identity } = context.query;\n  if (Array.isArray(identity)) {\n    identity = identity[0];\n  }\n\n  if (!identity) {\n    return {\n      props: {\n        balance: 0,\n        yearlyYield: 0,\n      },\n    };\n  }\n\n  let address = identity;\n  let idrissIdentity = \"\";\n  let ensIdentity = \"\";\n  if (isVe) {\n    address = identity;\n  } else if (identity.startsWith(\"0x\")) {\n    address = identity;\n    const res = await idriss.reverseResolve(address);\n    idrissIdentity = typeof res === \"string\" ? res : \"\";\n  } else if (identity.includes(\"@\")) {\n    idrissIdentity = identity;\n    try {\n      const idrissResolvedAddresses = await idriss.resolve(idrissIdentity);\n      if (idrissResolvedAddresses) {\n        address = Object.values(idrissResolvedAddresses)[0] as string;\n      }\n    } catch (err) {}\n  } else if (identity.endsWith(\".eth\")) {\n    const client = createPublicClient({\n      chain: mainnet,\n      transport: http(),\n    });\n    const ensAddress = await getEnsAddress(client, {\n      name: normalize(identity),\n    });\n    ensIdentity = identity;\n    address = ensAddress!;\n  }\n\n  if (!address) {\n    return {\n      props: {\n        balance: 0,\n        yearlyYield: 0,\n      },\n    };\n  }\n  const {\n    totalBalance: balance,\n    polygonBalance,\n    ethereumBalance,\n    celoBalance,\n    optimismBalance,\n    arbitrumBalance,\n    baseBalance,\n    vechainBalance,\n  } = await getBalances(isVe ? `ve${address}` : address);\n  let yearlyYield = getTotalYield(balance);\n\n  // round down to 0 when the yield isn't even $1\n  if (yearlyYield < 1) {\n    yearlyYield = 0;\n  }\n\n  // meta tags\n  const ogTitle =\n    \"Make an impact with Glo - the stablecoin that funds public goods and charities.\";\n  const ogDescription =\n    \"Glo Dollar is a fully backed stablecoin that redistributes all profits as donations to charitable causes. Fund what matters at zero cost to you. Join the movement.\";\n  const ogUrl = `${process.env.VERCEL_OG_URL}${pathname}`;\n  const ogImage = `${process.env.VERCEL_OG_URL}/api/og/${balance}/${yearlyYield}.png`;\n\n  return {\n    props: {\n      address,\n      idrissIdentity,\n      ensIdentity,\n      balance,\n      yearlyYield,\n      polygonBalanceFormatted: formatBalance(polygonBalance || BigInt(0)),\n      ethereumBalanceFormatted: formatBalance(ethereumBalance || BigInt(0)),\n      optimismBalanceFormatted: formatBalance(optimismBalance || BigInt(0)),\n      arbitrumBalanceFormatted: formatBalance(arbitrumBalance || BigInt(0)),\n      baseBalanceFormatted: formatBalance(baseBalance || BigInt(0)),\n      celoBalanceFormatted: formatBalance(celoBalance || BigInt(0)),\n      vechainBalanceFormatted: formatBalance(vechainBalance || BigInt(0)),\n      isVe,\n      openGraphData: [\n        {\n          property: \"og:image\",\n          content: ogImage,\n          key: \"ogimage\",\n        },\n        {\n          property: \"og:image:width\",\n          content: \"1200\",\n          key: \"ogimagewidth\",\n        },\n        {\n          property: \"og:image:height\",\n          content: \"630\",\n          key: \"ogimageheight\",\n        },\n        {\n          property: \"og:url\",\n          content: ogUrl,\n          key: \"ogurl\",\n        },\n        {\n          property: \"og:title\",\n          content: ogTitle,\n          key: \"ogtitle\",\n        },\n        {\n          property: \"og:description\",\n          content: ogDescription,\n          key: \"ogdesc\",\n        },\n        {\n          property: \"og:type\",\n          content: \"website\",\n          key: \"website\",\n        },\n        {\n          name: \"twitter:title\",\n          content: ogTitle,\n          key: \"twtitle\",\n        },\n        {\n          name: \"twitter:description\",\n          content: ogDescription,\n          key: \"twdesc\",\n        },\n        {\n          name: \"twitter:image\",\n          content: ogImage,\n          key: \"twimage\",\n        },\n        {\n          name: \"twitter:card\",\n          content: \"summary_large_image\",\n          key: \"twsummary\",\n        },\n        {\n          name: \"twitter:image:alt\",\n          content: \"Glo Dollar impact per wallet\",\n          key: \"twimagealt\",\n        },\n        {\n          name: \"twitter:url\",\n          content: ogUrl,\n          key: \"twurl\",\n        },\n        {\n          name: \"title\",\n          content: ogTitle,\n          key: \"title\",\n        },\n        {\n          name: \"description\",\n          content: ogDescription,\n          key: \"desc\",\n        },\n      ],\n    },\n  };\n}\n"],"names":["window","__NEXT_P","push","Navbar","nav","className","a","href","Image","src","alt","width","height","Impact","address","idrissIdentity","ensIdentity","balance","yearlyYield","polygonBalanceFormatted","ethereumBalanceFormatted","celoBalanceFormatted","optimismBalanceFormatted","arbitrumBalanceFormatted","baseBalanceFormatted","isVe","isCopiedTooltipOpen","setIsCopiedTooltipOpen","useState","openModal","useContext","ModalContext","router","useRouter","whenFirstGlo","setWhenFirstGlo","showBalanceDropdown","setShowBalanceDropdown","formattedBalance","getUSFormattedNumber","yearlyYieldFormatted","toFixed","useEffect","setTimeout","async","startsWith","addressToCheck","data","axios","get","dateFirstGlo","beautifyDate","Date","seeWhenFirstGloTransaction","supportedChains","name","logo","Head","title","meta","content","div","Tooltip","anchorId","noArrow","isOpen","id","onClick","navigator","clipboard","writeText","button","lastSliceAddress","span","sliceAddress","data-testid","map","chain","dblFmtBalance","BuyGloModal","totalBalance","target","rel","date","year","getFullYear","toString","slice","month","toLocaleString","toLowerCase"],"sourceRoot":""}